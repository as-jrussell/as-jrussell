USE role ACCOUNTADMIN;



BEGIN
	CASE WHEN (SELECT COUNT(*)
    --SELECT *
	FROM INFORMATION_SCHEMA.PROCEDURES
	WHERE PROCEDURE_SCHEMA = 'DBA'AND PROCEDURE_NAME   = 'GETTASKS' 
      ) = 0
	THEN

USE SCHEMA DBA;
CREATE PROCEDURE GetTasks(
  WHATIF VARCHAR(16777216)
)
RETURNS TABLE(
NAME
VARCHAR(16777216),
QUERY_TEXT
VARCHAR(16777216),
CONDITION_TEXT
VARCHAR(16777216),
SCHEMA_NAME
VARCHAR(16777216),
TASK_SCHEMA_ID
NUMBER(38,0),
DATABASE_NAME
VARCHAR(16777216),
TASK_DATABASE_ID
NUMBER(38,0),
SCHEDULED_TIME
TIMESTAMP_LTZ(3),
COMPLETED_TIME
TIMESTAMP_LTZ(3),
STATE
VARCHAR(25),
RETURN_VALUE
VARCHAR(16777216),
QUERY_ID
VARCHAR(16777216),
QUERY_START_TIME
TIMESTAMP_LTZ(3),
ERROR_CODE
VARCHAR(16777216),
ERROR_MESSAGE
VARCHAR(16777216),
GRAPH_VERSION
NUMBER(38,0),
RUN_ID
NUMBER(38,0),
ROOT_TASK_ID
VARCHAR(16777216),
SCHEDULED_FROM
VARCHAR(12),
INSTANCE_ID
NUMBER(38,0),
ATTEMPT_NUMBER
NUMBER(38,0),
CONFIG
VARCHAR(16777216),
QUERY_HASH
VARCHAR(16777216),
QUERY_HASH_VERSION
NUMBER(38,0),
QUERY_PARAMETERIZED_HASH
VARCHAR(16777216),
QUERY_PARAMETERIZED_HASH_VERSION
NUMBER(38,0),
GRAPH_RUN_GROUP_ID
VARCHAR(16777216)
)

LANGUAGE SQL
EXECUTE AS OWNER
AS
'
BEGIN
  IF (WHATIF = '''' )  
   THEN 
    DECLARE RES RESULTSET DEFAULT (
SELECT *
FROM snowflake.account_usage.task_history
ORDER BY QUERY_START_TIME DESC 
LIMIT 100);

    BEGIN
      RETURN TABLE(RES);
    END;

ELSEIF (WHATIF IN (SELECT DATABASE_NAME FROM SNOWFLAKE.ACCOUNT_USAGE.DATABASES )) THEN 	
DECLARE RES RESULTSET DEFAULT (
SELECT *
FROM snowflake.account_usage.task_history
WHERE DATABASE_NAME = :WHATIF
ORDER BY QUERY_START_TIME DESC 
LIMIT 100);

    BEGIN
      RETURN TABLE(RES);
END; 
  
 ELSEIF  (WHATIF IN (select SCHEMA_NAME FROM SNOWFLAKE.ACCOUNT_USAGE.SCHEMATA))     THEN 	
DECLARE RES RESULTSET DEFAULT (
SELECT *
FROM snowflake.account_usage.task_history
WHERE SCHEMA_NAME = :WHATIF
ORDER BY QUERY_START_TIME DESC 
LIMIT 100);

    BEGIN
      RETURN TABLE(RES);
    END;
    END IF;
END;';
return 'new stored proc';
ELSE
USE SCHEMA DBA;

CREATE OR REPLACE PROCEDURE GetTasks(
  WHATIF VARCHAR(16777216)
)
RETURNS TABLE(
NAME
VARCHAR(16777216),
QUERY_TEXT
VARCHAR(16777216),
CONDITION_TEXT
VARCHAR(16777216),
SCHEMA_NAME
VARCHAR(16777216),
TASK_SCHEMA_ID
NUMBER(38,0),
DATABASE_NAME
VARCHAR(16777216),
TASK_DATABASE_ID
NUMBER(38,0),
SCHEDULED_TIME
TIMESTAMP_LTZ(3),
COMPLETED_TIME
TIMESTAMP_LTZ(3),
STATE
VARCHAR(25),
RETURN_VALUE
VARCHAR(16777216),
QUERY_ID
VARCHAR(16777216),
QUERY_START_TIME
TIMESTAMP_LTZ(3),
ERROR_CODE
VARCHAR(16777216),
ERROR_MESSAGE
VARCHAR(16777216),
GRAPH_VERSION
NUMBER(38,0),
RUN_ID
NUMBER(38,0),
ROOT_TASK_ID
VARCHAR(16777216),
SCHEDULED_FROM
VARCHAR(12),
INSTANCE_ID
NUMBER(38,0),
ATTEMPT_NUMBER
NUMBER(38,0),
CONFIG
VARCHAR(16777216),
QUERY_HASH
VARCHAR(16777216),
QUERY_HASH_VERSION
NUMBER(38,0),
QUERY_PARAMETERIZED_HASH
VARCHAR(16777216),
QUERY_PARAMETERIZED_HASH_VERSION
NUMBER(38,0),
GRAPH_RUN_GROUP_ID
VARCHAR(16777216)
)

LANGUAGE SQL
EXECUTE AS OWNER
AS
'
BEGIN
  IF (WHATIF = '''' )  
   THEN 
    DECLARE RES RESULTSET DEFAULT (
SELECT *
FROM snowflake.account_usage.task_history
ORDER BY QUERY_START_TIME DESC 
LIMIT 100);

    BEGIN
      RETURN TABLE(RES);
    END;

ELSEIF (WHATIF IN (SELECT DATABASE_NAME FROM SNOWFLAKE.ACCOUNT_USAGE.DATABASES )) THEN 	
DECLARE RES RESULTSET DEFAULT (
SELECT *
FROM snowflake.account_usage.task_history
WHERE DATABASE_NAME = :WHATIF
ORDER BY QUERY_START_TIME DESC 
LIMIT 100);

    BEGIN
      RETURN TABLE(RES);
END; 
  
 ELSEIF  (WHATIF IN (select SCHEMA_NAME FROM SNOWFLAKE.ACCOUNT_USAGE.SCHEMATA))     THEN 	
DECLARE RES RESULTSET DEFAULT (
SELECT *
FROM snowflake.account_usage.task_history
WHERE SCHEMA_NAME = :WHATIF
ORDER BY QUERY_START_TIME DESC 
LIMIT 100);

    BEGIN
      RETURN TABLE(RES);
    END;

 ELSEIF  (WHATIF IN (select NAME FROM SNOWFLAKE.ACCOUNT_USAGE.TASK_HISTORY))     THEN 	
DECLARE RES RESULTSET DEFAULT (
SELECT *
FROM snowflake.account_usage.task_history
WHERE NAME = :WHATIF
ORDER BY QUERY_START_TIME DESC 
LIMIT 100);

    BEGIN
      RETURN TABLE(RES);
    END;
    END IF;    
END;';
return 'updated stored';
	END;
    
END;

