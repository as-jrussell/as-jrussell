
declare @generic_ddl_1 varchar(max) = '5350';
declare @generic_ddl_2 varchar(max) = 'CHRYSLERRE';


declare @LenderID bigint = (select id from lender where code_tx =  @generic_ddl_1);
declare @FillerZero varchar(max) = replicate('0', 18);
declare @RD_MISC1_ID as bigint = (select ID from RELATED_DATA_DEF where NAME_TX = 'Misc1');
declare @BeginDate As datetime2;
declare @EndDate AS datetime2;
declare @ProcessDefinitionID as bigint = 0
declare @CyclePeriod as nvarchar(15) = NULL

SET @BeginDate = CONVERT(varchar(20),GETDATE(),101)
SET @BeginDate = DATEADD(d,(day(@BeginDate)*-1) + 1,@BeginDate)
SET @BeginDate = DATEADD(m,(month(@BeginDate)*-1) + 1,@BeginDate)
SET @BeginDate = DATEADD(yy,-1,@BeginDate)								--Start last year
SET @EndDate = GETDATE()

select 

--LOAN RELATED DATA
CASE when coalesce(L.BRANCH_CODE_TX,'') = '' THEN 'No Branch' ELSE L.BRANCH_CODE_TX END as [LOAN_BRANCHCODE_TX]
,'' as LOAN_PAGEBREAKTYPE_TX	
,'' as LOAN_PAGEBREAK_TX
,CASE WHEN ISNULL(L.DIVISION_CODE_TX,'') = '' THEN '0'ELSE L.DIVISION_CODE_TX END AS [LOAN_DIVISIONCODE_TX]
,coalesce(RC_DIVISION.DESCRIPTION_TX,RC_SC.DESCRIPTION_TX) as [LOAN_TYPE_TX]
,RC.TYPE_CD as [REQUIREDCOVERAGE_CODE_TX]
,RC_COVERAGETYPE.MEANING_TX as [REQUIREDCOVERAGE_TYPE_TX]
,L.NUMBER_TX as [LOAN_NUMBER_TX]
,SUBSTRING(@FillerZero, 1, 18 - len(L.NUMBER_TX)) + CAST(L.NUMBER_TX AS nvarchar(18)) AS [LOAN_NUMBERSORT_TX]
,L.EFFECTIVE_DT as [LOAN_EFFECTIVE_DT]
,CONVERT(nvarchar(8), L.EFFECTIVE_DT, 112) as [LOAN_EFFDTSORT_TX]
,L.MATURITY_DT as [LOAN_MATURITY_DT]
,DateDiff(MONTH,L.EFFECTIVE_DT,L.MATURITY_DT) as [LOAN_TERM_NO]
,C.LOAN_BALANCE_NO as [LOAN_BALANCE_NO]
,SUBSTRING(@FillerZero, 1, 15 - len(C.LOAN_BALANCE_NO)) + CAST(C.LOAN_BALANCE_NO AS nvarchar(15)) AS [LOAN_BALANCESORT_TX]
,L.ORIGINAL_BALANCE_AMOUNT_NO as [LOAN_ORIGINALBALANCE_AMOUNT_NO]
,L.BALANCE_LAST_UPDATE_DT as [LOAN_BALANCE_DT]
,CONVERT(nvarchar(10), L.BALANCE_LAST_UPDATE_DT, 101) as [LOAN_BALDTFORMAT_TX]
,L.APR_AMOUNT_NO as [LOAN_APR_AMOUNT_NO]
,L.PAYMENT_FREQUENCY_CD as [LOAN_PAYMENT_FREQUENCY_CD]
,L.NOTE_TX as [LOAN_NOTE_TX]
,(CASE when coalesce(L.OFFICER_CODE_TX,'') = '' then 'No Loan Officer' else L.OFFICER_CODE_TX END) as [LOAN_OFFICERCODE_TX]
,L.DEALER_CODE_TX as [LOAN_DEALERCODE_TX]
,L.CREDIT_SCORE_CD as [LOAN_CREDITSCORECODE_TX]
,L.BALANCE_AMOUNT_NO as [LOAN_BAL_NO]
,L.LAST_PAYMENT_DT as [LN_LastPmtDt]
,L.NEXT_SCHEDULED_PAYMENT_DT as [LN_NextPmtDt]
,L.LENDER_BRANCH_CODE_TX as [LOAN_LENDER_BRANCH_CODE_TX]
,left(isnull(RD.VALUE_TX,' '),1) as [MISC1_TX]

--LENDER
,LND.CODE_TX as [LOAN_LENDERCODE_TX]
,LND.NAME_TX as [LENDER_NAME_TX]

--COLLATERAL
,C.COLLATERAL_NUMBER_NO as [COLLATERAL_NUMBER_NO]
,CC.CODE_TX as [COLLATERAL_CODE_TX]
,RCA_PROP.VALUE_TX AS [PROPERTY_TYPE_CD]
,C.LENDER_COLLATERAL_CODE_TX as [LENDER_COLLATERAL_CODE_TX]
,C.LOAN_PERCENTAGE_NO as [COLLATERAL_LOAN_PERCENTAGE_NO]
,C.LENDER_STATUS_OFFICER_TX as [LENDER_STATUS_OFFICER_TX]
,C.LEGAL_STATUS_CODE_TX as [LEGAL_STATUS_CODE_TX]
,C.PURPOSE_CODE_TX as [PURPOSE_CODE_TX]

--OWNER
,O.LAST_NAME_TX as [OWNER_LASTNAME_TX]
,O.FIRST_NAME_TX as [OWNER_FIRSTNAME_TX]
,O.MIDDLE_INITIAL_TX as [OWNER_MIDDLEINITIAL_TX]
,CASE WHEN ISNULL(ODBA.NAME_TX,'') = '' THEN ODBA.LAST_NAME_TX ELSE ODBA.NAME_TX END AS [OWNER_NAME_TX]
,'' as [ADDITIONAL_INSURED_NAME_TX]
,(select COUNT(*) from OWNER_LOAN_RELATE where LOAN_ID = L.ID and OWNER_TYPE_CD = 'AI' and PURGE_DT is null) as [ADDITIONAL_INSURED_CNT]
,Case when substring(OL.OWNER_TYPE_CD,1,1) = 'C' then 'C' else '' End as [OWNER_COSIGN_TX]
,AO.LINE_1_TX as [OWNER_LINE1_TX]
,AO.LINE_2_TX as [OWNER_LINE2_TX]
,AO.CITY_TX as [OWNER_CITY_TX]
,AO.STATE_PROV_TX as [OWNER_STATE_TX]
,AO.POSTAL_CODE_TX as [OWNER_ZIP_TX]
,O.CREDIT_SCORE_TX as [OWNER_CREDIT_SCORE_TX]

--PROPERTY
,P.YEAR_TX as [COLLATERAL_YEAR_TX]
,P.MAKE_TX as [COLLATERAL_MAKE_TX]
,P.MODEL_TX as [COLLATERAL_MODEL_TX]
,P.VIN_TX as [COLLATERAL_VIN_TX]
,P.DESCRIPTION_TX as [COLLATERAL_EQUIP_TX]
,P.FLOOD_ZONE_TX as [PROPERTY_FLOODZONE_TX]
,left(isnull(P.FLOOD_ZONE_TX,' '),1) as [FLOOD_VALUE_TX]
,P.ACV_NO as [PROPERTY_ACV_NO]
,(CASE when P.TITLE_CD = 'Y' then 'Yes' else 'No' END) as [PROPERTY_TITLE_CD]
,AM.LINE_1_TX as [COLLATERAL_LINE1_TX]
,AM.LINE_2_TX as [COLLATERAL_LINE2_TX]
,AM.CITY_TX as [COLLATERAL_CITY_TX]
,AM.STATE_PROV_TX as [COLLATERAL_STATE_TX]
,AM.POSTAL_CODE_TX as [COLLATERAL_ZIP_TX]
,isnull(AM.LINE_1_TX,'') + ' ' + isnull(AM.LINE_2_TX,'') + ' ' + isnull(AM.CITY_TX,'') + ' ' + isnull(AM.STATE_PROV_TX,'') + ' ' + isnull(AM.POSTAL_CODE_TX,'') as [COLLATERAL_MORTGAGE_TX]
--67

--COVERAGE
,RC.REQUIRED_AMOUNT_NO as [REQUIREDCOVERAGE_REQUIREDAMOUNT_NO]
,PCOTHER.COVERAGE_BASIS_CD as [COVERAGE_BASIS_CD]
,PCOTHER.AMOUNT_NO as [OTHER_AMOUNT_NO]
,PCPHYS.AMOUNT_NO as [PHYSICALDAMAGE_AMOUNT_NO]
,PCBIPA.AMOUNT_NO as [BODILYINJURYACCIDENT_AMOUNT_NO]
,PCBIPP.AMOUNT_NO as [BODILYINJURYPERSON_AMOUNT_NO]
,case 
when (L.DIVISION_CODE_TX in (3,8) OR RCA_PROP.VALUE_TX in ('VEH','BOAT')) and PCPHYS.AMOUNT_NO > 0 then PCPHYS.AMOUNT_NO 
when (L.DIVISION_CODE_TX in (4,7,9,10) OR ISNULL(RCA_PROP.VALUE_TX,'') not in ('','VEH','BOAT')) then isnull(PCOTHER.AMOUNT_NO,0) 
else 0 
end as [COVERAGE_AMOUNT_NO]
,isnull(PCOTHER_CA.AMOUNT_NO,0) as [COVERAGE_CA_AMOUNT_NO]
,PCOTHER.DEDUCTIBLE_NO as [OTHER_DEDUCTIBLE_NO]
,PCCOMP.DEDUCTIBLE_NO as [COMPREHENSIVE_DEDUCTIBLE_NO]
,PCCOLL.DEDUCTIBLE_NO as [COLLISION_DEDUCTIBLE_NO]
,PCPHYS.DEDUCTIBLE_NO as [PHYSICALDAMAGE_DEDUCTIBLE_NO]	   
,CASE
WHEN RC.NOTICE_DT is not null and RC.NOTICE_SEQ_NO > 0
THEN cast(RC.NOTICE_SEQ_NO as char(1)) +  ' ' + NRef.MEANING_TX + ' ' + CONVERT(nvarchar(10), RC.NOTICE_DT, 101)
ELSE 
CASE
WHEN L.STATUS_CD in ('N','O','P') THEN LSRef.MEANING_TX
WHEN C.STATUS_CD in ('R','S','X') THEN CSRef.MEANING_TX
WHEN L.STATUS_CD = 'B' and C.STATUS_CD = 'Z' and RC.STATUS_CD in ('A','D') and RC.SUMMARY_STATUS_CD in ('A','N')
THEN LSRef.MEANING_TX + ' ' + CSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
WHEN L.STATUS_CD = 'B' and C.STATUS_CD = 'Z' and RC.STATUS_CD in ('A','D') and RC.SUMMARY_STATUS_CD not in ('A','N')
THEN LSRef.MEANING_TX + ' ' + CSRef.MEANING_TX + ' ' + RCISSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
WHEN L.STATUS_CD = 'B' and C.STATUS_CD = 'Z' and RC.STATUS_CD = 'T' and RC.SUMMARY_STATUS_CD in ('A','N')
THEN LSRef.MEANING_TX + ' ' + CSRef.MEANING_TX + ' ' + RCSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
WHEN L.STATUS_CD = 'B' and C.STATUS_CD = 'Z' and RC.STATUS_CD = 'T' and RC.SUMMARY_STATUS_CD not in ('A','N')
THEN LSRef.MEANING_TX + ' ' + CSRef.MEANING_TX + ' ' + RCSRef.MEANING_TX + ' ' + RCISSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
WHEN L.STATUS_CD = 'B' and C.STATUS_CD = 'Z' and RC.STATUS_CD not in ('A','D','T')
THEN LSRef.MEANING_TX + ' ' + CSRef.MEANING_TX + ' ' + RCSRef.MEANING_TX
WHEN C.STATUS_CD = 'Z' and RC.STATUS_CD in ('A','D') and RC.SUMMARY_STATUS_CD in ('A','N')
THEN CSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
WHEN C.STATUS_CD = 'Z' and RC.STATUS_CD in ('A','D') and RC.SUMMARY_STATUS_CD not in ('A','N')
THEN CSRef.MEANING_TX + ' ' + RCISSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
WHEN C.STATUS_CD = 'Z' and RC.STATUS_CD = 'T' and RC.SUMMARY_STATUS_CD in ('A','N')
THEN CSRef.MEANING_TX + ' ' + RCSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
WHEN C.STATUS_CD = 'Z' and RC.STATUS_CD = 'T' and RC.SUMMARY_STATUS_CD not in ('A','N')
THEN CSRef.MEANING_TX + ' ' + RCSRef.MEANING_TX + ' ' + RCISSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
WHEN C.STATUS_CD = 'Z' and RC.STATUS_CD not in ('A','D','T')
THEN CSRef.MEANING_TX + ' ' + RCSRef.MEANING_TX
WHEN L.STATUS_CD = 'A' and RC.STATUS_CD in ('A','D') and RC.SUMMARY_STATUS_CD in ('A','N') 
THEN RCISRef.MEANING_TX
WHEN L.STATUS_CD = 'A' and RC.STATUS_CD in ('A','D') and RC.SUMMARY_STATUS_CD not in ('A','N') 
THEN RCISSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX 
WHEN L.STATUS_CD = 'A' and RC.STATUS_CD = 'T' and RC.SUMMARY_STATUS_CD in ('A','N')
THEN RCSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
WHEN L.STATUS_CD = 'A' and RC.STATUS_CD = 'T' and RC.SUMMARY_STATUS_CD not in ('A','N')
THEN RCSRef.MEANING_TX + ' ' + RCISSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
WHEN L.STATUS_CD = 'A' and RC.STATUS_CD not in ('A','D','T')
THEN RCSRef.MEANING_TX
WHEN L.STATUS_CD = 'B' and RC.STATUS_CD in ('A','D') and RC.SUMMARY_STATUS_CD in ('A','N')
THEN LSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
WHEN L.STATUS_CD = 'B' and RC.STATUS_CD in ('A','D') and RC.SUMMARY_STATUS_CD not in ('A','N')
THEN LSRef.MEANING_TX + ' ' + RCISSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
WHEN L.STATUS_CD = 'B' and RC.STATUS_CD = 'T' and RC.SUMMARY_STATUS_CD in ('A','N')
THEN LSRef.MEANING_TX + ' ' + RCSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
WHEN L.STATUS_CD = 'B' and RC.STATUS_CD = 'T' and RC.SUMMARY_STATUS_CD not in ('A','N')
THEN LSRef.MEANING_TX + ' ' + RCSRef.MEANING_TX + ' ' + RCISSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
WHEN L.STATUS_CD = 'B' and RC.STATUS_CD not in ('A','D','T')
THEN LSRef.MEANING_TX + ' ' + RCSRef.MEANING_TX
END 
+
CASE WHEN ISNULL(NRef.CODE_CD ,'') = 'AN' THEN  
'; ' + NRef.CODE_CD + ' notified ' + IsNull(CONVERT(nvarchar(10), RC.NOTICE_DT, 101), '')
ELSE '' END
END as [COVERAGE_STATUS_TX]
,WRRef.MEANING_TX as [COVERAGEWAIVE_MEANING_TX]
--,coalesce(CI.CODE_CD, '') as [IMPAIRMENT_CODE_TX]
--,coalesce(IRRef.MEANING_TX, '') as [IMPAIRMENT_MEANING_TX]
,RC.MOST_RECENT_ATTACHED_DOC_TYPE_CD as [DOCTYPE_CODE_TX]
,CRRef.MEANING_TX as [CANCEL_MEANING_TX]
,RC.NOTICE_DT as [NOTICE_DT]
,RC.NOTICE_TYPE_CD as [NOTICE_TYPE_CD]
,NRef.MEANING_TX as [NOTICE_TYPE_TX]
,RC.NOTICE_SEQ_NO as [NOTICE_SEQ_NO]
,RC.EXPOSURE_DT as [COVERAGE_EXPOSURE_DT]
,CWT.CREATE_DT as [COVERAGE_WAIVE_STATUS_DT]
,CWT.START_DT as [COVERAGE_WAIVE_EVENT_DT]
,CWT.AUTHORIZED_BY_TX as [COVERAGE_WAIVE_OFFICER_TX]
,DateDiff(month,L.EFFECTIVE_DT,CWT.CREATE_DT) as [COVERAGE_WAIVE_TERM]
,DateDiff(month,CWT.CREATE_DT, L.MATURITY_DT) as [COVERAGE_WAIVE_REM_TERM]


--INSURANCE
,Case
when RC.SUMMARY_SUB_STATUS_CD = 'C' then CR.NAME_TX
when RC.SUMMARY_SUB_STATUS_CD = 'P' then PCP.INSURANCE_COMPANY_NAME_TX
else OP.BIC_NAME_TX
End as [INSCOMPANY_NAME_TX]
,Case
when RC.SUMMARY_SUB_STATUS_CD = 'C' then FPC.NUMBER_TX
when RC.SUMMARY_SUB_STATUS_CD = 'P' then PCP.POLICY_NUMBER_TX
else OP.POLICY_NUMBER_TX
End as [INSCOMPANY_POLICY_NO]
,Case
when RC.SUMMARY_SUB_STATUS_CD = 'C' then FPC.EFFECTIVE_DT
when RC.SUMMARY_SUB_STATUS_CD = 'P' then PCP.EFFECTIVE_DT
else OP.EFFECTIVE_DT
End as [INSCOMPANY_EFF_DT]
,Case
when RC.SUMMARY_SUB_STATUS_CD = 'C' then CONVERT(nvarchar(8), FPC.EFFECTIVE_DT, 112)
when RC.SUMMARY_SUB_STATUS_CD = 'P' then CONVERT(nvarchar(8), PCP.EFFECTIVE_DT, 112)
else CONVERT(nvarchar(8), OP.EFFECTIVE_DT, 112)
End as [INSCOMPANY_EFFDTSORT_TX]
,Case
when RC.SUMMARY_SUB_STATUS_CD = 'C' then
Case
when year(FPC.EXPIRATION_DT) = '9999' then NULL
else FPC.EXPIRATION_DT
End
when RC.SUMMARY_SUB_STATUS_CD = 'P' then
Case
when year(PCP.EXPIRATION_DT) = '9999' then NULL
else PCP.EXPIRATION_DT
End
else
Case
when year(OP.EXPIRATION_DT) = '9999' then NULL
else OP.EXPIRATION_DT
End
End as [INSCOMPANY_EXP_DT]
,Case
when RC.SUMMARY_SUB_STATUS_CD = 'C' then DateDiff (day,getDate(),FPC.EXPIRATION_DT)
when RC.SUMMARY_SUB_STATUS_CD = 'P' then DateDiff (day,getDate(),PCP.EXPIRATION_DT)
else DateDiff (day,getDate(),OP.EXPIRATION_DT)
End as [INSCOMPANY_EXP_DAYS]
,Case
when RC.SUMMARY_SUB_STATUS_CD = 'C' then FPC.CANCELLATION_DT
when RC.SUMMARY_SUB_STATUS_CD = 'P' then PCP.CANCELLATION_DT
else OP.CANCELLATION_DT
End as [INSCOMPANY_CAN_DT]
,Case
when RC.SUMMARY_SUB_STATUS_CD = 'C' then
Case
when YEAR(ISNULL(FPC.CANCELLATION_DT,FPC.EXPIRATION_DT)) = '9999' then NULL
else ISNULL(FPC.CANCELLATION_DT,FPC.EXPIRATION_DT)
End
when RC.SUMMARY_SUB_STATUS_CD = 'P' then
Case
when YEAR(ISNULL(PCP.CANCELLATION_DT,PCP.EXPIRATION_DT)) = '9999' then NULL
else isnull(PCP.CANCELLATION_DT,PCP.EXPIRATION_DT)
End
else
Case
when YEAR(ISNULL(OP.CANCELLATION_DT,OP.EXPIRATION_DT)) = '9999' then NULL
else ISNULL(OP.CANCELLATION_DT,OP.EXPIRATION_DT)
End
End as [INSCOMPANY_EXPCXL_DT]
,Case
when RC.SUMMARY_SUB_STATUS_CD = 'C' then isnull(CONVERT(nvarchar(8), FPC.CANCELLATION_DT, 112),CONVERT(nvarchar(8), FPC.EXPIRATION_DT, 112))
when RC.SUMMARY_SUB_STATUS_CD = 'P' then isnull(CONVERT(nvarchar(8), PCP.CANCELLATION_DT, 112),CONVERT(nvarchar(8), PCP.EXPIRATION_DT, 112))
else isnull(CONVERT(nvarchar(8), OP.CANCELLATION_DT, 112),CONVERT(nvarchar(8), OP.EXPIRATION_DT, 112))
End as [INSCOMPANY_EXPCXLDTSORT_TX]
,Case
when RC.SUMMARY_SUB_STATUS_CD = 'C' then DateDiff (day,isnull(isnull(FPC.CANCELLATION_DT,FPC.EXPIRATION_DT),L.EFFECTIVE_DT),getDate())
when RC.SUMMARY_SUB_STATUS_CD = 'P' then DateDiff (day,isnull(isnull(PCP.CANCELLATION_DT,PCP.EXPIRATION_DT),L.EFFECTIVE_DT),getDate())
else DateDiff (day,isnull(isnull(OP.CANCELLATION_DT,OP.EXPIRATION_DT),L.EFFECTIVE_DT),getDate())
End as [INSCOMPANY_UNINS_DAYS]
,'' as [INSCOMPANY_UNINSGROUP_TX]
,Case
when RC.SUMMARY_SUB_STATUS_CD = 'C' then CPQ.TERM_NO
End as [CPI_QUOTE_TERM_NO]
,Case
when RC.SUMMARY_SUB_STATUS_CD = 'C' then ISNULL(CDPRM.AMOUNT_NO,0)
End as [CPI_PREMIUM_AMOUNT_NO]
,Case
when RC.SUMMARY_SUB_STATUS_CD = 'P' then ISNULL(PCP.TOTAL_PREMIUM_NO,0)
End as [PC_PREMIUM_AMOUNT_NO]
,CASE WHEN RC.SUMMARY_SUB_STATUS_CD not in ('C', 'P') THEN OP2.BIC_NAME_TX ELSE '' END as [INSCOMPANY2_NAME_TX]
,CASE WHEN RC.SUMMARY_SUB_STATUS_CD not in ('C', 'P') THEN OP2.POLICY_NUMBER_TX ELSE '' END as [INSCOMPANY2_POLICY_NO]
,CASE WHEN RC.SUMMARY_SUB_STATUS_CD not in ('C', 'P') THEN OP2.EFFECTIVE_DT ELSE NULL END as [INSCOMPANY2_EFF_DT]
,CASE WHEN RC.SUMMARY_SUB_STATUS_CD not in ('C', 'P') THEN CONVERT(nvarchar(8), OP2.EFFECTIVE_DT, 112) ELSE NULL END as [INSCOMPANY2_EFFDTSORT_TX]
,CASE WHEN RC.SUMMARY_SUB_STATUS_CD not in ('C', 'P') THEN 
Case
when year(OP2.EXPIRATION_DT) = '9999' then NULL
else OP2.EXPIRATION_DT
End 
ELSE NULL END as [INSCOMPANY2_EXP_DT]
,CASE WHEN RC.SUMMARY_SUB_STATUS_CD not in ('C', 'P') THEN DateDiff (day,getDate(),OP2.EXPIRATION_DT) ELSE NULL END as [INSCOMPANY2_EXP_DAYS]
,CASE WHEN RC.SUMMARY_SUB_STATUS_CD not in ('C', 'P') THEN OP2.CANCELLATION_DT ELSE NULL END as [INSCOMPANY2_CAN_DT]
,CASE WHEN RC.SUMMARY_SUB_STATUS_CD not in ('C', 'P') THEN 
Case
when YEAR(ISNULL(OP2.CANCELLATION_DT,OP2.EXPIRATION_DT)) = '9999' then NULL
else ISNULL(OP2.CANCELLATION_DT,OP2.EXPIRATION_DT)
End 
ELSE NULL END as [INSCOMPANY2_EXPCXL_DT]
,CASE WHEN RC.SUMMARY_SUB_STATUS_CD not in ('C', 'P') THEN isnull(CONVERT(nvarchar(8), OP2.CANCELLATION_DT, 112),CONVERT(nvarchar(8), OP2.EXPIRATION_DT, 112)) ELSE NULL END as [INSCOMPANY2_EXPCXLDTSORT_TX]
,OP.BIC_NAME_TX as [BORRINSCOMPANY_NAME_TX]
,OP.POLICY_NUMBER_TX as [BORRINSCOMPANY_POLICY_NO]
,OP.EFFECTIVE_DT as [BORRINSCOMPANY_EFF_DT]
,Case
when year(OP.EXPIRATION_DT) = '9999' then NULL
else OP.EXPIRATION_DT
End as [BORRINSCOMPANY_EXP_DT]
,DateDiff (day,getDate(),OP.EXPIRATION_DT) as [BORRINSCOMPANY_EXP_DAYS]
,OP.CANCELLATION_DT as [BORRINSCOMPANY_CAN_DT]
,Case
when YEAR(ISNULL(OP.CANCELLATION_DT,OP.EXPIRATION_DT)) = '9999' then NULL
else ISNULL(OP.CANCELLATION_DT,OP.EXPIRATION_DT)
End as [BORRINSCOMPANY_EXPCXL_DT]
,ISNULL(CONVERT(nvarchar(8), OP.CANCELLATION_DT, 112),CONVERT(nvarchar(8), OP.EXPIRATION_DT, 112)) as [BORRINSCOMPANY_EXPCXLDTSORT_TX]
,OP.FLOOD_ZONE_TX AS [BORRINSCOMPANY_FLOODZONE_TX]
,OP2.FLOOD_ZONE_TX AS [BORRINSCOMPANY2_FLOODZONE_TX]
,Case
when ISNULL(OP.MOST_RECENT_EFFECTIVE_DT,'') <> '' then OP.MOST_RECENT_EFFECTIVE_DT
when ISNULL(OP.MAIL_DT,'') <> '' then OP.MAIL_DT
else OP.EFFECTIVE_DT
End as [OLDINSURANCE_DT]
,Case 
when E_MAIL_DT > OP.MAIL_DT then E_MAIL_DT 
else OP.MAIL_DT 
End as [MAIL_DT]
,BIA.NAME_TX as [INSAGENCY_NAME_TX]
,BIA.PHONE_TX as [INSAGENCY_PHONE_TX]

--ESCROW
,RC.ESCROW_IN AS [ESCROW_IN_REQ_COV_TX]
,E.END_DT AS [ESCROW_DUE_DT]

--IDs, STATUS
,L.ID as [LOAN_ID]
,C.ID as [COLLATERAL_ID]
,P.ID as [PROPERTY_ID]
,RC.ID as [REQUIREDCOVERAGE_ID]
,L.STATUS_CD as [LOAN_STATUSCODE]
,LSRef.MEANING_TX as [LOAN_STATUSMEANING_TX]
,L.EXTRACT_UNMATCH_COUNT_NO as [LOAN_UNMATCH_CNT]
,C.STATUS_CD as [COLLATERAL_STATUSCODE]
,CSRef.MEANING_TX as [COLLATERAL_STATUSMEANING_TX]
,C.EXTRACT_UNMATCH_COUNT_NO as [COLLATERAL_UNMATCH_CNT]
,RC.STATUS_CD as [REQUIREDCOVERAGE_STATUSCODE]
,RCSRef.MEANING_TX as [REQUIREDCOVERAGE_STATUSMEANING_TX]
,RC.SUB_STATUS_CD as [REQUIREDCOVERAGE_SUBSTATUSCODE]
,RC.SUMMARY_STATUS_CD as [REQUIREDCOVERAGE_INSSTATUSCODE]
,ISNULL(RCISRef.MEANING_TX, 'NOTAVAIL') as [REQUIREDCOVERAGE_INSSTATUSMEANING_TX]
,RC.SUMMARY_SUB_STATUS_CD as [REQUIREDCOVERAGE_INSSUBSTATUSCODE]
,RCISSRef.MEANING_TX as [REQUIREDCOVERAGE_INSSUBSTATUSMEANING_TX]     
,PROPERTY_DESCRIPTION = dbo.fn_GetPropertyDescriptionForReports(C.ID), 
CASE WHEN RC.BalanceOptionMaximumBalance is null THEN 0 ELSE RC.BalanceOptionMaximumBalance END as [OPT_MAX_BALANCE],
CASE WHEN  RC.BalanceOptionMinimumBalance is null THEN 0 ELSE RC.BalanceOptionMinimumBalance END AS [OPT_MIN_BALANCE],
RC.VehicleTitleOptionStartDate  AS [OPT_TITLE_START_DT],


RC.BalanceOptionBalanceType AS [OPT_BALANCE_TYPE]




from PROPERTY P
Join COLLATERAL C on C.PROPERTY_ID = P.ID AND C.PURGE_DT IS NULL
Join LOAN L on L.ID = C.LOAN_ID and L.LENDER_ID = P.LENDER_ID AND L.PURGE_DT IS NULL
LEFT Join RELATED_DATA RD on RD.RELATE_ID = L.ID and DEF_ID = @RD_MISC1_ID
Join LENDER LND on LND.ID = L.LENDER_ID AND LND.PURGE_DT IS NULL
Join OWNER_LOAN_RELATE OL on OL.PURGE_DT IS NULL and OL.LOAN_ID = L.ID and OL.OWNER_TYPE_CD = 'B' and OL.PRIMARY_IN = 'Y' -- or in some cases OL.OWNER_TYPE_CD = 'CS' instead
Join [OWNER] O on O.ID = OL.OWNER_ID AND O.PURGE_DT IS NULL
OUTER APPLY
(SELECT TOP 1 * FROM OWNER_LOAN_RELATE olr 
where 1=1 
and olr.loan_id = l.id 
and olr.OWNER_TYPE_CD = 'DBA' AND olr.PURGE_DT IS NULL
ORDER BY UPDATE_DT DESC)  OLDBA

LEFT JOIN [OWNER] ODBA on ODBA.ID = OLDBA.OWNER_ID AND ODBA.PURGE_DT IS NULL
left Join [OWNER_ADDRESS] AO on AO.ID = O.ADDRESS_ID AND AO.PURGE_DT IS NULL
left Join [OWNER_ADDRESS] AM on AM.ID = P.ADDRESS_ID AND AM.PURGE_DT IS NULL
left Join REQUIRED_COVERAGE RC on RC.PROPERTY_ID = P.ID AND RC.PURGE_DT IS NULL
LEFT JOIN COLLATERAL_CODE CC ON CC.ID = C.COLLATERAL_CODE_ID AND CC.PURGE_DT IS NULL
left Join WAIVE_TRACK CWT on CWT.REQUIRED_COVERAGE_ID = RC.ID and CWT.START_DT < GETDATE() and CWT.END_DT > GETDATE() and CWT.PURGE_DT IS NULL and 0=1 
--OUTER APPLY (
--select distinct case when (select COUNT(*) from IMPAIRMENT 
--where REQUIRED_COVERAGE_ID = RC.ID 
--AND START_DT < GETDATE() AND END_DT > GETDATE() AND PURGE_DT IS NULL and
--(OVERRIDE_TYPE_CD IS null or OVERRIDE_TYPE_CD = '')) > 1 
--then 'MU'  
--else CI1.CODE_CD
--end as CODE_CD
--from IMPAIRMENT CI1
--where CI1.REQUIRED_COVERAGE_ID = RC.ID 
--AND CI1.START_DT < GETDATE() AND CI1.END_DT > GETDATE() AND CI1.PURGE_DT IS NULL and
--(CI1.OVERRIDE_TYPE_CD IS null or CI1.OVERRIDE_TYPE_CD = '') 
--group by CI1.CODE_CD
--) CI
OUTER APPLY
(SELECT TOP 1 * FROM dbo.GetCurrentCoverage(P.ID, RC.ID, RC.TYPE_CD)
ORDER BY ISNULL(UNIT_OWNERS_IN, 'N') DESC
) OP
OUTER APPLY
(SELECT TOP 1 * FROM dbo.GetCurrentCoverage(P.ID, RC.ID, RC.TYPE_CD)
WHERE BASE_PROPERTY_TYPE_CD = 'CA' AND ID != OP.ID
ORDER BY ISNULL(EXCESS_IN, 'N') 
) OP2
left Join PRIOR_CARRIER_POLICY PCP on PCP.REQUIRED_COVERAGE_ID = RC.ID and RC.SUMMARY_SUB_STATUS_CD = 'P' AND PCP.PURGE_DT IS NULL
left join FORCE_PLACED_CERT_REQUIRED_COVERAGE_RELATE FPCR on FPCR.REQUIRED_COVERAGE_ID = RC.ID and RC.SUMMARY_SUB_STATUS_CD = 'C' AND FPCR.PURGE_DT IS NULL
left Join FORCE_PLACED_CERTIFICATE FPC on FPC.ID = FPCR.FPC_ID and FPC.ACTIVE_IN = 'Y' and RC.SUMMARY_SUB_STATUS_CD = 'C' AND FPC.PURGE_DT IS NULL
left Join CARRIER CR on CR.ID = FPC.CARRIER_ID and RC.SUMMARY_SUB_STATUS_CD = 'C' AND CR.PURGE_DT IS NULL 
left Join CPI_QUOTE CPQ ON CPQ.ID = FPC.CPI_QUOTE_ID and RC.SUMMARY_SUB_STATUS_CD = 'C' AND CPQ.PURGE_DT IS NULL
LEFT JOIN CPI_ACTIVITY CPA ON CPA.CPI_QUOTE_ID = CPQ.ID AND CPA.TYPE_CD = 'I'	and RC.SUMMARY_SUB_STATUS_CD = 'C' and CPA.PURGE_DT IS NULL
LEFT JOIN CERTIFICATE_DETAIL CDPRM ON CDPRM.CPI_ACTIVITY_ID = CPA.ID AND CDPRM.TYPE_CD = 'PRM' and RC.SUMMARY_SUB_STATUS_CD = 'C' AND CDPRM.PURGE_DT IS NULL
left Join BORROWER_INSURANCE_AGENCY BIA on BIA.ID = OP.BIA_ID AND BIA.PURGE_DT IS NULL
OUTER APPLY (
SELECT TOP 1 PC.TYPE_CD, PC.SUB_TYPE_CD, PC.OWNER_POLICY_ID, PC.DEDUCTIBLE_NO, PC.AMOUNT_NO, PC.ID, PC.COVERAGE_BASIS_CD
FROM POLICY_COVERAGE PC
WHERE 1=1
AND PC.OWNER_POLICY_ID = OP.ID
AND PC.START_DT <= GETDATE() AND PC.END_DT > GETDATE() AND PC.PURGE_DT IS NULL
AND PC.TYPE_CD NOT IN('PHYS-DAMAGE','AUTO-LIABILITY')
AND PC.TYPE_CD = RC.TYPE_CD
AND PC.SUB_TYPE_CD = 'CADW'
ORDER BY START_DT DESC
) PCOTHER
OUTER APPLY (
SELECT TOP 1 PC.TYPE_CD, PC.SUB_TYPE_CD, PC.OWNER_POLICY_ID, PC.DEDUCTIBLE_NO, PC.AMOUNT_NO, PC.ID, PC.COVERAGE_BASIS_CD
FROM POLICY_COVERAGE PC
WHERE 1=1
AND PC.OWNER_POLICY_ID = OP2.ID
AND PC.START_DT <= GETDATE() AND PC.END_DT > GETDATE() AND PC.PURGE_DT IS NULL
AND PC.TYPE_CD NOT IN('PHYS-DAMAGE','AUTO-LIABILITY')
AND PC.TYPE_CD = RC.TYPE_CD
AND PC.SUB_TYPE_CD = 'CADW'
ORDER BY START_DT DESC
) PCOTHER_CA
OUTER APPLY (
SELECT TOP 1 PC.TYPE_CD, PC.SUB_TYPE_CD, PC.OWNER_POLICY_ID, PC.DEDUCTIBLE_NO, PC.AMOUNT_NO
FROM POLICY_COVERAGE PC
WHERE 1=1
AND PC.OWNER_POLICY_ID = OP.ID
AND PC.START_DT <= GETDATE() AND PC.END_DT > GETDATE() AND PC.PURGE_DT IS NULL
AND PC.TYPE_CD = 'PHYS-DAMAGE'
AND PC.SUB_TYPE_CD = 'COMP'
ORDER BY START_DT DESC
) PCCOMP
OUTER APPLY (
SELECT TOP 1 PC.TYPE_CD, PC.SUB_TYPE_CD, PC.OWNER_POLICY_ID, PC.DEDUCTIBLE_NO, PC.AMOUNT_NO
FROM POLICY_COVERAGE PC
WHERE 1=1
AND PC.OWNER_POLICY_ID = OP.ID
AND PC.START_DT <= GETDATE() AND PC.END_DT > GETDATE() AND PC.PURGE_DT IS NULL
AND PC.TYPE_CD = 'PHYS-DAMAGE'
AND PC.SUB_TYPE_CD = 'COLL'
ORDER BY START_DT DESC
) PCCOLL
OUTER APPLY (
SELECT TOP 1 PC.TYPE_CD, PC.SUB_TYPE_CD, PC.OWNER_POLICY_ID, PC.DEDUCTIBLE_NO, PC.AMOUNT_NO
FROM POLICY_COVERAGE PC
WHERE 1=1
AND PC.OWNER_POLICY_ID = OP.ID
AND PC.START_DT <= GETDATE() AND PC.END_DT > GETDATE() AND PC.PURGE_DT IS NULL
AND PC.TYPE_CD = 'AUTO-LIABILITY'
AND PC.SUB_TYPE_CD = 'PCVH'
ORDER BY START_DT DESC
) PCPHYS
OUTER APPLY (
SELECT TOP 1 PC.TYPE_CD, PC.SUB_TYPE_CD, PC.OWNER_POLICY_ID, PC.DEDUCTIBLE_NO, PC.AMOUNT_NO
FROM POLICY_COVERAGE PC
WHERE 1=1
AND PC.OWNER_POLICY_ID = OP.ID
AND PC.START_DT <= GETDATE() AND PC.END_DT > GETDATE() AND PC.PURGE_DT IS NULL
AND PC.TYPE_CD = 'AUTO-LIABILITY'
AND PC.SUB_TYPE_CD = 'BIPA'
ORDER BY START_DT DESC
) PCBIPA
OUTER APPLY (
SELECT TOP 1 PC.TYPE_CD, PC.SUB_TYPE_CD, PC.OWNER_POLICY_ID, PC.DEDUCTIBLE_NO, PC.AMOUNT_NO
FROM POLICY_COVERAGE PC
WHERE 1=1
AND PC.OWNER_POLICY_ID = OP.ID
AND PC.START_DT <= GETDATE() AND PC.END_DT > GETDATE() AND PC.PURGE_DT IS NULL
AND PC.TYPE_CD = 'AUTO-LIABILITY'
AND PC.SUB_TYPE_CD = 'BIPP'
ORDER BY START_DT DESC
) PCBIPP
OUTER APPLY (SELECT TOP 1 E.LOAN_ID, E.PROPERTY_ID, E.END_DT, MAIL_DT AS E_MAIL_DT
FROM ESCROW E
JOIN ESCROW_REQUIRED_COVERAGE_RELATE ERCR
ON RC.ID = ERCR.REQUIRED_COVERAGE_ID
AND ERCR.PURGE_DT IS NULL
WHERE E.LOAN_ID = L.ID
AND E.PROPERTY_ID = P.ID
AND E.PURGE_DT IS NULL
AND E.REPORTED_DT IS NOT NULL
ORDER BY E.END_DT DESC, E.STATUS_CD DESC) E
left Join REF_CODE NRef on NRef.DOMAIN_CD = 'NoticeType' and NRef.CODE_CD = RC.NOTICE_TYPE_CD
left Join REF_CODE WRRef on WRRef.DOMAIN_CD = 'WaiveTrackReason' and WRRef.CODE_CD = CWT.REASON_CD
left Join REF_CODE CRRef on CRRef.DOMAIN_CD = 'OwnerPolicyCancelReason' and CRRef.CODE_CD = OP.CANCEL_REASON_CD
left Join REF_CODE LSRef on LSRef.DOMAIN_CD = 'LoanStatus' and LSRef.CODE_CD = L.STATUS_CD
left Join REF_CODE CSRef on CSRef.DOMAIN_CD = 'CollateralStatus' and CSRef.CODE_CD = C.STATUS_CD
left Join REF_CODE RCSRef on RCSRef.DOMAIN_CD = 'RequiredCoverageStatus' and RCSRef.CODE_CD = RC.STATUS_CD
left Join REF_CODE RCISRef on RCISRef.DOMAIN_CD = 'RequiredCoverageInsStatus' and RCISRef.CODE_CD = RC.SUMMARY_STATUS_CD
left Join REF_CODE RCISSRef on RCISSRef.DOMAIN_CD = 'RequiredCoverageInsSubStatus' and RCISSRef.CODE_CD = RC.SUMMARY_SUB_STATUS_CD
left Join REF_CODE RC_DIVISION on RC_DIVISION.DOMAIN_CD = 'ContractType' and RC_DIVISION.CODE_CD = L.DIVISION_CODE_TX
left Join REF_CODE RC_COVERAGETYPE on RC_COVERAGETYPE.DOMAIN_CD = 'Coverage' and RC_COVERAGETYPE.CODE_CD = RC.TYPE_CD
left Join REF_CODE RC_SC on RC_SC.DOMAIN_CD = 'SecondaryClassification' and cc.SECONDARY_CLASS_CD = RC_SC.CODE_CD
left Join REF_CODE_ATTRIBUTE RCA_PROP on RC_SC.DOMAIN_CD = RCA_PROP.DOMAIN_CD and RC_SC.CODE_CD = RCA_PROP.REF_CD and RCA_PROP.ATTRIBUTE_CD = 'PropertyType'
--left Join REF_CODE IRRef on IRRef.DOMAIN_CD = 'ImpairmentReason' and IRRef.CODE_CD = CI.CODE_CD

where 
l.lender_id = @LenderId and L.purge_dt is null
and  L.BRANCH_CODE_TX = @generic_ddl_2

and L.RECORD_TYPE_CD = 'G' 
and P.RECORD_TYPE_CD = 'G' 
and RC.RECORD_TYPE_CD = 'G' 
--and L.EXTRACT_UNMATCH_COUNT_NO = 0 and C.EXTRACT_UNMATCH_COUNT_NO = 0 and L.STATUS_CD != 'U' and C.STATUS_CD != 'U' 
and (RC.STATUS_CD IS NULL OR RC.STATUS_CD <> 'I') 
and P.PURGE_DT IS NULL