USE SHAVLIK


IF EXISTS ( SELECT  *
            FROM    sys.objects
            WHERE   object_ID = OBJECT_ID(N'[dbo].[xtr_CurrentPatchStatus]')
                    AND type IN (N'P') ) 
    DROP PROCEDURE [dbo].[xtr_CurrentPatchStatus] ;
GO




IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[xtr_CurrentPatchStatus]') AND type in (N'P', N'PC'))
BEGIN
	/* Create Empty Stored Procedure */
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[xtr_CurrentPatchStatus] AS RETURN 0;';
END;
GO


ALTER  PROCEDURE [dbo].[xtr_CurrentPatchStatus] (@BATCHID Int,@RECORDSSTAGED Int OUTPUT)

AS 
BEGIN 
DECLARE @ENTITYNAME VARCHAR(100) = 'xtr_CurrentPatchStatus'
BEGIN TRY

IF OBJECT_ID('tempdb..#MergeSummary') IS NULL
	CREATE TABLE #MergeSummary (CHANGE VARCHAR(20))


DECLARE @TempStatus TABLE (
MACHINEID Int,
BULLETIN VARCHAR(256),
PATCHID INT,
PRODUCTID INT,
ASSESSEDMACHINESTATEID INT,
SCANDATE DATETIME,
INSTALLSTATEID INT,
OSID INT,
OCCURENCES INT
)

DECLARE @CurrentPatchStatus TABLE (
MACHINEID Int,
BULLETIN VARCHAR(256),
PATCHID INT,
PRODUCTID INT,
ASSESSEDMACHINESTATEID INT,
SCANDATE DATETIME,
INSTALLSTATEID INT,
OSID INT

)



INSERT INTO @CurrentPatchStatus
SELECT MS.MACHINEID AS MACHINEID,P.BULLETIN AS BULLETIN , DPS.PATCHID AS PATCHID, PT.ID AS PRODUCTID, DPS.ASSESSEDMACHINESTATEID AS ASSESSEDMACHINESTATEID, 
PS.STARTEDON AS SCANDATE , DPS.INSTALLSTATEID AS INSTALLSTATE, SM.SMACHOSID AS OSID
FROM Reporting2.AssessedMachineState MS
LEFT OUTER JOIN
Reporting2.PatchScan PS ON PS.ID = MS.PATCHSCANID
LEFT OUTER JOIN
Reporting2.Machine MA ON MS.MACHINEID = MA.ID
LEFT OUTER JOIN
Reporting2.DetectedPatchState DPS ON MS.ID = DPS.ASSESSEDMACHINESTATEID
LEFT OUTER JOIN
DBO.ScanMachines SM ON DPS.ASSESSEDMACHINESTATEID = SM.SMACHID
LEFT OUTER JOIN
Reporting2.Patch P ON DPS.PATCHID = P.ID
LEFT OUTER JOIN
Reporting2.VendorSeverity VS ON VS.ID = P.VENDORSEVERITYID
LEFT OUTER JOIN
Reporting2.Product PT ON DPS.PRODUCTID = PT.ID
INNER JOIN(
 SELECT AMS.MACHINEID,  P.ID AS PATCHID, PP.PRODUCTID AS PRODUCTID,  MAX(PP.ASSESSEDMACHINESTATEID) AS MAXAMS
FROM Reporting2.Patch P 
INNER JOIN Reporting2.DetectedPatchState PP ON P.ID = PP.PATCHID
INNER JOIN Reporting2.AssessedMachineState AMS ON AMS.ID = PP.ASSESSEDMACHINESTATEID
GROUP BY AMS.MACHINEID, P.ID, PP.PRODUCTID) B
ON DPS.ASSESSEDMACHINESTATEID = B.MAXAMS and MS.MACHINEID = B.MACHINEID AND  P.ID = B.PATCHID AND PT.ID = B.PRODUCTID
WHERE PS.STARTEDON > (SELECT CASE WHEN COUNT(LOGDATE) <> 0 THEN MAX(LOGDATE) ELSE '2000-01-01 00:00:00.000' END FROM xtrEntityProcessLog ) 

DELETE @CurrentPatchStatus FROM @CurrentPatchStatus CPS
WHERE CPS.ASSESSEDMACHINESTATEID NOT IN
(SELECT B.SMACHID FROM 
  (SELECT DISTINCT SM.SMACHMMKEY, SM.SMACHID, A.SMACHOSID
  FROM DBO.ScanMachines SM
  INNER JOIN
  (SELECT SMACHMMKEY, MAX(SMACHOSID) AS   SMACHOSID
  FROM DBO.ScanMachines 
   GROUP BY SMACHMMKEY) A 
  ON A.SMACHMMKEY = SM.SMACHMMKEY 
  AND A.SMACHOSID = SM.SMACHOSID 
   WHERE SM.SMACHOSID IS NOT NULL
) B
)

INSERT INTO  @TempStatus 
SELECT [MACHINEID],[BULLETIN] ,[PATCHID],[PRODUCTID] ,[ASSESSEDMACHINESTATEID], [SCANDATE], [INSTALLSTATEID], [OSID], COUNT(*) OCCURENCES 
  FROM @CurrentPatchStatus
GROUP BY  [MACHINEID] ,[BULLETIN]  ,[PATCHID]  ,[PRODUCTID]  ,[ASSESSEDMACHINESTATEID], [SCANDATE], [INSTALLSTATEID], [OSID]
HAVING COUNT(*) > 1;

DELETE @CurrentPatchStatus FROM @CurrentPatchStatus CPS 
INNER JOIN @TempStatus  TS
ON TS.MACHINEID = CPS.MACHINEID AND TS.PATCHID = CPS.PATCHID 
AND TS.PRODUCTID = CPS.PRODUCTID AND TS.ASSESSEDMACHINESTATEID = CPS.ASSESSEDMACHINESTATEID


INSERT INTO @CurrentPatchStatus (MACHINEID, BULLETIN, PATCHID, PRODUCTID, ASSESSEDMACHINESTATEID, SCANDATE, INSTALLSTATEID, OSID)
SELECT [MACHINEID],[BULLETIN],[PATCHID],[PRODUCTID],[ASSESSEDMACHINESTATEID], [SCANDATE], [INSTALLSTATEID], [OSID]
FROM @TempStatus 



MERGE xtrCurrentPatchStatus T
USING @CurrentPatchStatus S ON T.MACHINEID = S.MACHINEID AND T.PATCHID = S.PATCHID AND T.PRODUCTID = S.PRODUCTID
WHEN NOT MATCHED BY TARGET 
THEN 
INSERT (MACHINEID, BULLETIN, PATCHID, PRODUCTID, ASSESSEDMACHINESTATEID, SCANDATE, INSTALLSTATEID, OSID)
VALUES (S.MACHINEID, S.BULLETIN, S.PATCHID, S.PRODUCTID, S.ASSESSEDMACHINESTATEID, S.SCANDATE, S.INSTALLSTATEID, S.OSID)
WHEN MATCHED THEN
UPDATE SET T.ASSESSEDMACHINESTATEID = S.ASSESSEDMACHINESTATEID, T.SCANDATE = S.SCANDATE, T.INSTALLSTATEID = S.INSTALLSTATEID
OUTPUT $action INTO #MergeSummary;

SET @RECORDSSTAGED = @@rowcount


INSERT INTO dbo.xtrEntityProcessLog (BATCHID, LOGDATE, PROCEDURENAME, DESCRIPTION) 

SELECT @BATCHID, GETUTCDATE(),  'xtr_CurrentPatchStatus', 'Inserted ' + CAST(ISNULL((SELECT COUNT(0) AS RecordCount FROM  #MergeSummary WHERE CHANGE = 'INSERT' GROUP BY CHANGE),0) AS nvarchar(100)) + ' records'
UNION
SELECT @BATCHID, GETUTCDATE(),  'xtr_CurrentPatchStatus', 'Updated ' + CAST(ISNULL((SELECT COUNT(0) AS RecordCount FROM  #MergeSummary WHERE CHANGE = 'UPDATE' GROUP BY CHANGE),0) AS nvarchar(100)) + ' records'

DROP TABLE #MergeSummary



END TRY

BEGIN CATCH

	EXEC xtr_LogErrorInfo @BATCHID, @ENTITYNAME


END CATCH

END

