USE [PRL_SELCO_572_QA]
GO

-- 1) Create the Certificate:
CREATE CERTIFICATE [Permission$ViewServerState]
    ENCRYPTION BY PASSWORD = 'UseBetterPassword!'
    WITH SUBJECT = 'VIEW SERVER STATE permission',
    EXPIRY_DATE = '2099-12-31';
/*
The password is used to protect only the Private Key, not the Public
Key or the Certificate in general.
 
The default expiration date is 1 year from the date the Certificate is
created. However, in many situations, such as with Module Signing, the
expiration date is actually ignored. Still, I prefer to set the
expiration date to 2099.
*/
 
 
-- 2) Sign the Module:
ADD SIGNATURE
    TO [dbo].[TRG_LOAN_UPD]
    BY CERTIFICATE [Permission$ViewServerState]
    WITH PASSWORD = 'UseBetterPassword!';

	-- 2) Sign the Module:
ADD SIGNATURE
    TO [dbo].[TRG_PRODUCT_UPD]
    BY CERTIFICATE [Permission$ViewServerState]
    WITH PASSWORD = 'UseBetterPassword!';


ADD SIGNATURE
    TO [dbo].[TRG_QUOTE_UPD]
    BY CERTIFICATE [Permission$ViewServerState]
    WITH PASSWORD = 'UseBetterPassword!';

	-- 2) Sign the Module:
ADD SIGNATURE
    TO [dbo].[TRG_PROCEED_UPD]
    BY CERTIFICATE [Permission$ViewServerState]
    WITH PASSWORD = 'UseBetterPassword!';



	ADD SIGNATURE
    TO [dbo].[TRG_BORROWER_UPD]
    BY CERTIFICATE [Permission$ViewServerState]
    WITH PASSWORD = 'UseBetterPassword!';

	-- 2) Sign the Module:
ADD SIGNATURE
    TO [dbo].[TRG_ADDRESS_UPD]
    BY CERTIFICATE [Permission$ViewServerState]
    WITH PASSWORD = 'UseBetterPassword!';
/*
Verify using the following query:
 
SELECT OBJECT_NAME(cp.[major_id]) AS [name], *
FROM   sys.crypt_properties cp;
*/
 
 
-- 3) Backup the Certificate and Private Key to files (optional if
--    using SQL Server 2012 or newer, else required):
--BACKUP CERTIFICATE [Permission$ViewServerState]
--  TO FILE = 'C:\TEMP\cert.cer'
--  WITH PRIVATE KEY
--  (
--     FILE = 'C:\TEMP\cert.pvk',
--     DECRYPTION BY PASSWORD = 'UseBetterPassword!', -- decrypt the PVK
--     ENCRYPTION BY PASSWORD = 'FilePassword!' -- encrypt PVK in file
--  );
 
---- and/or to a VARBINARY string to be copied and pasted somewhere safe:
--SELECT CERTPRIVATEKEY(CERT_ID(N'Permission$ViewServerState'),
--                      'NewPassword!', -- encrypt the value returned
--                      'UseBetterPassword!'); -- decrypt the Private Key
/*
You backup the Certificate so that you can recreate / restore it later.
The BACKUP command specifies two files because Certificates are two
pieces: the "Certificate" (confusingly the same name) is the Public Key
plus the meta-data (Expiration Date, Subject, etc), which is assumed,
and the Private Key, which is optional. For the Private Key, the
decryption and encryption passwords can be the same. They are different
here to make it visually clear that one of the passwords was used when
creating the Certificate, and the other is for something else. Using a
different password is more secure.
 
The CERTPRIVATEKEY built-in function was added in SQL Server 2012. If
you are using SQL Server 2005, 2008, or 2008 R2, then:
1) you do not have the CERTPRIVATEKEY function
2) this step is NOT optional; it is needed for Step 5 


0x1EF1B5B000000000010000000100000010000000D406000076C33D0C15CDC108BC35C016A40574F00702000000A4000060E84A4946D2649B1EF6D04360AB93F38E64290D9C093A16EDEE46DFB5DCD33CD5C89050D8C844B72268481E3445A4C0362A77D56CFB31E094EAB13689B0FFE434DF727DC98EFB4A8876A1CA66B5B60535F972A3A3363482D196B3165698B7948BC2FBE03E250B60E7591E19B9B0E16F2D5D79E721C002F0AE81F15F2CFC9C114439F97DC047280CD6DF1B52CC19D9ABE5EEFC2035948EC996AA2B6DB6B367170AAA60E94749C684C5C8E26867B934D7B2DFE652F222D83B1063BF8ACE8A2453CBEF1218F702C0F91AFF12D29A038CF0D5588C353FFA0D93B311C42A0C3CB5B17A36AFCBB4672D2DCA11D1C1E0B10410A4E3580C5BC9C690C46314489FE6A11547EA302AD976F2D0056661D6EEC390EA5404F381D49BB92BE09F28CA31459B7DCDF07090332F3502426E7AC7728CB3E074ECAABFB86911750DC3AA1F95AEBCA057621BC0799EA1417D6783066CD720BF17F28C86C0CF407FDBF97AA655106A704A0B6E3FBDC4075B0ABD68B00F249F4F2549E11710FC5178E0F227B57063162B245C9B198577D8015B30913411F993E8197B19D38F298985CFD45A1494AD048852AEEC33D29F0920A04B07D08356B4300839B1C97A2F4A864E18D4AD3AF16A6D5466320786D3684D34EBD70A4BD6802B32E66E4B299B80DBDC1ED4FA95F724036A0D366503B534A8B31C38819F5304B5730CD0B43C8A5152573A5090995470F597874733F03C6DEC2A4B44C22AFE1771142DF5ECF8FBD7D3EF81870ECC1E45EFB593CC2AD445D672B9CE8D69239ACE72FF51C0751AA58F811FE2FEF5AC78E6DC8A93B3DE105ECB765569AAC813AA81295C5B2C2AEA04B5196500D2D89601A5E3EBC9425F537D80DEA972A7BF249BEC174164E09A1F54E5A00F48942D8D494A06802BFCB5C3B07794EA2C6D8A274DA75AC9ACE0932FBD2D0735E7CE470603E7E02F3047C4268124F5CEC89A2085AE504EDFBB706FBCC311660C23843A68793A681664EA4D01EB81FE34FDE1F3F72B7B44CD3D2C9565343D626C0F0A802050309F41960163921254EB0BC3D051DD6D865E191BEA5C673A133713CCFC561C2697DD2E06A23F72043A602FCD0EA35AB867FD2282C03B1359F2D5E347CFEC8942ADD9FB4323F26220CCA69F1201DFBA815402EF7F7FB63B3C30841C0385E9A5082889A488A016236FF2A813963F39A35916E402D2E67116C6B3442970EE40C783DD444F08B8496EDBE470637139807B63C60BBAB4AB8AF02CEA26C608E2A2421636A968B0BFFD046DE8F9D7A20ACD4EF844A1494A5551BCD8A3107C038B70280D1C8A37E7B70137FB2C8FC6A050FB28D38211F23C9EFDE37F5DFFB14A955983A35A4D1B3F1F96B5583300FEDBB7C193BB1E2D212ACDC859E662456D29FACC454C58D89BF832FB3D6A1707569C59F50A40A0F0CFAC7D37C38F42EB46AE38FEB5A1725F0250E2A3D76C2F218FC9E30CF98C636F40714E4EAAAF45835AC66803783B1AC21CE2271A5A37966B863ADEB686221E6CCF677219212FF7A577EC012722EF36B6BDE92BF258163851BE17B4DC64E2E632AF8741E7D1C202EDE337E3538CEF4EFF5D47A75E8D63940C26D6BAF24EF80A2C3F962D2219FEA276B2420B619BCA7856EEC21704B060DC5D587BD941B2991554C161FD4F4796489F15F71E9051BF0364930965289CF3BA00A2C3EB32407D856D9D0E6BFFAD3E2F5E4B22651B6EE90A815E4F884E0B30E18EE673BA4B14F231780F71DD6862D8632411DF6DD5F99C37A3CA6BF0A0A3AEB9656FD5226CCFF4D042C2C36BCAA3A333E25BE1FF55C33B782740F594E0DE9075D0C9A3C0926D59122B43FC2FF5336F049BA35D7CA75AF2AF9FBB92559A65774E0F40EE43C295E797B23D8330772955FA01897687789FB2960DC13BEE276D65C66F9C21B90F387B837D86DCA7B1AF16160659C38C96DAB00928ECA0D5B5A96C34D5470AB2C536DC2771A668C0C05CCBAE8BDEEDC99C07033BF76D78B887CE74665B7B54820520AF95783CA5361C2A1F3ACCACD1ACDAB1D8F5B6EEEAB1875B5EBA83EB025E6B953BB5C723C94C274AE285D18001035CDEE5199FB4ABD49E2E66780B7072D53CEBCE86E7DF69A1DC43505F8704FA4C408465C42D459337DE97C1AC45423DFCB25452341241F84425DB007B65283F65834D86D6371C21C12CC200CAEB33A93442293A5786641D88D003F559BB7AE5CE7099C5B324D8E9C5971E2932F6BB784C694AA286DF0223C37DB80A349D0EFB59B391912BC887FFD0D0DE0804DBC584B00E6E63BE36319AA6982026166A4DAD0F2494683700498B86AA32A98293345CCF11A2191D8C47426E962815CF72E613B1E901AA25708A5D7CF7D8A72EDD6D55D3E7BD3E55EFBA04A81283287F5D611FA91F56431180763ACD7FFFF65252C8D6FAC1B55432EB25AC45FA8800DCD4CDAEE48EE8B1CCD25C8F11E930B5FE6DBBD09970
*/
 
 
-- 4) Remove the Private Key (optional):
ALTER CERTIFICATE [Permission$ViewServerState]
    REMOVE PRIVATE KEY;
/*
Do this to prevent anyone from using the Certificate to sign other
modules so that they can also have this permission.
But, signing also requires knowing the password. If the password is
unknown to all but the DBAs, then it should be safe to keep the Private
Key in the Certificate. If it is removed and you need to sign something
new, or re-sign an object that has been changed and hence lost its
signature, then the Private Key can be restored using the info from
Step 3.
*/
 
 
-- 5) Copy Certificate to [master] (no need to include Private Key):
DECLARE @Cert NVARCHAR(4000) =
         CONVERT(NVARCHAR(4000),
                 CERTENCODED(CERT_ID(N'Permission$ViewServerState')),
                 1);
 
EXEC (N'USE [master];
CREATE CERTIFICATE [Permission$ViewServerState]
FROM BINARY = ' + @Cert);
 
/*
The CERTENCODED built-in function is not available in SQL Server 2005,
2008, or 2008 R2. When using those versions, execute the following:
 
EXEC (N'USE [master];
CREATE CERTIFICATE [Permission$ViewServerState]
  FROM FILE = ''C:\TEMP\cert.cer'';
');
*/
 
 
-- 6) Create Login and Grant Permission:
EXEC (N'USE [master];
CREATE LOGIN [Permission$ViewServerState]
    FROM CERTIFICATE [Permission$ViewServerState];
 
GRANT VIEW SERVER STATE TO [Permission$ViewServerState];
');





--7) Removal (if needed) 
SELECT CONCAT('DROP SIGNATURE FROM OBJECT::',OBJECT_NAME(cp.[major_id]),' BY CERTIFICATE [Permission$ViewServerState]')
--SELECT OBJECT_NAME(cp.[major_id])
FROM   sys.crypt_properties cp;


--DROP CERTIFICATE [Permission$ViewServerState];
--DROP LOGIN [Permission$ViewServerState];