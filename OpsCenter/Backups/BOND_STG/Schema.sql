USE ROLE OWNER_BOND_STAGE;

DECLARE SCHEMA_NAME varchar default (select count(*) from snowflake.account_usage.schemata where CATALOG_NAME = 'BOND_STAGE'AND SCHEMA_NAME = 'BOND' AND DELETED IS NULL) ;
BEGIN 
IF (SCHEMA_NAME = 0)
THEN 
BEGIN
CREATE SCHEMA BOND;
RETURN 'SUCCESS: Schema created';
END ;
ELSEIF (SCHEMA_NAME <> 0)
THEN 
BEGIN 
RETURN 'WARNING: Schema exists';
END;
END IF;
END;

GRANT USAGE ON SCHEMA BOND  TO ROLE OWNER_BOND_STAGE;
GRANT USAGE ON SCHEMA BOND TO ROLE READWRITE_BOND_STAGE;
GRANT USAGE ON SCHEMA BOND TO ROLE READ_BOND_STAGE;
GRANT SELECT ON FUTURE TABLES IN SCHEMA BOND_STAGE.BOND TO ROLE READ_BOND_STAGE;
GRANT SELECT ON FUTURE TABLES IN SCHEMA BOND_STAGE.BOND TO ROLE READWRITE_BOND_STAGE;
GRANT UPDATE ON FUTURE TABLES IN SCHEMA BOND_STAGE.BOND TO ROLE READWRITE_BOND_STAGE;
GRANT INSERT ON FUTURE TABLES IN SCHEMA BOND_STAGE.BOND TO ROLE READWRITE_BOND_STAGE;
GRANT DELETE ON FUTURE TABLES IN SCHEMA BOND_STAGE.BOND TO ROLE READWRITE_BOND_STAGE;




DECLARE SCHEMA_NAME varchar default (select count(*) from snowflake.account_usage.schemata where CATALOG_NAME = 'BOND_STAGE'AND SCHEMA_NAME = 'LND' AND DELETED IS NULL) ;
BEGIN 
IF (SCHEMA_NAME = 0)
THEN 
BEGIN
CREATE SCHEMA LND;
RETURN 'SUCCESS: Schema created';
END ;
ELSEIF (SCHEMA_NAME <> 0)
THEN 
BEGIN 
RETURN 'WARNING: Schema exists';
END;
END IF;
END;

GRANT USAGE ON SCHEMA LND  TO ROLE OWNER_BOND_STAGE;
GRANT USAGE ON SCHEMA LND TO ROLE READWRITE_BOND_STAGE;
GRANT USAGE ON SCHEMA LND TO ROLE READ_BOND_STAGE;
GRANT SELECT ON FUTURE TABLES IN SCHEMA BOND_STAGE.LND TO ROLE READ_BOND_STAGE;
GRANT SELECT ON FUTURE TABLES IN SCHEMA BOND_STAGE.LND TO ROLE READWRITE_BOND_STAGE;
GRANT UPDATE ON FUTURE TABLES IN SCHEMA BOND_STAGE.LND TO ROLE READWRITE_BOND_STAGE;
GRANT INSERT ON FUTURE TABLES IN SCHEMA BOND_STAGE.LND TO ROLE READWRITE_BOND_STAGE;
GRANT DELETE ON FUTURE TABLES IN SCHEMA BOND_STAGE.LND TO ROLE READWRITE_BOND_STAGE;




DECLARE SCHEMA_NAME varchar default (select count(*) from snowflake.account_usage.schemata where CATALOG_NAME = 'BOND_STAGE'AND SCHEMA_NAME = 'STG' AND DELETED IS NULL) ;
BEGIN 
IF (SCHEMA_NAME = 0)
THEN 
BEGIN
CREATE SCHEMA STG;
RETURN 'SUCCESS: Schema created';
END ;
ELSEIF (SCHEMA_NAME <> 0)
THEN 
BEGIN 
RETURN 'WARNING: Schema exists';
END;
END IF;
END;

GRANT USAGE ON SCHEMA STG TO ROLE OWNER_BOND_STAGE;
GRANT USAGE ON SCHEMA STG TO ROLE READWRITE_BOND_STAGE;
GRANT USAGE ON SCHEMA STG TO ROLE READ_BOND_STAGE;
GRANT SELECT ON FUTURE TABLES IN SCHEMA BOND_STAGE.STG TO ROLE READ_BOND_STAGE;
GRANT SELECT ON FUTURE TABLES IN SCHEMA BOND_STAGE.STG TO ROLE READWRITE_BOND_STAGE;
GRANT UPDATE ON FUTURE TABLES IN SCHEMA BOND_STAGE.STG TO ROLE READWRITE_BOND_STAGE;
GRANT INSERT ON FUTURE TABLES IN SCHEMA BOND_STAGE.STG TO ROLE READWRITE_BOND_STAGE;
GRANT DELETE ON FUTURE TABLES IN SCHEMA BOND_STAGE.STG TO ROLE READWRITE_BOND_STAGE;




DECLARE SCHEMA_NAME varchar default (select count(*) from snowflake.account_usage.schemata where CATALOG_NAME = 'BOND_STAGE'AND SCHEMA_NAME = 'TEMP' AND DELETED IS NULL) ;
BEGIN 
IF (SCHEMA_NAME = 0)
THEN 
BEGIN
CREATE SCHEMA TEMP;
RETURN 'SUCCESS: Schema created';
END ;
ELSEIF (SCHEMA_NAME <> 0)
THEN 
BEGIN 
RETURN 'WARNING: Schema exists';
END;
END IF;
END;

GRANT USAGE ON SCHEMA TEMP TO ROLE OWNER_BOND_STAGE;
GRANT USAGE ON SCHEMA TEMP TO ROLE READWRITE_BOND_STAGE;
GRANT USAGE ON SCHEMA TEMP TO ROLE READ_BOND_STAGE;
GRANT SELECT ON FUTURE TABLES IN SCHEMA BOND_STAGE.TEMP TO ROLE READ_BOND_STAGE;
GRANT SELECT ON FUTURE TABLES IN SCHEMA BOND_STAGE.TEMP TO ROLE READWRITE_BOND_STAGE;
GRANT UPDATE ON FUTURE TABLES IN SCHEMA BOND_STAGE.TEMP TO ROLE READWRITE_BOND_STAGE;
GRANT INSERT ON FUTURE TABLES IN SCHEMA BOND_STAGE.TEMP TO ROLE READWRITE_BOND_STAGE;
GRANT DELETE ON FUTURE TABLES IN SCHEMA BOND_STAGE.TEMP TO ROLE READWRITE_BOND_STAGE;




