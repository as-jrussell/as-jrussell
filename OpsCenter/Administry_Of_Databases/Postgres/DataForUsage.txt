--Postgres PSQL
 \! powershell -command "Get-Location"
Quits     \q 
at the command prompt to your desired location 
"C:\Program Files\PostgreSQL\17\pgAdmin 4\runtime\psql.exe" "host=localhost port=5432 dbname=postgres user=postgres sslmode=prefer connect_timeout=10" 2>>&1
 \! powershell -command "Get-Location" ---vaidate
 
 
Just use the PS:
\! powershell -command "Set-Location 'C:\GitHub\as-jrussell\OpsCenter\Administry_Of_Databases\Postgres'; Get-Location"


 >"C:\Program Files\PostgreSQL\17\pgAdmin 4\runtime\psql.exe" "host=localhost port=5432 dbname=MyVeryFirstPosgresSQLDB user=postgres sslmode=prefer connect_timeout=60" 2>>&1
 \!
 Command	What It Does
\dt	List tables
\dn	List schemas
\df	List functions
\du	List users/roles
\l or \list	List databases
\c dbname	Connect to another database
\q	Quit psql
\!	Run shell commands (e.g., \! pwd)
\i filename execute to scripts 




\i schema_change.sql



----Github Bash

\set dbname 'DBA'
\set customerdbname 'dealer-portal'
\set schemaname 'dealer-portal'



\set dbname 'DBA'
\set customerdbname 'dealer-portal'
\set schemaname 'dealer-portal'



 .\run-customer-setup.ps1 -CustomerDbName 'dealer_portal' -SchemaName 'dealer_portal' -DbHost 'refundplus-dealer-portal-dev.c90kw0qemomq.us-east-2.rds.amazonaws.com' -User 'jrussell'





/c/Github/as-jrussell/Opscenter/Administry_Of_Databases/postgres/Postgres_Deploy/



 psql -h refundplus-dealer-portal-prd.cvy4omcy2jwr.us-east-2.rds.amazonaws.com -U dbadmin -d postgres -p 5432

 psql -h arm-api-db-dev.cjw04s24873k.us-east-2.rds.amazonaws.com -U jrussell -d DBA -p 5432
 
 psql -h psqltstawrd01.clm0vrvchewi.us-east-2.rds.amazonaws.com -U jrussell -d DBA -p 5432
 
 psql -h refundplus-dealer-portal-dev.c90kw0qemomq.us-east-2.rds.amazonaws.com -U jrussell -d DBA -p 5432



 psql -h tf-20250528191137248000000002.clm0vrvchewi.us-east-2.rds.amazonaws.com -U jrussell -d postgres -p 5432



schemaname

 Unblock-File -Path "C:\GitHub\as-jrussell\OpsCenter\Administry_Of_Databases\Postgres\Postgres_Deploy\run-customer-setup.ps1"

 psql -h localhost -U jrussell -d postgres -p 5432 -f 


 psql -h localhost -U jrussell -d DBA -p 5432


read -s -p "Enter password: " PGPASSWORD && export PGPASSWORD && echo
 psql -h psqltstawrd01.clm0vrvchewi.us-east-2.rds.amazonaws.com -U jrussell -d dba_jcr -p 5432


\set db_user 'jrussell'
\set db_host 'psqltstawrd01.clm0vrvchewi.us-east-2.rds.amazonaws.com'
\set db_name 'dba_jcr'
\set dbname 'InventoryDWH'









unset passwords 
export PGPASSWORD=""
unset PGPASSWORD





there’s only 1 db instance there, it is arm-api-db-dev
we need to change the database and schema names to ‘arm_api’









pg_dump -s -h your-hostname -p your-port -U your-username -d template1 > template1_schema_remote.sql






pg_dump -s -h localhost -p 5432 -U jrussell -d model > template1_schema_remote.sql




set +H
PGPASSWORD="polarpop" psql -h 127.0.0.1 -U jrussell -d MyVeryFirstPosgresSQLDB -c "SELECT dblink_connect('dba_conn', 'host=127.0.0.1 dbname=DBA user=jrussell password=jrussellPass123!');" 





calling CreateSchemaWithPermissions() from a customer database, and info.object_log_history lives in a different database (DBA), you need a secure, invisible way to do cross-database inserts.
I want it to automatically log an entry into DBA.info.object_log_history — securely, silently, and without exposing passwords or relying on the user to do anything manually."




SELECT dblink_get_connections();



SELECT dblink_connect(
  'dba_conn',
  'host=127.0.0.1 dbname=DBA user=jrussell password=jrussellPass123!'
);
