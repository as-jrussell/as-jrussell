USE [UniTrac]
GO

/****** Object:  StoredProcedure [dbo].[Report_BillingStatements]    Script Date: 8/11/2017 3:21:49 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[Report_BillingStatements] 
(
	@LenderCode as nvarchar(10)=NULL,
	@Branch AS nvarchar(max)=NULL,
	@Division as nvarchar(10)=NULL,
	@Coverage as nvarchar(100)=NULL,
	@ReportType as nvarchar(50)=NULL,
	@ReportConfig as varchar(50)=NULL,
	@GroupByCode as nvarchar(50)=NULL,
	@SortByCode as nvarchar(50)=NULL,
	@FilterByCode as nvarchar(50)=NULL,
	@Report_History_ID as bigint=NULL, 
	@BillingGroupID as bigint=NULL,
	@BillingLimiter as nvarchar(1)='Y'
)	

AS

BEGIN

Declare @LenderID as bigint

SET NoCount ON

Select @BillingLimiter=IsNull(@BillingLimiter,'Y')

Select @LenderID=Coalesce(@LenderID,ID) from LENDER where CODE_TX = @LenderCode and PURGE_DT is null

--Get rid of residual #temp tables
IF OBJECT_ID(N'tempdb..#tmpfilter',N'U') IS NOT NULL
  DROP TABLE #tmpfilter
IF OBJECT_ID(N'tempdb..#tmptable',N'U') IS NOT NULL
  DROP TABLE #tmptable
IF OBJECT_ID(N'tempdb..#t1',N'U') IS NOT NULL
  DROP TABLE #t1
IF OBJECT_ID(N'tempdb..#t2',N'U') IS NOT NULL
  DROP TABLE #t2
IF OBJECT_ID(N'tempdb..#t3',N'U') IS NOT NULL
  DROP TABLE #t3
IF OBJECT_ID(N'tempdb..#t4',N'U') IS NOT NULL
  DROP TABLE #t4
IF OBJECT_ID(N'tempdb..#t5',N'U') IS NOT NULL
  DROP TABLE #t5
IF OBJECT_ID(N'tempdb..#t6',N'U') IS NOT NULL
  DROP TABLE #t6
IF OBJECT_ID(N'tempdb..#t7',N'U') IS NOT NULL
  DROP TABLE #t7
IF OBJECT_ID(N'tempdb..#t5_Unchanged',N'U') IS NOT NULL
  DROP TABLE #t5_Unchanged
IF OBJECT_ID(N'tempdb..#tSMP',N'U') IS NOT NULL
  DROP TABLE #tSMP
IF OBJECT_ID(N'tempdb..#tmpFTXIds',N'U') IS NOT NULL
  DROP TABLE #tmpFTXIds  

IF(@BillingGroupID is not NULL or @BillingGroupID <> 0)
BEGIN

DECLARE @CPI_HOLD_IN nvarchar (1) = NULL
DECLARE @CPI_MONTHLY_BILLING_IN nvarchar (1) = NULL
DECLARE @MAX_BILL_DATE_IN nvarchar(1) = NULL
DECLARE @EXCLUDE_COSIGNER nvarchar(4) = 'Y'
DECLARE @CPI_NEW_TXN_IN nvarchar (1) = NULL
DECLARE @CPI_BILLED_NET_TOTAL_NO decimal(18, 2) = NULL
DECLARE @DELAYED_OPTION nvarchar(1) = NULL
DECLARE @INS_OPT_AUTH_IN nvarchar(1) = NULL
DECLARE @AUTH_REQ_IN nvarchar(1) = NULL
DECLARE @FIL_ISSPOST_ADDL_IN nvarchar(1) = NULL
DECLARE @FIL_POSTREG2_ADDL_IN nvarchar(1) = NULL
DECLARE @FIL_SMP_REPORT_IN nvarchar(1) = 'N'

DECLARE @STATEMENT_DT datetime2 (7) = NULL
if @BillingGroupID is not NULL
Begin
	Select @STATEMENT_DT=STATEMENT_DT from BILLING_GROUP where ID = @BillingGroupID
End

DECLARE @BranchTable AS TABLE(ID int, STRVALUE nvarchar(30))
BEGIN
   INSERT INTO @BranchTable SELECT * FROM SplitFunction(@Branch, ',')
END

CREATE TABLE [dbo].[#tmptable](
	[LOAN_BRANCHCODE_TX] [nvarchar](20) NULL,
	[LOAN_DIVISIONCODE_TX] [nvarchar](20) NULL,
	[LOAN_TYPE_TX] [nvarchar](1000) NULL,
	[REQUIREDCOVERAGE_CODE_TX] [nvarchar](30) NULL,
	[REQUIREDCOVERAGE_TYPE_TX] [nvarchar](1000) NULL,
--LOAN
	[LOAN_NUMBER_TX] [nvarchar](18) NOT NULL,
	[LOAN_NUMBERSORT_TX] [nvarchar](18) NULL,
	[LOAN_EFFECTIVE_DT] [datetime] NULL,
	[LOAN_MATURITY_DT] [datetime] NULL,
	[LOAN_BALANCE_NO] [decimal](19, 2) NULL,
	[LOAN_OFFICERCODE_TX] [nvarchar](20) NULL,
	[LOAN_APR_AMOUNT_NO] [decimal](15, 8) NULL,
	[LOAN_CREDITSCORECODE_TX] [nvarchar](20) NULL,
--LENDER
	[LOAN_LENDERCODE_TX] [nvarchar](10) NULL,	
	[LENDER_NAME_TX] [nvarchar](40) NULL,	
--COLLATERAL
	[COLLATERAL_NUMBER_NO] [int] NULL,
	[COLLATERAL_CODE_TX] [nvarchar](10) NULL,
	[LEGAL_STATUS_CODE_TX] [nvarchar](10) NULL,
--OWNER
	[OWNER_LASTNAME_TX] [nvarchar](30) NULL,
	[OWNER_FIRSTNAME_TX] [nvarchar](30) NULL,
	[OWNER_MIDDLEINITIAL_TX] [nvarchar](1) NULL,
	[OWNER_LINE1_TX] [nvarchar](100) NULL,
	[OWNER_LINE2_TX] [nvarchar](100) NULL,
	[OWNER_STATE_TX] [nvarchar](30) NULL,
	[OWNER_CITY_TX] [nvarchar](40) NULL,
	[OWNER_ZIP_TX] [nvarchar](30) NULL,
--PROPERTY
	[COLLATERAL_YEAR_TX] [nvarchar](4) NULL,
	[COLLATERAL_MAKE_TX] [nvarchar](30) NULL,
	[COLLATERAL_MODEL_TX] [nvarchar](30) NULL,
	[COLLATERAL_VIN_TX] [nvarchar](18) NULL,
	[COLLATERAL_EQUIP_TX] [nvarchar](100) NULL,
	[COLLATERAL_LINE1_TX] [nvarchar](100) NULL,
	[COLLATERAL_LINE2_TX] [nvarchar](100) NULL,
	[COLLATERAL_STATE_TX] [nvarchar](30) NULL,
	[COLLATERAL_CITY_TX] [nvarchar](40) NULL,
	[COLLATERAL_ZIP_TX] [nvarchar](30) NULL,
	[PROPERTY_TYPE_CD] [nvarchar](30) NULL,
--COVERAGE
	[COVERAGE_STATUS_TX] [nvarchar](1000) NULL,
--CPI
	[INSCOMPANY_NAME_TX] [nvarchar](54) NULL,
	[INSCOMPANY_POLICY_NO] [nvarchar](30) NULL,
	[INSCOMPANY_EFF_DT] [datetime2](7) NULL,
	[INSCOMPANY_EFFDTSORT_TX] [nvarchar](8) NULL,
	[INSCOMPANY_EXP_DT] [datetime2](7) NULL,
	[INSCOMPANY_CAN_DT] [datetime2](7) NULL,
	[INSCOMPANY_EXPCXL_DT] [datetime2](7) NULL,
	[INSCOMPANY_ISSUE_DT] [datetime2](7) NULL,
	[CPI_QUOTE_TERM_NO] [int] NULL,
	[CPI_ISSUEDPREMIUM_AMOUNT_NO] [decimal](18, 2) NULL,
	[CPI_CANCELLEDPREMIUM_AMOUNT_NO] [decimal](18, 2) NULL,
	[CPI_PAYMENT_REPORT_CD] [nvarchar] (2) NULL,
	[CPI_GENERATION_SOURCE_CD] [varchar](2) NULL,
--IDs, STATUS
	[LOAN_ID] [bigint] NULL,
	[COLLATERAL_ID] [bigint] NULL,
	[PROPERTY_ID] [bigint] NULL,
	[REQUIREDCOVERAGE_ID] [bigint] NULL,
	[FPC_ID] [bigint] NULL,
	[LOAN_STATUSCODE] [nvarchar] (2) NULL,
	[LOAN_STATUSMEANING_TX] [nvarchar](1000) NULL,
	[COLLATERAL_STATUSCODE] [nvarchar] (2) NULL,
	[COLLATERAL_STATUSMEANING_TX] [nvarchar](1000) NULL,
	[REQUIREDCOVERAGE_STATUSCODE] [nvarchar] (2) NULL,
	[REQUIREDCOVERAGE_STATUSMEANING_TX] [nvarchar](1000) NULL,
	[REQUIREDCOVERAGE_SUBSTATUSCODE] [nvarchar] (2) NULL,
	[REQUIREDCOVERAGE_INSSTATUSCODE] [nvarchar] (2) NULL,
	[REQUIREDCOVERAGE_INSSTATUSMEANING_TX] [nvarchar](1000) NULL,
	[REQUIREDCOVERAGE_INSSUBSTATUSCODE] [nvarchar] (2) NULL,
	[REQUIREDCOVERAGE_INSSUBSTATUSMEANING_TX] [nvarchar](1000) NULL,
	[PROPERTY_DESCRIPTION] [nvarchar](800) NULL,
	[ISS_REASON_TX] [nvarchar](10) NOT NULL,
	[I_TOT_PRM] [decimal](18, 2) NOT NULL,
	[PI_TOT_PRM] [decimal](18, 2) NOT NULL,
	[C_TOT_PRM] [decimal](18, 2) NOT NULL,
	[PC_TOT_PRM] [decimal](18, 2) NOT NULL,
	[OWNER_NAME] [nvarchar](64) NULL,
	[LOAN_LENDERNAME_TX] [nvarchar](40) NOT NULL,
	[INS_EXP_DT_RANGE] [nvarchar](13) NULL,
	[INS_ISS_DT_RANGE] [nvarchar](13) NULL,
	[PRIOR_CPI_CNT_NO] [int] NULL,					
	[FPC_LOAN_ID] [bigint] NULL,					
	[INS_PRINT_DT] [datetime] NULL,
	[LOAN_CONTRACT_TYPE_TX]	[nvarchar](30) NULL,
--BORROWER INSURANCE
	[BORRINSCOMPANY_NAME_TX] [nvarchar](50) NULL,
	[BORRINSCOMPANY_POLICY_NO] [nvarchar](30) NULL,
--Billing
	[LATEST_CPI] [int] NULL,
	[CPI_HOLD_IN] [nvarchar] (1) NULL,
	[CPI_MONTHLY_BILLING_IN] [nvarchar] (1) NULL,
	[OWNER_TYPE_CD] [nvarchar] (4) NULL,
	[CPI_ACTIVITY_COMMENT_TX] [nvarchar] (max) NULL,
	[LOAN_NOTE_TX] [nvarchar] (max) null,
	[LENDER_COLLATERAL_CODE_TX] [nvarchar] (10) NULL,
	[LENDER_PURPOSE_CODE_TX] [nvarchar] (10) NULL,
	[CPI_QUOTE_BASIS_NO] [decimal](18, 2) NOT NULL,
	[IMP_CODE_CD] [nvarchar] (4) NULL,
	[OP_CANCEL_REASON_CD] [nvarchar] (10) NULL,
	[CPI_CANCEL_TYPE_CD] [nvarchar] (2) NULL,
	[FPC_EARNED_PAYMENT_NO] [int] NULL,
	[CPI_DUE_DAYS_NO] [int] NULL,
	[CPI_BILL_CYCLE] [nvarchar] (2) NULL,
	[CPI_NETPREMIUM_AMOUNT_NO] [decimal](18, 2) NULL,
	[CPI_BILLED_NET_TOTAL_NO] [decimal](18, 2) NULL,
	[CPI_BILLED_NET_TOTAL_ANNUAL_NO] [decimal](18, 2) NULL,
	[CPI_BILLED_DT] [datetime2] (7) NULL,
	[CPI_MAX_BILL_DATE_IN] [nvarchar] NULL,
	[CPI_FPC_OPT_BILL_DUE_DAYS_NO] [int] NULL,
	[CPI_NEW_TXN_IN] [nvarchar] (1) NULL,
	[CPI_TXN_TYPE_CD]  [nvarchar] (10) NULL,
	[CPI_NET_CHARGES] [decimal](18,2) NULL,
	[LENDER_OPTION_DELAYED_BILL_NO] [int] NULL,
	[STATEMENT_DT] [datetime2] (7) NULL,
	[QUICK_ISSUE_IN] [char] (1) NULL,
	[BILL_CD] [nvarchar] (4) NULL,
	[NEXT_SCHEDULED_PAYMENT_DT][datetime2] (7) NULL,
	[ORIGINAL_PAYMENT_AMOUNT_NO] [decimal](10,2) NULL,
	[OPT_CERT_AUTH] [int] NULL,
	[AUTH_REQ_DT] [datetime2](7) NULL,
	[MTM] [int] NULL,
	[PREMIUM_MTM] [decimal](10,2) NULL,	
	[NET_PMT_NO] [decimal](10,2) NULL,
	[EP_DAYS_NO] [int] NULL,
	[COSIGN_LASTNAME_TX] [nvarchar](30) NULL,
	[COSIGN_FIRSTNAME_TX] [nvarchar](30) NULL,
	[COSIGN_MIDDLEINITIAL_TX] [char](1) NULL,
	[CPI_FPC_OPT_CERT_AUTH_DAYS_NO] [int] NULL,
	[CALC_INCREASED_BY_AMOUNT_NO] [decimal] (10,2) NULL,
	[ITAX1_AMOUNT_NO] [decimal] (10,2) NULL,
	[ITAX2_AMOUNT_NO] [decimal] (10,2) NULL,
	[PAY_REMAIN_NO] int NULL,
--STD
	[REPORT_GROUPBY_CD] [nvarchar](50) NULL,
	[REPORT_GROUPBY_TX] [nvarchar](1000) NULL,
	[REPORT_SORTBY_TX] [nvarchar](1000) NULL,
	[REPORT_HEADER_TX] [nvarchar](1000) NULL,
	[REPORT_FOOTER_TX] [nvarchar](1000) NULL
--Prior CPI:
	,CPIEXP2_POL_NO nvarchar(18) NULL
	,CPIEXP2_ISSUE_DT datetime2(7) NULL
	,CPIEXP2_EXP_DT datetime2(7) NULL
	,CPIEXP2_RECEIVED_NO decimal(18, 2) NULL
   
   ,[CPI_BILLED_TERM_NO] [int] NULL

) ON [PRIMARY]


CREATE TABLE [dbo].[#tmpfilter](
	[ATTRIBUTE_CD] [nvarchar](50) NULL,
	[VALUE_TX] [nvarchar](50) NULL
) ON [PRIMARY]

Declare @LoanStatus as varchar(5)
Declare @CollateralStatus as varchar(5)
Declare @RequiredCoverageStatus as varchar(5)
Declare @SummaryStatus as varchar(5)
Declare @SummarySubStatus as varchar(5)
Declare @GroupBySQL as varchar(1000)
Declare @SortBySQL as varchar(1000)
Declare @FilterBySQL as varchar(1000)
Declare @HeaderTx as varchar(1000)
Declare @FooterTx as varchar(1000)
Declare @FillerZero as varchar(18)
Declare @RecordCount as bigint
Declare @GroupByCodeDF as varchar(50) 

Set @LoanStatus = NULL
Set @CollateralStatus = NULL
Set @RequiredCoverageStatus = NULL
Set @SummaryStatus = NULL
Set @SummarySubStatus = NULL
Set @FillerZero = '000000000000000000'
Set @RecordCount = 0
Set @GroupByCodeDF = NULL

Insert into #tmpfilter (
	ATTRIBUTE_CD,
	VALUE_TX)

Select 
RAD.ATTRIBUTE_CD,
Case 
  when Custom.VALUE_TX is not NULL then Custom.VALUE_TX
  when RA.VALUE_TX is not NULL then RA.VALUE_TX
  else RAD.VALUE_TX
End as VALUE_TX
from REF_CODE RC With(NoLock)
Join REF_CODE_ATTRIBUTE RAD With(NoLock) on RAD.DOMAIN_CD = RC.DOMAIN_CD and RAD.REF_CD = 'DEFAULT' and RAD.ATTRIBUTE_CD like 'FIL%'
left Join REF_CODE_ATTRIBUTE RA With(NoLock) on RA.DOMAIN_CD = RC.DOMAIN_CD and RA.REF_CD = RC.CODE_CD and RA.ATTRIBUTE_CD = RAD.ATTRIBUTE_CD
left Join 
  (
  Select CODE_TX,REPORT_CD,REPORT_DOMAIN_CD,REPORT_REF_ATTRIBUTE_CD,VALUE_TX from REPORT_CONFIG RC With(NoLock)
  Join REPORT_CONFIG_ATTRIBUTE RCA With(NoLock) on RCA.REPORT_CONFIG_ID = RC.ID
  ) Custom
 on  Custom.CODE_TX = @ReportConfig and Custom.REPORT_DOMAIN_CD = RAD.DOMAIN_CD and Custom.REPORT_REF_ATTRIBUTE_CD = RAD.ATTRIBUTE_CD and Custom.REPORT_CD = @ReportType
where RC.DOMAIN_CD = 'Report_BillingStatements' and RC.CODE_CD = @ReportType

Select @LoanStatus =  Value_TX from #tmpfilter where ATTRIBUTE_CD = 'FIL_LNStatus'
Select @CollateralStatus = Value_TX from #tmpfilter where ATTRIBUTE_CD = 'FIL_CLStatus'
Select @RequiredCoverageStatus =  Value_TX from #tmpfilter where ATTRIBUTE_CD = 'FIL_RCStatus'
Select @SummaryStatus =  Value_TX from #tmpfilter where ATTRIBUTE_CD = 'FIL_INSStatus'
Select @SummarySubStatus =  Value_TX from #tmpfilter where ATTRIBUTE_CD = 'FIL_INSSubStatus'

--Report specific
Select @CPI_HOLD_IN =  Value_TX from #tmpfilter where ATTRIBUTE_CD = 'FIL_CPI_HOLD_IN'
Select @CPI_MONTHLY_BILLING_IN =  Value_TX from #tmpfilter where ATTRIBUTE_CD = 'FIL_CPI_MONTHLY_BILLING_IN'
Select @MAX_BILL_DATE_IN = Value_TX from #tmpfilter where ATTRIBUTE_CD = 'FIL_MAX_BILL_DATE_IN'
Select @EXCLUDE_COSIGNER =  Value_TX from #tmpfilter where ATTRIBUTE_CD = 'FIL_EXCLUDE_COSIGNER'
Select @CPI_NEW_TXN_IN =  Value_TX from #tmpfilter where ATTRIBUTE_CD = 'FIL_CPI_NEW_TXN_IN'
Select @DELAYED_OPTION =  Value_TX from #tmpfilter where ATTRIBUTE_CD = 'FIL_DELAYED_OPTION'
Select @INS_OPT_AUTH_IN = Value_TX from #tmpfilter where ATTRIBUTE_CD = 'FIL_INS_OPT_AUTH_IN'
Select @AUTH_REQ_IN = Value_TX from #tmpfilter where ATTRIBUTE_CD = 'FIL_AUTH_REQ_IN'
SELECT @FIL_ISSPOST_ADDL_IN = Value_TX FROM #tmpfilter WHERE ATTRIBUTE_CD = 'FIL_ISSPOST_ADDL_IN'
SELECT @FIL_POSTREG2_ADDL_IN = Value_TX FROM #tmpfilter WHERE ATTRIBUTE_CD = 'FIL_POSTREG2_ADDL_IN'
SELECT @FIL_SMP_REPORT_IN = Value_TX FROM #tmpfilter WHERE ATTRIBUTE_CD = 'FIL_SMP_REPORT_IN'

IF (@ReportConfig is NULL or @ReportConfig = '' or @ReportConfig = '0000')
	SET @ReportConfig = @ReportType
		 
IF @GroupByCode IS NULL OR @GroupByCode = ''
	BEGIN
		SELECT @GroupBySQL=GROUP_TX FROM REPORT_CONFIG WHERE CODE_TX = @ReportConfig
		Select @GroupByCodeDF = CODE_CD FROM REF_CODE RC With(NoLock) WHERE DOMAIN_CD = 'Report_GroupBy' AND DESCRIPTION_TX = @GroupBySQL
	END
ELSE
	BEGIN
		SELECT @GroupBySQL=DESCRIPTION_TX FROM REF_CODE WHERE DOMAIN_CD = 'Report_GroupBy' AND CODE_CD = @GroupByCode
		SET @GroupByCodeDF = @GroupByCode
	END

IF @SortByCode IS NULL OR @SortByCode = ''
	SELECT @SortBySQL=SORT_TX FROM REPORT_CONFIG WHERE CODE_TX = @ReportConfig
ELSE
	SELECT @SortBySQL=DESCRIPTION_TX FROM REF_CODE WHERE DOMAIN_CD = 'Report_SortBy' AND CODE_CD = @SortByCode

IF @FilterByCode IS NULL OR @FilterByCode = ''
	SELECT @FilterBySQL=FILTER_TX FROM REPORT_CONFIG WHERE CODE_TX = @ReportConfig
Else
	SELECT @FilterBySQL=DESCRIPTION_TX FROM REF_CODE WHERE DOMAIN_CD = 'Report_FilterBy' AND CODE_CD = @FilterByCode

Select @HeaderTx=HEADER_TX from REPORT_CONFIG where CODE_TX = @ReportConfig
Select @FooterTx=FOOTER_TX from REPORT_CONFIG where CODE_TX = @ReportConfig 
    

IF @ReportConfig LIKE 'MULTICPI%'		
BEGIN
	SELECT  @FilterByCode = NULL, @FilterBySQL = NULL
END

Insert into #tmptable (
LOAN_BRANCHCODE_TX, LOAN_DIVISIONCODE_TX, LOAN_TYPE_TX, REQUIREDCOVERAGE_CODE_TX, REQUIREDCOVERAGE_TYPE_TX, LOAN_NUMBER_TX, LOAN_NUMBERSORT_TX,
--LOAN
LOAN_EFFECTIVE_DT, LOAN_MATURITY_DT, LOAN_BALANCE_NO, LOAN_OFFICERCODE_TX,
LOAN_APR_AMOUNT_NO,	LOAN_CREDITSCORECODE_TX,
--LENDER
LOAN_LENDERCODE_TX, LENDER_NAME_TX,
--COLLATERAL
COLLATERAL_NUMBER_NO, 
COLLATERAL_CODE_TX, 
LEGAL_STATUS_CODE_TX,
--OWNER
OWNER_LASTNAME_TX, OWNER_FIRSTNAME_TX, OWNER_MIDDLEINITIAL_TX,
OWNER_LINE1_TX, OWNER_LINE2_TX, OWNER_STATE_TX, OWNER_CITY_TX, OWNER_ZIP_TX,
--PROPERTY
COLLATERAL_YEAR_TX, COLLATERAL_MAKE_TX, COLLATERAL_MODEL_TX, COLLATERAL_VIN_TX, COLLATERAL_EQUIP_TX, 
COLLATERAL_LINE1_TX, COLLATERAL_LINE2_TX, COLLATERAL_STATE_TX, COLLATERAL_CITY_TX, COLLATERAL_ZIP_TX, PROPERTY_TYPE_CD,
--COVERAGE
COVERAGE_STATUS_TX,
--CPI
INSCOMPANY_NAME_TX, INSCOMPANY_POLICY_NO, INSCOMPANY_EFF_DT, INSCOMPANY_EFFDTSORT_TX, INSCOMPANY_EXP_DT, INSCOMPANY_CAN_DT, INSCOMPANY_EXPCXL_DT, 
INSCOMPANY_ISSUE_DT, CPI_QUOTE_TERM_NO, CPI_ISSUEDPREMIUM_AMOUNT_NO, CPI_CANCELLEDPREMIUM_AMOUNT_NO, CPI_PAYMENT_REPORT_CD,CPI_GENERATION_SOURCE_CD,
--IDs, STATUS
LOAN_ID, COLLATERAL_ID, PROPERTY_ID, REQUIREDCOVERAGE_ID, FPC_ID,
LOAN_STATUSCODE, LOAN_STATUSMEANING_TX, COLLATERAL_STATUSCODE, COLLATERAL_STATUSMEANING_TX,
REQUIREDCOVERAGE_STATUSCODE, REQUIREDCOVERAGE_STATUSMEANING_TX, REQUIREDCOVERAGE_SUBSTATUSCODE,
REQUIREDCOVERAGE_INSSTATUSCODE, REQUIREDCOVERAGE_INSSTATUSMEANING_TX,
REQUIREDCOVERAGE_INSSUBSTATUSCODE, REQUIREDCOVERAGE_INSSUBSTATUSMEANING_TX,
[PROPERTY_DESCRIPTION], [ISS_REASON_TX], [I_TOT_PRM], [PI_TOT_PRM], [C_TOT_PRM], [PC_TOT_PRM], [OWNER_NAME], 
[LOAN_LENDERNAME_TX], [INS_EXP_DT_RANGE], [INS_ISS_DT_RANGE], [PRIOR_CPI_CNT_NO], [FPC_LOAN_ID], [INS_PRINT_DT],
[LOAN_CONTRACT_TYPE_TX],[BORRINSCOMPANY_NAME_TX],[BORRINSCOMPANY_POLICY_NO], [LATEST_CPI],[CPI_HOLD_IN], [CPI_MONTHLY_BILLING_IN], [OWNER_TYPE_CD], [CPI_ACTIVITY_COMMENT_TX], [LOAN_NOTE_TX], 
[LENDER_COLLATERAL_CODE_TX], [LENDER_PURPOSE_CODE_TX], [CPI_QUOTE_BASIS_NO], [IMP_CODE_CD], [OP_CANCEL_REASON_CD], [CPI_CANCEL_TYPE_CD],
[FPC_EARNED_PAYMENT_NO], [CPI_DUE_DAYS_NO], [CPI_BILL_CYCLE], [CPI_NETPREMIUM_AMOUNT_NO], [CPI_BILLED_NET_TOTAL_NO], [CPI_BILLED_NET_TOTAL_ANNUAL_NO], [CPI_BILLED_DT],
[CPI_MAX_BILL_DATE_IN], [CPI_FPC_OPT_BILL_DUE_DAYS_NO], [CPI_NEW_TXN_IN], [CPI_TXN_TYPE_CD],
[CPI_NET_CHARGES],[LENDER_OPTION_DELAYED_BILL_NO],[STATEMENT_DT],[QUICK_ISSUE_IN], [BILL_CD], [NEXT_SCHEDULED_PAYMENT_DT], [ORIGINAL_PAYMENT_AMOUNT_NO],[OPT_CERT_AUTH],[AUTH_REQ_DT], [MTM], [PREMIUM_MTM],
[NET_PMT_NO],
[EP_DAYS_NO],
[COSIGN_LASTNAME_TX], [COSIGN_FIRSTNAME_TX], [COSIGN_MIDDLEINITIAL_TX],
[CPI_FPC_OPT_CERT_AUTH_DAYS_NO],
[CALC_INCREASED_BY_AMOUNT_NO],
[ITAX1_AMOUNT_NO],
[ITAX2_AMOUNT_NO],
[PAY_REMAIN_NO],
[REPORT_GROUPBY_CD]
--Prior CPI:
	,CPIEXP2_POL_NO
	,CPIEXP2_ISSUE_DT
	,CPIEXP2_EXP_DT
	,CPIEXP2_RECEIVED_NO

,[CPI_BILLED_TERM_NO]
)

Select (CASE when L.BRANCH_CODE_TX is null or L.BRANCH_CODE_TX = '' then 'No Branch' else L.BRANCH_CODE_TX END) as LOAN_BRANCHCODE_TX,
	   CASE WHEN ISNULL(L.DIVISION_CODE_TX,'') = ''
			THEN '0'
			ELSE L.DIVISION_CODE_TX
	   END AS [LOAN_DIVISIONCODE_TX],
	   ISNULL(RC_DIVISION.DESCRIPTION_TX,RC_SC.DESCRIPTION_TX) AS [LOAN_TYPE_TX],
	   RC.TYPE_CD as REQUIREDCOVERAGE_CODE_TX,
	   RC_COVERAGETYPE.MEANING_TX as REQUIREDCOVERAGE_TYPE_TX,
--LOAN
	   L.NUMBER_TX AS LOAN_NUMBER_TX, 
	   SUBSTRING(@FillerZero, 1, 18 - len(L.NUMBER_TX)) + CAST(L.NUMBER_TX AS nvarchar(18)) AS LOAN_NUMBERSORT_TX,
       L.EFFECTIVE_DT AS LOAN_EFFECTIVE_DT, 
       L.MATURITY_DT AS LOAN_MATURITY_DT, 
       C.LOAN_BALANCE_NO AS LOAN_BALANCE_NO, 
       L.OFFICER_CODE_TX AS LOAN_OFFICERCODE_TX,
	   L.APR_AMOUNT_NO AS LOAN_APR_AMOUNT_NO,
	   L.CREDIT_SCORE_CD as [LOAN_CREDITSCORECODE_TX],
--LENDER
	   LND.CODE_TX AS LOAN_LENDERCODE_TX, 
	   LND.NAME_TX AS LENDER_NAME_TX,
--COLLATERAL
	   C.COLLATERAL_NUMBER_NO AS COLLATERAL_NUMBER_NO,
	   CC.CODE_TX as COLLATERAL_CODE_TX,
	   C.LEGAL_STATUS_CODE_TX,
--OWNER
       O.LAST_NAME_TX AS OWNER_LASTNAME_TX, 
       O.FIRST_NAME_TX AS OWNER_FIRSTNAME_TX, 
       O.MIDDLE_INITIAL_TX AS OWNER_MIDDLEINITIAL_TX,
       AO.LINE_1_TX as OWNER_LINE1_TX,
       AO.LINE_2_TX as OWNER_LINE2_TX,
       AO.STATE_PROV_TX as OWNER_STATE_TX,
       AO.CITY_TX as OWNER_CITY_TX,
       AO.POSTAL_CODE_TX as OWNER_ZIP_TX,
--PROPERTY
       P.YEAR_TX AS COLLATERAL_YEAR_TX, 
       P.MAKE_TX AS COLLATERAL_MAKE_TX, 
       P.MODEL_TX AS COLLATERAL_MODEL_TX, 
       P.VIN_TX AS COLLATERAL_VIN_TX, 
       P.DESCRIPTION_TX AS COLLATERAL_EQUIP_TX, 
       AM.LINE_1_TX as COLLATERAL_LINE1_TX,
       AM.LINE_2_TX as COLLATERAL_LINE2_TX,
       AM.STATE_PROV_TX as COLLATERAL_STATE_TX,
       AM.CITY_TX as COLLATERAL_CITY_TX,
       AM.POSTAL_CODE_TX as COLLATERAL_ZIP_TX,
	   RCA_PROP.VALUE_TX AS [PROPERTY_TYPE_CD],
--COVERAGE
	   CASE 
		 WHEN RC.NOTICE_DT is not null and RC.NOTICE_SEQ_NO > 0 
				THEN cast(RC.NOTICE_SEQ_NO as nvarchar(1)) +  ' ' + NRef.MEANING_TX + ' ' + CONVERT(nvarchar(10), RC.NOTICE_DT, 101) 
	   ELSE CASE 
		WHEN L.STATUS_CD in ('N','O','P') THEN LSRef.MEANING_TX
		WHEN C.STATUS_CD in ('R','S','X') THEN CSRef.MEANING_TX
		WHEN L.STATUS_CD = 'B' and C.STATUS_CD = 'Z' and RC.STATUS_CD in ('A','D') and RC.SUMMARY_STATUS_CD in ('A','N') 
				THEN LSRef.MEANING_TX + ' ' + CSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
		WHEN L.STATUS_CD = 'B' and C.STATUS_CD = 'Z' and RC.STATUS_CD in ('A','D') and RC.SUMMARY_STATUS_CD not in ('A','N') 
				THEN LSRef.MEANING_TX + ' ' + CSRef.MEANING_TX + ' ' + RCISSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
		WHEN L.STATUS_CD = 'B' and C.STATUS_CD = 'Z' and RC.STATUS_CD = 'T' and RC.SUMMARY_STATUS_CD in ('A','N') 
				THEN LSRef.MEANING_TX + ' ' + CSRef.MEANING_TX + ' ' + RCSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
		WHEN L.STATUS_CD = 'B' and C.STATUS_CD = 'Z' and RC.STATUS_CD = 'T' and RC.SUMMARY_STATUS_CD not in ('A','N') 
				THEN LSRef.MEANING_TX + ' ' + CSRef.MEANING_TX + ' ' + RCSRef.MEANING_TX + ' ' + RCISSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
		WHEN L.STATUS_CD = 'B' and C.STATUS_CD = 'Z' and RC.STATUS_CD not in ('A','D','T')
				THEN LSRef.MEANING_TX + ' ' + CSRef.MEANING_TX + ' ' + RCSRef.MEANING_TX
		WHEN C.STATUS_CD = 'Z' and RC.STATUS_CD in ('A','D') and RC.SUMMARY_STATUS_CD in ('A','N') 
				THEN CSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
		WHEN C.STATUS_CD = 'Z' and RC.STATUS_CD in ('A','D') and RC.SUMMARY_STATUS_CD not in ('A','N') 
				THEN CSRef.MEANING_TX + ' ' + RCISSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
		WHEN C.STATUS_CD = 'Z' and RC.STATUS_CD = 'T' and RC.SUMMARY_STATUS_CD in ('A','N') 
				THEN CSRef.MEANING_TX + ' ' + RCSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
		WHEN C.STATUS_CD = 'Z' and RC.STATUS_CD = 'T' and RC.SUMMARY_STATUS_CD not in ('A','N') 
				THEN CSRef.MEANING_TX + ' ' + RCSRef.MEANING_TX + ' ' + RCISSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
		WHEN C.STATUS_CD = 'Z' and RC.STATUS_CD not in ('A','D','T')
				THEN CSRef.MEANING_TX + ' ' + RCSRef.MEANING_TX
		WHEN L.STATUS_CD = 'A' and RC.STATUS_CD in ('A','D') and RC.SUMMARY_STATUS_CD in ('A','N') 
				THEN RCISRef.MEANING_TX
		WHEN L.STATUS_CD = 'A' and RC.STATUS_CD in ('A','D') and RC.SUMMARY_STATUS_CD not in ('A','N') 
				THEN RCISSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
		WHEN L.STATUS_CD = 'A' and RC.STATUS_CD = 'T' and RC.SUMMARY_STATUS_CD in ('A','N') 
				THEN RCSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
		WHEN L.STATUS_CD = 'A' and RC.STATUS_CD = 'T' and RC.SUMMARY_STATUS_CD not in ('A','N') 
				THEN RCSRef.MEANING_TX + ' ' + RCISSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
		WHEN L.STATUS_CD = 'A' and RC.STATUS_CD not in ('A','D','T')
				THEN RCSRef.MEANING_TX
		WHEN L.STATUS_CD = 'B' and RC.STATUS_CD in ('A','D') and RC.SUMMARY_STATUS_CD in ('A','N') 
				THEN LSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
		WHEN L.STATUS_CD = 'B' and RC.STATUS_CD in ('A','D') and RC.SUMMARY_STATUS_CD not in ('A','N') 
				THEN LSRef.MEANING_TX + ' ' + RCISSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
		WHEN L.STATUS_CD = 'B' and RC.STATUS_CD = 'T' and RC.SUMMARY_STATUS_CD in ('A','N') 
				THEN LSRef.MEANING_TX + ' ' + RCSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
		WHEN L.STATUS_CD = 'B' and RC.STATUS_CD = 'T' and RC.SUMMARY_STATUS_CD not in ('A','N') 
				THEN LSRef.MEANING_TX + ' ' + RCSRef.MEANING_TX + ' ' + RCISSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
		WHEN L.STATUS_CD = 'B' and RC.STATUS_CD not in ('A','D','T')
				THEN LSRef.MEANING_TX + ' ' + RCSRef.MEANING_TX
	   END
	   END as COVERAGE_STATUS_TX,
--CPI
       CR.NAME_TX as INSCOMPANY_NAME_TX,
       FPC.NUMBER_TX as INSCOMPANY_POLICY_NO,
       FPC.EFFECTIVE_DT as INSCOMPANY_EFF_DT,
       CONVERT(nvarchar(8), FPC.EFFECTIVE_DT, 112) as INSCOMPANY_EFFDTSORT_TX,
       FPC.EXPIRATION_DT as INSCOMPANY_EXP_DT,
       FPC.CANCELLATION_DT as INSCOMPANY_CAN_DT,
       isnull(FPC.CANCELLATION_DT,FPC.EXPIRATION_DT) as INSCOMPANY_EXPCXL_DT,
       FPC.ISSUE_DT as INSCOMPANY_ISSUE_DT,
       CPQ.TERM_NO as CPI_QUOTE_TERM_NO,
       CPI_ISSUEDPREMIUM_AMOUNT_NO = ISNULL(CPA_I.TOTAL_PREMIUM_NO,0),
       CPI_CANCELLEDPREMIUM_AMOUNT_NO = ISNULL(CPA_C.TOTAL_PREMIUM_NO,0),
       ISNULL(FPC.PAYMENT_REPORT_CD,'') AS CPI_PAYMENT_REPORT_CD,
	   FPC.GENERATION_SOURCE_CD AS CPI_GENERATION_SOURCE_CD,
--IDs, STATUS
       L.ID as LOAN_ID,
       C.ID as COLLATERAL_ID,
       P.ID as PROPERTY_ID,
       RC.ID as REQUIREDCOVERAGE_ID,
	   FPC.ID as FPC_ID,
       L.STATUS_CD as LOAN_STATUSCODE,
       LSRef.MEANING_TX as LOAN_STATUSMEANING_TX,
       C.STATUS_CD as COLLATERAL_STATUSCODE,
       CSRef.MEANING_TX as COLLATERAL_STATUSMEANING_TX,
       RC.STATUS_CD as REQUIREDCOVERAGE_STATUSCODE,
       RCSRef.MEANING_TX as REQUIREDCOVERAGE_STATUSMEANING_TX,
       RC.SUB_STATUS_CD as REQUIREDCOVERAGE_SUBSTATUSCODE,
       RC.SUMMARY_STATUS_CD as REQUIREDCOVERAGE_INSSTATUSCODE,
       RCISRef.MEANING_TX as REQUIREDCOVERAGE_INSSTATUSMEANING_TX,
       RC.SUMMARY_SUB_STATUS_CD as REQUIREDCOVERAGE_INSSUBSTATUSCODE,
       RCISSRef.MEANING_TX as REQUIREDCOVERAGE_INSSUBSTATUSMEANING_TX,

		dbo.fn_GetPropertyDescriptionForReports(C.ID) AS PROPERTY_DESCRIPTION,
		IsNull(CPA_I.REASON_CD, '')	AS [ISS_REASON_TX],		
		ISNULL(CPA_I.TOTAL_PREMIUM_NO, 0) as [I_TOT_PRM],
		ABS(ISNULL((SELECT SUM(ISNULL(FTXD.AMOUNT_NO,0)) FROM FINANCIAL_TXN_DETAIL FTXD JOIN FINANCIAL_TXN FTX ON FTXD.FINANCIAL_TXN_ID = FTX.ID AND FTX.PURGE_DT IS NULL WHERE FTX.FPC_ID = FPC.ID AND FTXD.PURGE_DT IS NULL AND FTX.TXN_TYPE_CD = 'P'),0))  AS [PI_TOT_PRM],		
		ABS(ISNULL((SELECT SUM(ISNULL(FTXD.AMOUNT_NO,0)) FROM FINANCIAL_TXN_DETAIL FTXD JOIN FINANCIAL_TXN FTX ON FTXD.FINANCIAL_TXN_ID = FTX.ID AND FTX.PURGE_DT IS NULL WHERE FTX.FPC_ID = FPC.ID AND FTXD.PURGE_DT IS NULL AND FTX.FPC_ID = FPC.ID AND FTX.TXN_TYPE_CD = 'C'),0))  AS [C_TOT_PRM],		
		ABS(ISNULL((SELECT SUM(ISNULL(FTXD.AMOUNT_NO,0)) FROM FINANCIAL_TXN_DETAIL FTXD JOIN FINANCIAL_TXN FTX ON FTXD.FINANCIAL_TXN_ID = FTX.ID AND FTX.PURGE_DT IS NULL WHERE FTX.FPC_ID = FPC.ID AND FTXD.PURGE_DT IS NULL AND FTX.FPC_ID = FPC.ID AND FTX.TXN_TYPE_CD = 'CP'),0))  AS [PC_TOT_PRM],		
	  
		CASE  WHEN O.FIRST_NAME_TX IS NULL THEN O.LAST_NAME_TX ELSE RTRIM(O.LAST_NAME_TX + ', ' + ISNULL(O.FIRST_NAME_TX,'') + ' ' + ISNULL(O.MIDDLE_INITIAL_TX,'')) END AS [OWNER_NAME],
		LND.NAME_TX AS	[LOAN_LENDERNAME_TX],
		CASE 
			WHEN DATEDIFF(dd,GETDATE(),FPC.EXPIRATION_DT) <= 30 THEN ' 0-30 Days'
			WHEN DATEDIFF(dd,GETDATE(),FPC.EXPIRATION_DT) <= 60 THEN '31-60 Days'
			WHEN DATEDIFF(dd,GETDATE(),FPC.EXPIRATION_DT) <= 90 THEN '61-90 Days'
			WHEN DATEDIFF(dd,GETDATE(),FPC.EXPIRATION_DT) <= 120 THEN '91-120 Days'
			ELSE 'Over 120 Days'
		END AS [INS_EXP_DT_RANGE],
		CASE
			WHEN DATEDIFF(dd,FPC.EFFECTIVE_DT,GETDATE()) <= 30 THEN ' 0-30 Days'
			WHEN DATEDIFF(dd,FPC.EFFECTIVE_DT,GETDATE()) <= 60 THEN '31- 60 Days'
			WHEN DATEDIFF(dd,FPC.EFFECTIVE_DT,GETDATE()) <= 90 THEN '61-90 Days'
			WHEN DATEDIFF(dd,FPC.EFFECTIVE_DT,GETDATE()) <= 120 THEN '91-120 Days'
			ELSE 'Over 120 Days'
		END AS [INS_ISS_DT_RANGE],
		0 AS [PRIOR_CPI_CNT_NO],					
		FPC.LOAN_ID AS [FPC_LOAN_ID],				 
		RC.NOTICE_DT AS [INS_PRINT_DT],
		[LOAN_CONTRACT_TYPE_TX] = L.CONTRACT_TYPE_CD,
--BORROWER INSURANCE
		[BORRINSCOMPANY_NAME_TX] = OP.BIC_NAME_TX, 
		[BORRINSCOMPANY_POLICY_NO] = OP.POLICY_NUMBER_TX, 
		0 AS [LATEST_CPI],
		FPC.HOLD_IN AS [CPI_HOLD_IN],
		FPC.MONTHLY_BILLING_IN AS [CPI_MONTHLY_BILLING_IN],
		OL.OWNER_TYPE_CD AS [OWNER_TYPE_CD],
		CPA_I.COMMENT_TX AS [CPI_ACTIVITY_COMMENT_TX],					
		L.NOTE_TX AS [LOAN_NOTE_TX],
		C.LENDER_COLLATERAL_CODE_TX AS [LENDER_COLLATERAL_CODE_TX],
		C.PURPOSE_CODE_TX AS [LENDER_PURPOSE_CODE_TX],
		ISNULL(CPQ.BASIS_NO,0) AS [CPI_QUOTE_BASIS_NO],
		'' AS [IMP_CODE_CD], 
		[OP_CANCEL_REASON_CD] = CPA_C.REASON_CD,
		[CPI_CANCEL_TYPE_CD] = CASE WHEN FPC.CANCELLATION_DT IS NULL THEN 'I' ELSE 'C' END,		
		FPC.EARNED_PAYMENT_NO AS [FPC_EARNED_PAYMENT_NO],				
		[CPI_DUE_DAYS_NO] = dbo.GetPastDueDays(FPC.ID, RC.DelayedBilling, RC.ForcedPlcyOptReportNonPayDays),
		--A count of the Receivable FTxn types yields the same value as the Max(FTX.Term_No)
		(SELECT COUNT(1) 
			FROM FINANCIAL_TXN FTX 
				JOIN FINANCIAL_TXN_APPLY FTA ON FTA.FINANCIAL_TXN_ID = FTX.ID 
				AND FTA.PURGE_DT IS NULL 
			WHERE FTX.FPC_ID = FPC.ID 
				AND FTX.PURGE_DT IS NULL 
				AND FTX.TXN_TYPE_CD = 'R' /**/
				AND FTA.BILLING_GROUP_ID = @BillingGroupID) 
		AS [CPI_BILL_CYCLE],
		[CPI_NETPREMIUM_AMOUNT_NO] = ISNULL(CPA_I.TOTAL_PREMIUM_NO,0) - abs(ISNULL(CPA_C.TOTAL_PREMIUM_NO,0)),
		[CPI_BILLED_NET_TOTAL_NO] = CUSTOM_FINANCIAL_RC.NET_AMOUNT,
		[CPI_BILLED_NET_TOTAL_ANNUAL_NO] = CUSTOM_FINANCIAL_RC.NET_AMOUNT * 12.0,
		@STATEMENT_DT AS [CPI_BILLED_DT],
		[CPI_MAX_BILL_DATE_IN] = CASE WHEN (SELECT SUM(AMOUNT_NO) FROM FINANCIAL_TXN WHERE FINANCIAL_TXN.FPC_ID = FPC.ID AND PURGE_DT IS NULL) = 0 THEN '0' ELSE '1' END,
		RC.ForcedPlcyOptReportNonPayDays AS [CPI_FPC_OPT_BILL_DUE_DAYS_NO],
		'' AS [CPI_NEW_TXN_IN],
		''  AS [CPI_TXN_TYPE_CD],
		[CPI_NET_CHARGES] = ISNULL(CPA_I.TOTAL_PREMIUM_NO,0) - abs(ISNULL(CPA_C.TOTAL_PREMIUM_NO,0)),
		RC.DelayedBilling as [LENDER_OPTION_DELAYED_BILL_NO],
		@STATEMENT_DT AS [STATEMENT_DT],
		FPC.QUICK_ISSUE_IN AS [QUICK_ISSUE_IN],
		FPC.BILL_CD AS [BILL_CD],
		L.NEXT_SCHEDULED_PAYMENT_DT AS [NEXT_SCHEDULED_PAYMENT_DT],
		L.ORIGINAL_PAYMENT_AMOUNT_NO AS [ORIGINAL_PAYMENT_AMOUNT_NO],
		RC.ForcedPlcyOptUseCertAuth as [OPT_CERT_AUTH],
		FPC.AUTH_REQ_DT AS [AUTH_REQ_DT],
		CASE WHEN L.MATURITY_DT IS NULL THEN 0 ELSE DATEDIFF(MM, @STATEMENT_DT, L.MATURITY_DT) END AS [MTM],
		CASE WHEN L.MATURITY_DT IS NULL THEN 0 
			WHEN DATEDIFF(MM, @STATEMENT_DT, L.MATURITY_DT) = 0 THEN 0 
			ELSE (ISNULL(CPA_I.TOTAL_PREMIUM_NO,0) / DATEDIFF(MM, @STATEMENT_DT, L.MATURITY_DT)) 
		END as [PREMIUM_MTM],
		CASE
			WHEN DATEDIFF(MM, @STATEMENT_DT, L.MATURITY_DT) = 0 THEN CAST((ISNULL(CPA_I.TOTAL_PREMIUM_NO,0)) AS decimal(10,2))
			WHEN CAST((L.ORIGINAL_PAYMENT_AMOUNT_NO * .1) AS decimal(10,2)) > (ISNULL(CPA_I.TOTAL_PREMIUM_NO,0) / DATEDIFF(MM, @STATEMENT_DT, L.MATURITY_DT)) THEN 
			  CASE 
				  WHEN CAST((L.ORIGINAL_PAYMENT_AMOUNT_NO * .1) AS decimal(10,2)) < 25 THEN CAST(25.00 AS decimal(10,2))
				  ELSE CAST((L.ORIGINAL_PAYMENT_AMOUNT_NO * .1) AS decimal(10,2))
			  END
			WHEN (ISNULL(CPA_I.TOTAL_PREMIUM_NO,0) / DATEDIFF(MM, @STATEMENT_DT, L.MATURITY_DT)) < 25 THEN CAST(25.00 AS decimal(10,2))
			ELSE CAST((ISNULL(CPA_I.TOTAL_PREMIUM_NO,0) / DATEDIFF(MM, @STATEMENT_DT, L.MATURITY_DT)) AS decimal(10,2))
		END AS [NET_PMT_NO],
		abs(DATEDIFF(DD,FPC.ISSUE_DT, FPC.EFFECTIVE_DT)) AS [EP_DAYS_NO],
		[COSIGN_LASTNAME_TX] = CSSQ.LAST_NAME_TX,
		[COSIGN_FIRSTNAME_TX] = CSSQ.FIRST_NAME_TX,
		[COSIGN_MIDDLEINITIAL_TX] = CSSQ.MIDDLE_INITIAL_TX,
		RC.ForcedPlcyOptCertAuthDays AS [CPI_FPC_OPT_CERT_AUTH_DAYS_NO],

		[CALC_INCREASED_BY_AMOUNT_NO] = CASE											
		WHEN L.PAYMENT_FREQUENCY_CD IN('B','S') THEN ISNULL(CPISQ.IPRM_AMOUNT_NO,0) / 21.66666						
				WHEN L.PAYMENT_FREQUENCY_CD = 'W' THEN ISNULL(CPISQ.IPRM_AMOUNT_NO,0) / 43.33333							
				ELSE ISNULL(CPISQ.IPRM_AMOUNT_NO,0) / 10									
				END,

		[ITAX1_AMOUNT_NO] = ISNULL(CPISQ.ITAX1_AMOUNT_NO,0),

		[ITAX2_AMOUNT_NO] = ISNULL(CPISQ.ITAX2_AMOUNT_NO,0),

		DATEDIFF(Day, CASE 
			WHEN CPA_I.PAYMENT_EFFECTIVE_DT IS NULL
				THEN DATEADD(Day, 15, GETDATE())
			ELSE (
					CASE 
						WHEN CPA_I.PAYMENT_EFFECTIVE_DT >= DATEADD(Day, 15, GETDATE())
							THEN CPA_I.PAYMENT_EFFECTIVE_DT
						ELSE DATEADD(month, 1, CPA_I.PAYMENT_EFFECTIVE_DT)
						END
					)
			END, L.MATURITY_DT) / (365 / 12) AS [PAY_REMAIN_NO],

		@GroupByCodeDF AS [REPORT_GROUPBY_CD]

--Prior CPI:
	,CPIEXP2_POL_NO = null
	,CPIEXP2_ISSUE_DT = null
	,CPIEXP2_EXP_DT = null
	,CPIEXP2_RECEIVED_NO = null

   ,0 as CPI_BILLED_TERM_NO
FROM FORCE_PLACED_CERTIFICATE FPC With(NoLock)
join FORCE_PLACED_CERT_REQUIRED_COVERAGE_RELATE FPCR With(NoLock) on FPCR.FPC_ID = FPC.ID AND FPCR.PURGE_DT IS NULL
Join REQUIRED_COVERAGE RC With(NoLock) on RC.ID = FPCR.REQUIRED_COVERAGE_ID AND RC.PURGE_DT IS NULL 
JOIN PROPERTY P With(NoLock) on P.ID = RC.PROPERTY_ID AND P.PURGE_DT IS NULL

JOIN COLLATERAL C on P.ID = C.PROPERTY_ID 
			AND C.PURGE_DT IS NULL 
			and FPC.LOAN_ID = C.LOAN_ID


join LOAN L With(NoLock) on L.ID = C.LOAN_ID and L.PURGE_DT IS NULL
Join LENDER LND With(NoLock) on  LND.ID = L.LENDER_ID AND LND.PURGE_DT IS NULL
Join OWNER_LOAN_RELATE OL With(NoLock) on  OL.LOAN_ID = L.ID AND OL.PRIMARY_IN = 'Y' AND OL.PURGE_DT IS NULL 
Join [OWNER] O With(NoLock) on  O.ID = OL.OWNER_ID AND O.PURGE_DT IS NULL 

left Join [OWNER_ADDRESS] AO With(NoLock) on  AO.ID = O.ADDRESS_ID AND AO.PURGE_DT IS NULL 
left Join [OWNER_ADDRESS] AM With(NoLock) on  AM.ID = P.ADDRESS_ID AND AM.PURGE_DT IS NULL

LEFT JOIN COLLATERAL_CODE CC With(NoLock) ON CC.ID = C.COLLATERAL_CODE_ID AND CC.PURGE_DT IS NULL
left Join CARRIER CR With(NoLock) on  CR.ID = FPC.CARRIER_ID AND CR.PURGE_DT IS NULL
left Join CPI_QUOTE CPQ With(NoLock) on  CPQ.ID = FPC.CPI_QUOTE_ID AND CPQ.PURGE_DT IS NULL
LEFT JOIN CPI_ACTIVITY CPA_I With(NoLock) on CPA_I.CPI_QUOTE_ID = CPQ.ID AND CPA_I.TYPE_CD = 'I'	AND CPA_I.PURGE_DT IS NULL
 
left Join REF_CODE NRef With(NoLock) on NRef.DOMAIN_CD = 'NoticeType' and NRef.CODE_CD = RC.NOTICE_TYPE_CD 
left Join REF_CODE LSRef With(NoLock) on LSRef.DOMAIN_CD = 'LoanStatus' and LSRef.CODE_CD = L.STATUS_CD 
left Join REF_CODE CSRef With(NoLock) on CSRef.DOMAIN_CD = 'CollateralStatus' and CSRef.CODE_CD = C.STATUS_CD 
left Join REF_CODE RCSRef With(NoLock) on RCSRef.DOMAIN_CD = 'RequiredCoverageStatus' and RCSRef.CODE_CD = RC.STATUS_CD 
left Join REF_CODE RCISRef With(NoLock) on RCISRef.DOMAIN_CD = 'RequiredCoverageInsStatus' and RCISRef.CODE_CD = RC.SUMMARY_STATUS_CD 
left Join REF_CODE RCISSRef With(NoLock) on RCISSRef.DOMAIN_CD = 'RequiredCoverageInsSubStatus' and RCISSRef.CODE_CD = RC.SUMMARY_SUB_STATUS_CD 
left Join REF_CODE RC_DIVISION With(NoLock) on RC_DIVISION.DOMAIN_CD = 'ContractType' and RC_DIVISION.CODE_CD = L.DIVISION_CODE_TX
left Join REF_CODE RC_COVERAGETYPE With(NoLock) on RC_COVERAGETYPE.DOMAIN_CD = 'Coverage' and RC_COVERAGETYPE.CODE_CD = RC.TYPE_CD 
left Join REF_CODE RC_SC With(NoLock) on RC_SC.DOMAIN_CD = 'SecondaryClassification' AND CC.SECONDARY_CLASS_CD = RC_SC.CODE_CD
left Join REF_CODE_ATTRIBUTE RCA_PROP With(NoLock) on RC_SC.DOMAIN_CD = RCA_PROP.DOMAIN_CD and RC_SC.CODE_CD = RCA_PROP.REF_CD and RCA_PROP.ATTRIBUTE_CD = 'PropertyType'

/*
** CROSS/OUTER Applies:
*/
--ReportConfig:
CROSS Apply(
	Select
	 DelayDay28_NoBR = Cast( Case When @ReportConfig = '28DAYDELAY_NOBR' Then 1 Else 0 End As Bit )
	,ChgMnth = Cast( Case When @ReportConfig = 'CHGMNTH' Then 1 Else 0 End As Bit )
	,WithPriorCPI = Cast( Case When @ReportConfig = 'ECHGBILLPRIOR' Or @ReportConfig = 'CHGNON2' Then 1 Else 0 End As Bit )
	,RefBill_XP = Cast( Case When @ReportConfig LIKE 'REFBILL_XP%' Then 1 Else 0 End As Bit )
) As ReportConfig

--OP:
OUTER APPLY
(
	SELECT TOP 1 * FROM dbo.GetCurrentCoverage(P.ID, RC.ID, RC.TYPE_CD)
	where @ReportConfig = '28DAYDELAY_NOBR'
	ORDER BY ISNULL(UNIT_OWNERS_IN, 'N') DESC
) OP

--CPA_C:
OUTER APPLY 
(
	SELECT SUM(TOTAL_PREMIUM_NO) AS TOTAL_PREMIUM_NO, MAX(REASON_CD) AS REASON_CD FROM CPI_ACTIVITY C With(NoLock)
	WHERE C.CPI_QUOTE_ID = CPQ.ID AND C.TYPE_CD IN ('C', 'R', 'MT') AND C.PURGE_DT IS NULL
) CPA_C

--CPISQ:
OUTER APPLY (
SELECT  
	SUM(CASE WHEN CD_SQ.TYPE_CD = 'PRM' AND CPA_SQ.TYPE_CD = 'I' THEN CD_SQ.AMOUNT_NO ELSE 0 END) AS IPRM_AMOUNT_NO,
	SUM(CASE WHEN CD_SQ.TYPE_CD = 'FEE' AND CPA_SQ.TYPE_CD = 'I' THEN CD_SQ.AMOUNT_NO ELSE 0 END) AS IFEE_AMOUNT_NO,
	SUM(CASE WHEN CD_SQ.TYPE_CD = 'OTH' AND CPA_SQ.TYPE_CD = 'I' THEN CD_SQ.AMOUNT_NO ELSE 0 END) AS IOTH_AMOUNT_NO,
	SUM(CASE WHEN CD_SQ.TYPE_CD = 'TAX1' AND CPA_SQ.TYPE_CD = 'I' THEN CD_SQ.AMOUNT_NO ELSE 0 END) AS ITAX1_AMOUNT_NO,
	SUM(CASE WHEN CD_SQ.TYPE_CD = 'TAX2' AND CPA_SQ.TYPE_CD = 'I' THEN CD_SQ.AMOUNT_NO ELSE 0 END) AS ITAX2_AMOUNT_NO,
	SUM(CASE WHEN CD_SQ.TYPE_CD = 'PRM' AND CPA_SQ.TYPE_CD = 'C' THEN CD_SQ.AMOUNT_NO ELSE 0 END) AS CPRM_AMOUNT_NO,
	SUM(CASE WHEN CD_SQ.TYPE_CD = 'FEE' AND CPA_SQ.TYPE_CD = 'C' THEN CD_SQ.AMOUNT_NO ELSE 0 END) AS CFEE_AMOUNT_NO,
	SUM(CASE WHEN CD_SQ.TYPE_CD = 'OTH' AND CPA_SQ.TYPE_CD = 'C' THEN CD_SQ.AMOUNT_NO ELSE 0 END) AS COTH_AMOUNT_NO, 
	SUM(CASE WHEN CD_SQ.TYPE_CD = 'TAX1' AND CPA_SQ.TYPE_CD = 'C' THEN CD_SQ.AMOUNT_NO ELSE 0 END) AS CTAX1_AMOUNT_NO, 
	SUM(CASE WHEN CD_SQ.TYPE_CD = 'TAX2' AND CPA_SQ.TYPE_CD = 'C' THEN CD_SQ.AMOUNT_NO ELSE 0 END) AS CTAX2_AMOUNT_NO
	FROM CPI_ACTIVITY CPA_SQ With(NoLock)
	JOIN CERTIFICATE_DETAIL CD_SQ With(NoLock) ON CD_SQ.CPI_ACTIVITY_ID = CPA_SQ.ID AND CPA_SQ.CPI_QUOTE_ID = CPQ.ID AND CD_SQ.PURGE_DT IS NULL
	WHERE CPA_SQ.CPI_QUOTE_ID = CPQ.ID AND CPA_SQ.PURGE_DT IS NULL
) CPISQ

--CSSQ:
OUTER APPLY (
	SELECT TOP 1 OSQ.FIRST_NAME_TX, OSQ.LAST_NAME_TX, OSQ.MIDDLE_INITIAL_TX, '' AS COSIGN_TX
	FROM OWNER_LOAN_RELATE OLSQ With(NoLock)
	Join [OWNER] OSQ With(NoLock) on  OSQ.ID = OLSQ.OWNER_ID AND OSQ.PURGE_DT IS NULL
	left Join [OWNER_ADDRESS] AOSQ With(NoLock) on  AOSQ.ID = OSQ.ADDRESS_ID AND AOSQ.PURGE_DT IS NULL

	WHERE OLSQ.LOAN_ID = L.ID AND OLSQ.OWNER_TYPE_CD ='CS'
	ORDER BY OSQ.ID DESC) CSSQ

--BillingLimiter:
CROSS Apply(
	Select
		Case When IsNull(@BillingLimiter, '') <> '' Then 'N' Else Null End As CPI_HOLD_IN
	,Case When IsNull(@BillingLimiter, '') <> '' Then 'Y' Else Null End As CPI_NET_CHARGES
) As BillingLimiter

--CUSTOM_FINANCIAL_RC:
CROSS APPLY (
	select sum(Amount_no) as NET_AMOUNT, BILLING_GROUP_ID, FPC.ID AS FPC_ID, min(FTX.TXN_DT) as MIN_DT, MAX(REASON_TX) AS REASON_TX, MAX(FTA.HOLD_IN) as HOLD_IN 
	from FINANCIAL_TXN FTX With(NoLock) left join  
	FINANCIAL_TXN_APPLY FTA With(NoLock) on FTA.FINANCIAL_TXN_ID = FTX.ID AND FTA.PURGE_DT IS NULL and ((@CPI_NEW_TXN_IN = 'Y' and FTA.NEW_TXN_IN = 'Y') or (@CPI_NEW_TXN_IN <> 'Y' and FTA.NEW_TXN_IN in ('Y', 'N', null)))
	where FTX.FPC_ID = FPC.ID AND FTX.PURGE_DT IS NULL AND ((@CPI_NEW_TXN_IN = 'Y' and FTX.TXN_TYPE_CD in ('R','C')) or @CPI_NEW_TXN_IN <> 'Y')
	  AND BILLING_GROUP_ID = @BillingGroupID
     AND FTA.HOLD_IN = CASE WHEN @CPI_MONTHLY_BILLING_IN = 'Y' THEN @CPI_HOLD_IN ELSE FTA.HOLD_IN END
	group by FTX.FPC_ID,BILLING_GROUP_ID) CUSTOM_FINANCIAL_RC

   CROSS APPLY dbo.fn_FilterCollateralByDivisionCd(C.ID, @Division) fn_FCBD

WHERE 
L.LENDER_ID = @LenderID 
and FPC.PURGE_DT IS NULL
and
(L.BRANCH_CODE_TX IN (SELECT STRVALUE FROM @BranchTable) or @Branch = '1' or @Branch = '' or @Branch is NULL OR @Branch = 'ALL')
AND fn_FCBD.loanType IS NOT NULL
and
(RC.TYPE_CD = @Coverage or @Coverage = '1' or @Coverage = '' or @Coverage is NULL)
AND (ISNULL(FPC.MONTHLY_BILLING_IN,'N') = @CPI_MONTHLY_BILLING_IN OR @CPI_MONTHLY_BILLING_IN IS NULL)
AND (ISNULL(FPC.HOLD_IN,'N') = @CPI_HOLD_IN OR @CPI_HOLD_IN IS NULL)

AND (CUSTOM_FINANCIAL_RC.BILLING_GROUP_ID = @BillingGroupID)
Option(optimize for (@LenderID = 0))
--Option(RECOMPILE)
;

IF @ReportConfig = '28DAYDELAY_1250'
BEGIN
	UPDATE #tmptable SET INSCOMPANY_POLICY_NO = 
	CASE WHEN (SELECT COUNT(*) 
		FROM FORCE_PLACED_CERTIFICATE FPC_C 
		WHERE FPC_C.LOAN_ID = #tmptable.LOAN_ID 
		AND FPC_C.PURGE_DT IS NULL) > 1 
		THEN '*' + #tmptable.INSCOMPANY_POLICY_NO 
		ELSE ' ' + #tmptable.INSCOMPANY_POLICY_NO 
	END
END

IF @ReportConfig = '28DAYDELAY_1473'
BEGIN
	UPDATE #tmptable SET LOAN_NUMBER_TX = 
	CASE 
		WHEN (I_TOT_PRM - ABS(C_TOT_PRM)) <= 1000 THEN #tmptable.LOAN_NUMBER_TX + ' +'
		ELSE #tmptable.LOAN_NUMBER_TX 
	END
END

IF @ReportConfig = 'REFBILL_XP_1473'
BEGIN
	UPDATE #tmptable SET LOAN_NUMBER_TX = 
	CASE 
		WHEN I_TOT_PRM <= 1000 AND CPI_PAYMENT_REPORT_CD = 'C' THEN #tmptable.LOAN_NUMBER_TX + ' +'
		WHEN (I_TOT_PRM - ABS(C_TOT_PRM)) <= 1000 AND CPI_PAYMENT_REPORT_CD IN('B','X') THEN #tmptable.LOAN_NUMBER_TX + ' +'
		ELSE #tmptable.LOAN_NUMBER_TX 
	END
END

IF @ReportConfig = 'REFBILL_XP' or @ReportConfig = 'REFBILL_XP_1739'
BEGIN
	UPDATE #tmptable SET LOAN_NUMBER_TX = 
	CASE WHEN (SELECT COUNT(*) 
		FROM FINANCIAL_TXN 
		WHERE FPC_ID = #tmptable.FPC_ID 
		AND PURGE_DT IS NULL AND TXN_TYPE_CD = 'C') > 1 
		THEN '*' + #tmptable.LOAN_NUMBER_TX 
		ELSE ' ' + #tmptable.LOAN_NUMBER_TX 
	END
END


-- Monthly Breakout Reports for Statement of Charges Earned (Cumulative) or Statement of Refunds (Cumulative)
if @ReportConfig = 'CHGMNTHBO' OR @ReportConfig = 'REFMNTHBO'
BEGIN

   -- Create a temporary table
   -- Added a "Uses Custom Monthly Billing Flag" to determine 
   -- which FPCs are used for custom monthly billing
   select   t.*,
            CASE 
               WHEN FPC.MONTHLY_BILLING_IN = 'Y' AND RD.VALUE_TX = 'true' AND FPC.EFFECTIVE_DT >= RD.START_DT THEN
                  ISNULL(MP.MONTHLY_BILLING_PRORATION_CD, 'DollarsToFirstMonth')
               ELSE 
                  'DollarsToFirstMonth'
            END AS 'USES_CUSTOM_MONTHLY_BILLING_CD'
            INTO #t5
   from     #tmptable t
            INNER JOIN FORCE_PLACED_CERTIFICATE FPC ON t.FPC_ID = FPC.ID
            INNER JOIN MASTER_POLICY MP on FPC.MASTER_POLICY_ID = MP.ID
            INNER JOIN LOAN L on FPC.LOAN_ID = L.ID
            INNER JOIN RELATED_DATA RD on RD.RELATE_ID = L.LENDER_ID
            INNER JOIN RELATED_DATA_DEF RDD ON RD.DEF_ID = RDD.ID AND RDD.NAME_TX = 'UsesCustomMonthlyBillingProration'

   -- Truncate the Temp Table
   TRUNCATE TABLE #tmptable
      
   -- Create a field holding the listing of FPC IDs to pass to the get the monthly period information 
   DECLARE @fpcIds AS VARCHAR(MAX) = (
      SELECT   FPC_ID 
      FROM     #t5 t 
      WHERE    USES_CUSTOM_MONTHLY_BILLING_CD != 'DollarsToFirstMonth' 
      GROUP BY FPC_ID FOR XML PATH(''))

   -- Create a temporary table to hold monthly period information
   DECLARE @monthlyPeriods AS TABLE  (FPC_ID BIGINT, MTHN_R_TOT_PRM DECIMAL(8,2), MTHN_C_TOT_PRM DECIMAL(8,2), 
         MTHN_PC_TOT_PRM DECIMAL(8,2), PRD_START_DT DATETIME, PRD_END_DT DATETIME, TERM_NO INT, 
         MTHN_P_TOT_PRM DECIMAL(8,2) DEFAULT 0.00, USE_OVERAGES int, MTHN_CP_TOT_PRM DECIMAL(8,2))
            
   -- Statement of Charges Earned (Cumulative) - Monthly Breakout Report
   IF @ReportConfig = 'CHGMNTHBO'
   BEGIN
      
      -- Load the monthly period table (using the first of the month as period start
      -- to a cancel date if there is one or end of month as period end)
      INSERT INTO @monthlyPeriods EXEC RetrieveMonthlyBillingPeriods @fpcIds, 0

      -- Build a second temporary table to hold the full original table, but also the 
      -- calculation of what the month amounts will be (the split amounts) ... this 
      -- handles the possibility that there may be more than one transaction PER month
      -- Calculate the Period Total (Receivables, Cancels and Cancel Payments)
      SELECT   t.*, 
               MTHN_R_TOT_PRM - MTHN_C_TOT_PRM + MTHN_CP_TOT_PRM as PRD_TOTAL_AMT_NO, 
               MONTH_FINANCIAL.PRD_START_DT, 
               MONTH_FINANCIAL.PRD_END_DT,
               MONTH_FINANCIAL.TERM_NO as TERM_NO,
               MONTH_FINANCIAL.MTHN_P_TOT_PRM as PRD_PAYMENT_TOT
               INTO #t6
      FROM     #t5 t
               INNER JOIN @monthlyPeriods MONTH_FINANCIAL ON t.FPC_ID = MONTH_FINANCIAL.FPC_ID    
      WHERE    USES_CUSTOM_MONTHLY_BILLING_CD != 'DollarsToFirstMonth'       

      -- Update the CPI_BILLED_NET_TOTAL_NO with that Monthly Net Amount
      -- If the sum of charges - the sum of payments is greater than or equal to zero, then the charge in 
      -- question it for the month period in question is that
      -- IF you had a R-C of $40 and a payment of $30 ... you would have a charge on the report of $10
      -- IF you had a R-C of $40 and a payment of > $40 ... you would have no charge on the report
      UPDATE   #t6
      SET      CPI_BILLED_NET_TOTAL_NO = 
                  CASE WHEN PRD_TOTAL_AMT_NO - PRD_PAYMENT_TOT >= 0 
                     THEN PRD_TOTAL_AMT_NO - PRD_PAYMENT_TOT 
                     ELSE 0
                  END,
               INSCOMPANY_EFF_DT = PRD_START_DT,
               INSCOMPANY_CAN_DT = PRD_END_DT,
               INSCOMPANY_EXP_DT = PRD_END_DT,
               INSCOMPANY_EXPCXL_DT = PRD_END_DT,
               CPI_BILLED_TERM_NO = TERM_NO

      -- Remove the Month Net Amount, Date Columns, and Uses Custom Monthly Billing Flag
      ALTER TABLE #t6 DROP COLUMN PRD_TOTAL_AMT_NO, PRD_START_DT, PRD_END_DT, USES_CUSTOM_MONTHLY_BILLING_CD, TERM_NO, PRD_PAYMENT_TOT

      -- Insert the new values back to the original table
      INSERT INTO #tmptable SELECT * FROM #t6

      -- Clean Up
      DROP TABLE #t6

   END
   
   -- Statement of Refunds (Cumulative) - Monthly Breakout Report
   IF @ReportConfig = 'REFMNTHBO'
   BEGIN
      
      -- Load the monthly period table (using the first of the month or cancel date 
      -- if there is one as period start to the end of month as period end)
      INSERT INTO @monthlyPeriods EXEC RetrieveMonthlyBillingPeriods @fpcIds, 1, 1

      -- Build a second temporary table to hold the full original table, but also the 
      -- calculation of what the month amounts will be (the split amounts) ... this 
      -- handles the possibility that there may be more than one transaction PER month
      SELECT   t.*, mf.MTHN_R_TOT_PRM, mf.MTHN_C_TOT_PRM, mf.MTHN_PC_TOT_PRM, mf.PRD_START_DT, mf.PRD_END_DT, mf.TERM_NO, mf.USE_OVERAGES, mf.MTHN_CP_TOT_PRM
               INTO #t7
      FROM     #t5 t
               INNER JOIN @monthlyPeriods mf ON t.FPC_ID = mf.FPC_ID  
      WHERE    USES_CUSTOM_MONTHLY_BILLING_CD != 'DollarsToFirstMonth'
      ORDER BY mf.TERM_NO

      -- Get a List of FPCs in the temp table #t7
      DECLARE @fpcsToLookup AS TABLE (FPC_ID BIGINT)
      INSERT INTO @fpcsToLookup SELECT DISTINCT FPC_ID from #t7
      
      -- Go thru each FPC and analyze the terms in which they were cancelled
      -- checking for multiple cancel situations. Based on requirements in TFS#40089
      -- if there are multiple cancels dates and amounts may need to be adjusted, and 
      -- cancels that occur during earlier billings should not occur on the current billing
      DECLARE @cancelDateUpdates AS TABLe (FPC_ID BIGINT, TERM_NO INT, AMOUNT_NO DECIMAL(18,2), PERIOD_START_DT DATETIME, PERIOD_END_DT DATETIME)
      INSERT INTO @cancelDateUpdates
      SELECT   cats.*
      FROM     @fpcsToLookup t
               OUTER APPLY
               (  
                  SELECT   FPC_ID,
                           TERM_NO,
                           AMOUNT_NO,
                           PERIOD_START_DT,
                           PERIOD_END_DT
                  FROM     dbo.fn_GetCPICancelActivityTerms(t.FPC_ID, @BillingGroupId)
               ) cats
      WHERE    cats.FPC_ID IS NOT NULL
                  
      -- If the Amounts or Dates have updated for a period, then update that period information for an FPC
      UPDATE   T
      SET      PRD_START_DT = ISNULL(C.PERIOD_START_DT, PRD_START_DT),
               PRD_END_DT = ISNULL(C.PERIOD_END_DT, PRD_END_DT),
               MTHN_C_TOT_PRM = -C.AMOUNT_NO,
               MTHN_PC_TOT_PRM = -C.AMOUNT_NO
      from     #t7 T 
               INNER JOIN @cancelDateUpdates C 
                  ON T.FPC_ID = C.FPC_ID AND T.TERM_NO = C.TERM_NO

      -- Update the monthly amounts in the main field locations
     
      --       * For a standard scenario:
      --         - The CPI_ISSUED_PREMIUM_AMOUNT_NO will be equal to the REFUND for the month (MTHN_PC_TOT_PRM)
      --         - The CPI_CANCELLEDPREMIUM_AMOUNT_NO will not be changed
      --         - The CPI_CANCEL_TYPE_CD will not be changed
      
      --       * For an overage scenario:
      --         - The CPI_ISSUED_PREMIUM_AMOUNT_NO should be the CHARGE for the month (MTHN_R_TOT_PRM)
      --         - The CPI_CANCELLEDPREMIUM_AMOUNT_NO should be the OVERAGE which is in the MTHN_PC_TOT_PRM column (made negative)
      --         - The CPI_CANCEL_TYPE_CD should be set to "O" for overage
      
      UPDATE   #t7
      SET      I_TOT_PRM = MTHN_R_TOT_PRM,
               C_TOT_PRM = MTHN_C_TOT_PRM,
               PC_TOT_PRM = MTHN_CP_TOT_PRM,
               CPI_CANCEL_TYPE_CD             = case when USE_OVERAGES = 1 THEN 'O' ELSE CPI_CANCEL_TYPE_CD END,	
               CPI_ISSUEDPREMIUM_AMOUNT_NO    = case when USE_OVERAGES = 1 THEN MTHN_R_TOT_PRM ELSE MTHN_PC_TOT_PRM END,
               CPI_CANCELLEDPREMIUM_AMOUNT_NO = case when USE_OVERAGES = 1 THEN -MTHN_PC_TOT_PRM ELSE -MTHN_C_TOT_PRM END,
               CPI_BILLED_NET_TOTAL_NO = -MTHN_PC_TOT_PRM,
               INSCOMPANY_EFF_DT = PRD_START_DT,
               INSCOMPANY_CAN_DT = PRD_END_DT,
               INSCOMPANY_EXP_DT = PRD_END_DT,
               INSCOMPANY_EXPCXL_DT = PRD_END_DT,
               CPI_BILLED_TERM_NO = TERM_NO

      -- Remove the monthly amounts and Uses Custom Monthly Billing Flag
      ALTER TABLE #t7 DROP COLUMN MTHN_R_TOT_PRM, MTHN_C_TOT_PRM, MTHN_PC_TOT_PRM, PRD_START_DT, PRD_END_DT, USES_CUSTOM_MONTHLY_BILLING_CD, TERM_NO, USE_OVERAGES, MTHN_CP_TOT_PRM

      -- Insert the new values back to the original table
      INSERT INTO #tmptable SELECT * FROM #t7

      -- Clean Up
      DROP TABLE #t7

   END
         
   -- Insert the original non-updated values back to the original table
   SELECT * INTO #t5_Unchanged FROM #t5 WHERE USES_CUSTOM_MONTHLY_BILLING_CD = 'DollarsToFirstMonth'
   ALTER TABLE #t5_Unchanged DROP COLUMN USES_CUSTOM_MONTHLY_BILLING_CD
   INSERT INTO #tmptable SELECT * FROM #t5_Unchanged

   -- Clean Up
   DROP TABLE #t5_Unchanged
   DROP TABLE #t5

END

IF (@INS_OPT_AUTH_IN = 'Y' OR @AUTH_REQ_IN = 'Y' OR @DELAYED_OPTION = 'Y')
BEGIN
	BEGIN
		SELECT * INTO #T2 FROM #tmptable 
		TRUNCATE TABLE #tmptable
			  
		INSERT INTO #tmptable SELECT * FROM dbo.#T2 WHERE 1=1
			AND (@INS_OPT_AUTH_IN = 'N' or (@INS_OPT_AUTH_IN = 'Y' and ISNULL([OPT_CERT_AUTH], 0) > 0))
			AND (@AUTH_REQ_IN = 'N' or ((@AUTH_REQ_IN = 'Y' and ISNULL([OPT_CERT_AUTH], 0) > 0) and [REQUIREDCOVERAGE_INSSTATUSCODE] = 'B' and [AUTH_REQ_DT] IS NULL))
			AND (
				(@DELAYED_OPTION = 'N' OR ISNULL([LENDER_OPTION_DELAYED_BILL_NO], 0) = 0 OR [CPI_GENERATION_SOURCE_CD] = 'S') 
				OR 
				(@DELAYED_OPTION = 'Y' AND [CPI_GENERATION_SOURCE_CD] = 'C' AND ISNULL([LENDER_OPTION_DELAYED_BILL_NO], 0) > 0 AND ([INSCOMPANY_ISSUE_DT] <= DATEADD(DAY,(-1 * (ISNULL([LENDER_OPTION_DELAYED_BILL_NO],0)-1)), @STATEMENT_DT) OR  [QUICK_ISSUE_IN] = 'Y' OR  [BILL_CD] = 'IMME'))
				)
	END
END

IF (@FIL_ISSPOST_ADDL_IN = 'Y' OR @FIL_ISSPOST_ADDL_IN = 'T')
BEGIN
	BEGIN
		SELECT * INTO #T3 FROM #tmptable 
		TRUNCATE TABLE #tmptable
		
		INSERT INTO #tmptable SELECT * FROM dbo.#T3 WHERE 1=1
		AND ((ISNULL([OPT_CERT_AUTH],0) > 0 AND [AUTH_REQ_DT] IS NOT NULL)
		AND ISNULL(DATEADD(d,[CPI_FPC_OPT_CERT_AUTH_DAYS_NO],[AUTH_REQ_DT]),DATEADD(d,1,[CPI_BILLED_DT])) <= [CPI_BILLED_DT])
        OR [QUICK_ISSUE_IN]='Y' 
		OR [BILL_CD] = 'IMME'
        OR [CPI_CANCELLEDPREMIUM_AMOUNT_NO] <> 0
	END
END

IF (@FIL_POSTREG2_ADDL_IN = 'Y' OR @FIL_POSTREG2_ADDL_IN = 'T')
BEGIN
	BEGIN
		SELECT * INTO #T4 FROM #tmptable 
		TRUNCATE TABLE #tmptable
			  
		INSERT INTO #tmptable SELECT * FROM dbo.#T4 WHERE 1=1
		AND (ISNULL([I_TOT_PRM],0) <> 0 AND((ISNULL([OPT_CERT_AUTH],0) > 0 AND [AUTH_REQ_DT] IS NOT NULL)
		AND ISNULL(DATEADD(d,[CPI_FPC_OPT_CERT_AUTH_DAYS_NO],[AUTH_REQ_DT]),DATEADD(d,1,[CPI_BILLED_DT])) <= [CPI_BILLED_DT]))
        OR [QUICK_ISSUE_IN]='Y' 
		OR [BILL_CD] = 'IMME'
        OR [CPI_CANCELLEDPREMIUM_AMOUNT_NO] <> 0
	END
END

/*
--update PRIOR_CPI_CNT_NO, etc., using CROSS-APPLY:
*/
If @ReportConfig = 'ECHGBILLPRIOR'
Or @ReportConfig = 'CHGNON2'
Begin
	Update tt
	Set
	 PRIOR_CPI_CNT_NO = CpiExp2.CNT_NO
	,CPIEXP2_RECEIVED_NO = CpiExp2.RECEIVED_NO
	,CPIEXP2_POL_NO = CpiExp2.POL_NO
	,CPIEXP2_ISSUE_DT = CpiExp2.ISSUE_DT
	,CPIEXP2_EXP_DT = CpiExp2.EXP_DT

	From #tmptable As tt

	CROSS Apply(
		Select
		 Case When IsNull(@BillingLimiter, '') <> '' Then 'N' Else Null End As CPI_HOLD_IN
		,Case When IsNull(@BillingLimiter, '') <> '' Then 'Y' Else Null End As CPI_NET_CHARGES
	) As BillingLimiter

	--Prior CPI:
	CROSS Apply(
		SELECT CNT_NO = Count(*)
		,RECEIVED_NO = Sum(ABS((ISNULL(FTX_P.AMOUNT_NO,0) + ISNULL(FTX_CP.AMOUNT_NO,0))))
		,POL_NO = Max(FPC2.NUMBER_TX)
		,ISSUE_DT = Max(FPC2.EFFECTIVE_DT)
		,EXP_DT = Max(ISNULL(FPC2.CANCELLATION_DT,FPC2.EXPIRATION_DT))

		FROM FORCE_PLACED_CERTIFICATE FPC2 With(NoLock)
		JOIN FORCE_PLACED_CERT_REQUIRED_COVERAGE_RELATE FPCR With(NoLock) ON FPCR.FPC_ID = FPC2.ID and FPCR.PURGE_DT IS NULL
		JOIN REQUIRED_COVERAGE RC2 With(NoLock) ON RC2.ID = FPCR.REQUIRED_COVERAGE_ID AND RC2.SUMMARY_SUB_STATUS_CD = 'C' and RC2.PURGE_DT IS NULL
		LEFT JOIN FINANCIAL_TXN FTX_P With(NoLock) ON FTX_P.FPC_ID = FPC2.ID AND FTX_P.TXN_TYPE_CD = 'P' and FTX_P.PURGE_DT IS NULL
		LEFT JOIN FINANCIAL_TXN FTX_CP With(NoLock) ON FTX_CP.FPC_ID = FPC2.ID AND FTX_CP.TXN_TYPE_CD = 'CP' and FTX_CP.PURGE_DT IS NULL
		LEFT JOIN CPI_QUOTE CPQ With(NoLock) ON CPQ.ID = FPC2.CPI_QUOTE_ID and CPQ.PURGE_DT IS NULL
		LEFT JOIN CPI_ACTIVITY CPA_I With(NoLock) ON CPA_I.CPI_QUOTE_ID = CPQ.ID AND CPA_I.TYPE_CD = 'I' and CPA_I.PURGE_DT IS NULL
		LEFT JOIN CPI_ACTIVITY CPA_C With(NoLock) ON CPA_C.CPI_QUOTE_ID = CPQ.ID AND CPA_C.TYPE_CD = 'C'	and CPA_C.PURGE_DT IS NULL
		WHERE FPC2.PURGE_DT IS NULL
		  AND FPC2.LOAN_ID = tt.FPC_LOAN_ID
		  AND FPC2.NUMBER_TX <> tt.INSCOMPANY_POLICY_NO
		  AND FPC2.ACTIVE_IN = 'N'
		  AND FPC2.ISSUE_DT < tt.INSCOMPANY_ISSUE_DT
		  AND RC2.TYPE_CD = tt.REQUIREDCOVERAGE_CODE_TX
		  AND (ISNULL(FPC2.HOLD_IN,'N') = BillingLimiter.CPI_HOLD_IN OR BillingLimiter.CPI_HOLD_IN IS NULL)
		  AND ((ISNULL(CPA_I.TOTAL_PREMIUM_NO,0) - ABS(ISNULL(CPA_C.TOTAL_PREMIUM_NO,0)) > 0 AND  BillingLimiter.CPI_NET_CHARGES = 'Y') OR BillingLimiter.CPI_NET_CHARGES IS NULL)
		Group By FPC2.LOAN_ID, RC2.TYPE_CD
	) As CpiExp2
End

Declare @sqlstring as nvarchar(1000)
If isnull(@FilterBySQL,'') <> '' 
Begin
   Select * into #t1 from #tmptable 
   Set @sqlstring = N'Insert into #tmpTable
                     Select * from dbo.#t1 where ' + @FilterBySQL
	truncate table #tmptable
	EXECUTE sp_executesql @sqlstring
End


IF (@FIL_SMP_REPORT_IN = 'Y')
BEGIN
     
		-- Get all the financial transactions that are outstanding
      -- NOTE: This is run after the master FilterBySQL for performance reasons
      --       the master FilterBySQL will be run again at the end of this logic 
      --       to remove appropriate items created during the SMP splitting
		SELECT FTX_IDs.*
		INTO #tmpFTXIds
		FROM #tmptable t
				outer apply
				(
				   SELECT * FROM dbo.fn_GetOutstandingFinancialTxns(t.FPC_ID, @BillingGroupID, 'N')
				) FTX_IDs

	   --Create a temporary table to hold monthly period information such as term and policy start/end dates per bill cycle
	   DECLARE @smpPeriods AS TABLE  (FPC_ID BIGINT, SMP_TERM_NO INT, SMP_TOTAL_AMT_NO DECIMAL(8,2), TXN_TYPE_CD NVARCHAR(10),SMP_START_DT DATETIME, SMP_END_DT DATETIME, SMP_CPI_DUE_DAYS_NO bigint)
     
	   INSERT INTO @smpPeriods
	   SELECT   ftx.FPC_ID,
            ISNULL(
               ftptd.TERM_NO, 
               case 
                  -- When the Financial Txn is a Cancel and the Term Number is 0, 
                  -- then use the generated Term Number from #tmpFTXIds
                  when ftx.TXN_TYPE_CD = 'C' and ftx.TERM_NO = '0' then t.term_no 
                  else FTX.TERM_NO
               end
            ),
            t.AMOUNT_NO, 
				ftx.TXN_TYPE_CD,
				DATEADD(DAY,DATEDIFF(DAY,0,DATEADD(MONTH,FTX.TERM_NO-1,CPIISSUE.ISSUE_DT)),0) AS START_DT, --START_DTF
				DATEADD(DAY,DATEDIFF(DAY,0,
				   CASE
					  WHEN ISNULL(FPC.CANCELLATION_DT, DATEADD(MONTH,ISNULL(ftptd.TERM_NO, FTX.TERM_NO),CPIISSUE.ISSUE_DT)) >= DATEADD(MONTH,ISNULL(ftptd.TERM_NO, FTX.TERM_NO)-1,CPIISSUE.ISSUE_DT) AND ISNULL(FPC.CANCELLATION_DT, DATEADD(MONTH,ISNULL(ftptd.TERM_NO, FTX.TERM_NO),CPIISSUE.ISSUE_DT)) < DATEADD(MONTH,ISNULL(ftptd.TERM_NO, FTX.TERM_NO),CPIISSUE.ISSUE_DT)
					  THEN ISNULL(FPC.CANCELLATION_DT, DATEADD(MONTH,ISNULL(ftptd.TERM_NO, FTX.TERM_NO),CPIISSUE.ISSUE_DT))
					  ELSE DATEADD(MONTH,ISNULL(ftptd.TERM_NO, FTX.TERM_NO),CPIISSUE.ISSUE_DT)
				   END
				),0) AS END_DT
				,DATEDIFF(d, bg.STATEMENT_DT, GETDATE()) as SMP_CPI_DUE_DAYS_NO 
			
	   FROM     #tmpFTXIds t 
				JOIN FORCE_PLACED_CERTIFICATE FPC ON T.FPC_ID = FPC.ID 
				LEFT JOIN FINANCIAL_TXN ftx on t.FTX_ID = ftx.ID and ftx.PURGE_DT is null
            OUTER APPLY
            (
               SELECT   DISTINCT TERM_NO
               FROM     FINANCIAL_TXN_PAYMENT_TERM_DISTRIBUTION
               WHERE    FTX_ID = ftx.ID AND PURGE_DT IS NULL
            ) ftptd
				OUTER APPLY (
				   SELECT   DATEADD(DAY,DATEDIFF(DAY,0,START_DT), 0) AS ISSUE_DT
				   FROM     CPI_ACTIVITY CPI_ACTIVITY 
				   WHERE    CPI_ACTIVITY.TYPE_CD = 'I'
							AND CPI_ACTIVITY.CPI_QUOTE_ID = FPC.CPI_QUOTE_ID
							AND CPI_ACTIVITY.PURGE_DT IS NULL
				) AS CPIISSUE
            LEFT JOIN FINANCIAL_TXN_APPLY FTA on ftx.ID = fta.FINANCIAL_TXN_ID and fta.PURGE_DT is null and fta.NEW_TXN_IN = 'Y'
				LEFT JOIN BILLING_GROUP bg on FTA.BILLING_GROUP_ID = bg.ID and bg.PURGE_DT is null

      WHERE ISNULL(
               ftptd.TERM_NO, 
               case 
                  -- When the Financial Txn is a Cancel and the Term Number is 0, 
                  -- then use the generated Term Number from #tmpFTXIds
                  when ftx.TXN_TYPE_CD = 'C' and ftx.TERM_NO = '0' then t.term_no 
                  else FTX.TERM_NO
               end
            ) = t.term_no


	 --Combine the two tables into one
      SELECT   t.*, 
               MONTH_FINANCIAL.SMP_TOTAL_AMT_NO, 
               MONTH_FINANCIAL.SMP_START_DT, 
               MONTH_FINANCIAL.SMP_END_DT,
               MONTH_FINANCIAL.SMP_TERM_NO,
               MONTH_FINANCIAL.SMP_CPI_DUE_DAYS_NO     
               INTO #tSMP
      FROM     #tmptable t
               INNER JOIN @smpPeriods MONTH_FINANCIAL ON t.FPC_ID = MONTH_FINANCIAL.FPC_ID    
     
	 --Update the fields that are used in the report with the new values
      UPDATE   #tSMP
      SET      CPI_BILLED_NET_TOTAL_NO = SMP_TOTAL_AMT_NO, 
               INSCOMPANY_EFF_DT = SMP_START_DT,
               INSCOMPANY_CAN_DT = SMP_END_DT,
               INSCOMPANY_EXP_DT = SMP_END_DT,
               INSCOMPANY_EXPCXL_DT = SMP_END_DT,
               CPI_BILL_CYCLE = SMP_TERM_NO,
			      CPI_DUE_DAYS_NO = SMP_CPI_DUE_DAYS_NO


      -- Remove the newly added columns 
      ALTER TABLE #tSMP DROP COLUMN SMP_TOTAL_AMT_NO, SMP_START_DT, SMP_END_DT, SMP_TERM_NO, SMP_CPI_DUE_DAYS_NO
	  
	  TRUNCATE TABLE #tmptable
      -- Insert the new values back to the original table
      INSERT INTO #tmptable SELECT * FROM #tSMP

      -- Filter Once again if there is a FilterBySQL
      If isnull(@FilterBySQL,'') <> '' 
      Begin
         Select * into #t1AfterSMP from #tmptable 
         Set @sqlstring = N'Insert into #tmpTable
                           Select * from dbo.#t1AfterSMP where ' + @FilterBySQL
	      truncate table #tmptable
	      EXECUTE sp_executesql @sqlstring

         drop table #t1AfterSMP
      End

      -- Cleanup
      drop table #tSMP

END


IF ISNULL(@GroupBySQL,'') <> ''
BEGIN
	Set @sqlstring = N'Update #tmpTable Set [REPORT_GROUPBY_TX] = ' + @GroupBySQL
	EXECUTE sp_executesql @sqlstring
END

IF ISNULL(@SortBySQL,'') <> ''
BEGIN
	Set @sqlstring = N'Update #tmpTable Set [REPORT_SORTBY_TX] = ' + @SortBySQL
	EXECUTE sp_executesql @sqlstring
END

If isnull(@HeaderTx,'') <> '' 
Begin
	Set @sqlstring = N'Update #tmpTable Set [REPORT_HEADER_TX] = ' + @HeaderTx
	EXECUTE sp_executesql @sqlstring
End

If isnull(@FooterTx,'') <> '' 
Begin
	Set @sqlstring = N'Update #tmpTable Set [REPORT_FOOTER_TX] = ' + @FooterTx
	EXECUTE sp_executesql @sqlstring
End


SELECT @RecordCount = COUNT(*) from #tmptable
IF @Report_History_ID IS NOT NULL
BEGIN
 Update [UNITRAC-REPORTS].[UNITRAC].DBO.REPORT_HISTORY_NOXML
Set RECORD_COUNT_NO = @RecordCount
,UPDATE_DT = GETDATE()
where ID = @Report_History_ID    
END

Select * from #tmptable 

END
END


GO

