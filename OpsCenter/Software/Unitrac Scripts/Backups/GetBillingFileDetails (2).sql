IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GetBillingFileDetails]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[GetBillingFileDetails]
GO

CREATE PROCEDURE [dbo].[GetBillingFileDetails]
(
  @billingGroupId bigint
)
AS
BEGIN
	
	SET NOCOUNT ON

   DECLARE @DEF_ID AS BIGINT	
	SELECT @DEF_ID = ID from RELATED_DATA_DEF WHERE NAME_TX = 'Misc2'
   
   -- Drop Temporary Tables
   if OBJECT_ID('tempdb..#t1') is not null
      drop table #t1
      
	SELECT
	--TRANSACTION
	BG.ID BG_ID,
	FPC.ID FPC_ID, FT.ID FT_ID,
	FT.TXN_TYPE_CD, FT.TXN_DT,
	FT.AMOUNT_NO BILLED_AMOUNT_NO,
	FTA.ID FTA_ID, FTA.HOLD_IN,
	FTA.NEW_TXN_IN,
	--- LOAN
	LN.NUMBER_TX as LOAN_NUMBER_TX ,
   ISNULL(LN.LENDER_BRANCH_CODE_TX,'') AS BRANCH_CODE_TX,
   ISNULL(LN.OFFICER_CODE_TX,'') AS LOAN_OFFICER_CODE_TX,
	---COLLATERAL
	CL.COLLATERAL_NUMBER_NO ,
	ISNULL(CL.ASSET_NUMBER_TX,'') AS ASSET_NUMBER_TX,
	--- OWNER
	ISNULL(O.LAST_NAME_TX,'') AS LAST_NAME_TX,
	ISNULL(O.FIRST_NAME_TX,'') AS FIRST_NAME_TX,
	ISNULL(O.MIDDLE_INITIAL_TX,'') AS  MIDDLE_INITIAL_TX,
	-- OWNER ADDR
	ISNULL(OA.LINE_1_TX,'') AS  OWNER_LINE1_TX,
	ISNULL(OA.LINE_2_TX,'') AS  OWNER_LINE2_TX,
	ISNULL(OA.CITY_TX,'') AS OWNER_CITY_TX ,
	ISNULL(OA.STATE_PROV_TX,'') AS OWNER_STATE_TX ,
	ISNULL(OA.POSTAL_CODE_TX,'') AS OWNER_POSTAL_CODE_TX,
	--- PROPERTY
	ISNULL(P.YEAR_TX,'') AS YEAR_TX,
	ISNULL(P.MAKE_TX,'') AS MAKE_TX,
	ISNULL(P.MODEL_TX,'') AS MODEL_TX,
   ISNULL(P.BODY_TX,'') AS BODY_TX,
	ISNULL(P.VIN_TX,'') AS VIN_TX,

	ISNULL(PA.LINE_1_TX,'') AS  PROP_LINE1_TX,
	ISNULL(PA.LINE_2_TX,'') AS  PROP_LINE2_TX,
	ISNULL(PA.CITY_TX,'') AS PROP_CITY_TX ,
	ISNULL(PA.STATE_PROV_TX,'') AS PROP_STATE_TX ,
	ISNULL(PA.POSTAL_CODE_TX,'') AS PROP_POSTAL_CODE_TX,
   P.ADDRESS_ID ,
	-- FPC
	FPC.NUMBER_TX as POLICY_NUMBER_TX ,
	FPC.STATUS_CD,
	FPC.EFFECTIVE_DT ,
	FPC.EXPIRATION_DT ,
	FPC.CANCELLATION_DT ,
	FPC.ISSUE_DT,
	FPC.MONTHLY_BILLING_IN ,

	--- CPIQuote
	CPQ.BASIS_NO,
	CPQ.BASIS_TYPE_CD,
	CPQ.TERM_NO,
	CPQ.TERM_TYPE_CD,
   CPQ.PAYMENT_INCREASE_METHOD_CD,
   ISNULL(FIRST_MONTH_BILL_NO,0) AS FIRST_MONTH_BILL_NO ,
   ISNULL(NEXT_MONTH_BILL_NO,0) AS NEXT_MONTH_BILL_NO ,
	--- CPIActivity
	CPA_I.REASON_CD AS ISSUE_REASON_CD,
	CPA_I.TOTAL_PREMIUM_NO AS CALC_ISSUE_TOTAL_NO,
   CPA_I.NEW_PAYMENT_AMOUNT_NO,
	CPI_C.CANCEL_EVENT_DT,
   ISNULL(CPIA_CANCEL.CALC_CXL_TTL_NO,0) AS CALC_CXL_TTL_NO ,
	--LENDER
	LND.CODE_TX AS LENDER_CODE_TX,
	-- CARRIER
	ISNULL(CR.CODE_TX,'') AS CARRIER_CODE_TX,
	ISNULL(CC.CODE_TX,'') AS CC_CODE_TX, CC.ID AS CC_ID,
   --- RC
	BORR_INS_COMP = CASE WHEN RC.SUMMARY_SUB_STATUS_CD = 'C' THEN ISNULL(CR.CODE_TX,'')
	                   ELSE ISNULL(ISNULL(ISNULL(BIC.NAME , OP.BIC_NAME_TX ),CR.CODE_TX),'') END ,
   ISNULL(CXL_RSN.CXL_REASON_CD,'') AS CXL_REASON_CD ,
   ISSUE_TXN.ISSUE_PAID_DT, ISNULL(CXL_TXN.PAID_CXL_TTL,0) AS PAID_CXL_TTL,
   ISNULL(BG_SD.PAST_DUE_DAYS,0) AS [CPI_DUE_DAYS_NO] ,
	ISNULL(RC.ForcedPlcyOptReportNonPayDays,0) AS [CPI_FPC_OPT_BILL_DUE_DAYS_NO],
	LN.ID AS LOAN_ID,
	CBC_CHARGE.BillCycle AS [CPI_BILL_CYCLE_CHARGE],
	CBC_Refund.BillCycle AS [CPI_BILL_CYCLE_REFUND],
   ISNULL(MONTHTERM.MAX_TERM_NO , 0) AS  MAX_TERM_NO, ISNULL(MONTHTERM.MIN_TERM_NO, 0 ) AS MIN_TERM_NO,   
	FPC.EFFECTIVE_DT as 'MNTH_EFFECTIVE_DT',
	FPC.EXPIRATION_DT as 'MNTH_EXPIRATION_DT',
   ISNULL(RD.VALUE_TX,'') as MISC2 
   INTO #t1
	FROM BILLING_GROUP BG
		JOIN FINANCIAL_TXN_APPLY FTA ON FTA.BILLING_GROUP_ID = BG.ID AND FTA.PURGE_DT IS NULL
		JOIN FINANCIAL_TXN FT ON FT.ID = FTA.FINANCIAL_TXN_ID AND FT.PURGE_DT IS NULL
		JOIN FORCE_PLACED_CERTIFICATE FPC ON FPC.ID = FT.FPC_ID AND FPC.PURGE_DT IS NULL
		JOIN CPI_QUOTE CPQ on  CPQ.ID = FPC.CPI_QUOTE_ID
		LEFT JOIN CPI_ACTIVITY CPA_I on CPA_I.CPI_QUOTE_ID = CPQ.ID AND CPA_I.TYPE_CD = 'I'
      AND CPA_I.PURGE_DT IS NULL
		OUTER APPLY ( SELECT MAX(PROCESS_DT) AS CANCEL_EVENT_DT FROM CPI_ACTIVITY CPA
		             WHERE TYPE_CD IN ('C', 'MT') AND CPA.PURGE_DT IS NULL AND
		            CPA.CPI_QUOTE_ID = CPQ.ID) AS CPI_C
      OUTER APPLY (SELECT TOP 1 CPA.REASON_CD AS CXL_REASON_CD FROM CPI_ACTIVITY CPA
		             WHERE TYPE_CD IN ('C', 'MT') AND CPA.PURGE_DT IS NULL AND
		             CPA.CPI_QUOTE_ID = CPQ.ID ORDER BY PROCESS_DT DESC) AS CXL_RSN
      OUTER APPLY (SELECT
						SUM(CPA.TOTAL_PREMIUM_NO) AS CALC_CXL_TTL_NO
						FROM CPI_ACTIVITY CPA
						WHERE TYPE_CD IN ('C', 'MT', 'R') AND
                  CPA.PURGE_DT IS NULL AND
						CPA.CPI_QUOTE_ID = CPQ.ID)
						AS CPIA_CANCEL
		JOIN FORCE_PLACED_CERT_REQUIRED_COVERAGE_RELATE FPCRCR ON FPCRCR.FPC_ID = FT.FPC_ID AND FPCRCR.PURGE_DT IS NULL
		JOIN REQUIRED_COVERAGE RC ON RC.ID = FPCRCR.REQUIRED_COVERAGE_ID AND RC.PURGE_DT IS NULL
		JOIN PROPERTY P ON P.ID = RC.PROPERTY_ID AND P.PURGE_DT IS NULL
      OUTER APPLY
		(
		  SELECT TOP 1 ID , BIC_NAME_TX , BIC_ID  FROM dbo.GetCurrentCoverage(P.ID, RC.ID, RC.TYPE_CD)
         WHERE ISNULL(EXCESS_IN , 'N' ) = 'N'
          ORDER BY ISNULL(UNIT_OWNERS_IN, 'N') DESC
		) AS OP
      OUTER APPLY
		(
		  SELECT MAX(TXN_DT) AS ISSUE_PAID_DT FROM FINANCIAL_TXN WHERE FPC_ID = FPC.ID
		  AND PURGE_DT IS NULL AND TXN_TYPE_CD = 'P'
		) AS ISSUE_TXN
      OUTER APPLY
		(
		  SELECT SUM(AMOUNT_NO) AS PAID_CXL_TTL FROM FINANCIAL_TXN WHERE FPC_ID = FPC.ID
		  AND PURGE_DT IS NULL AND TXN_TYPE_CD IN ('CP')
		) AS CXL_TXN
		LEFT JOIN BORROWER_INSURANCE_COMPANY BIC ON BIC.ID = OP.BIC_ID
		LEFT OUTER JOIN OWNER_ADDRESS PA ON PA.ID = P.ADDRESS_ID
		JOIN COLLATERAL CL ON CL.PROPERTY_ID = RC.PROPERTY_ID AND CL.PRIMARY_LOAN_IN = 'Y' AND CL.PURGE_DT IS NULL
		LEFT JOIN COLLATERAL_CODE CC ON CL.COLLATERAL_CODE_ID = CC.ID
		JOIN LOAN LN ON LN.ID = CL.LOAN_ID AND LN.PURGE_DT IS NULL
		JOIN OWNER_LOAN_RELATE OL on  OL.LOAN_ID = LN.ID and OL.PRIMARY_IN='Y' AND OL.PURGE_DT IS NULL
      AND OL.PRIMARY_IN = 'Y'
		JOIN [OWNER] O on  O.ID = OL.OWNER_ID
		LEFT JOIN [OWNER_ADDRESS] OA on  OA.ID = O.ADDRESS_ID
		LEFT JOIN CARRIER CR on  CR.ID = FPC.CARRIER_ID
		JOIN LENDER LND on  LND.ID = LN.LENDER_ID
		OUTER APPLY
		(
			SELECT COUNT(1) as BillCycle FROM FINANCIAL_TXN FTX JOIN FINANCIAL_TXN_APPLY FTA ON FTA.FINANCIAL_TXN_ID = FTX.ID AND FTA.PURGE_DT IS NULL
			WHERE FTX.FPC_ID = FPC.ID AND FTX.PURGE_DT IS NULL AND FTX.TXN_TYPE_CD = 'P' AND FTA.BILLING_GROUP_ID = BG.ID
		) AS CBC_CHARGE
		OUTER APPLY
		(
			SELECT COUNT(1) AS BillCycle FROM CPI_ACTIVITY ca
			WHERE ca.CPI_QUOTE_ID = FPC.CPI_QUOTE_ID AND ca.PURGE_DT IS NULL AND fpc.PURGE_DT IS NULL	AND ca.TYPE_CD = 'C'
		) AS CBC_Refund
      OUTER APPLY
		(
		  SELECT MAX(FTX.TERM_NO) AS MAX_TERM_NO , MIN(FTX.TERM_NO) AS MIN_TERM_NO
		  FROM FINANCIAL_TXN FTX JOIN FINANCIAL_TXN_APPLY FTA ON FTA.FINANCIAL_TXN_ID = FTX.ID AND FTA.PURGE_DT IS NULL
		  WHERE FTX.FPC_ID = FPC.ID AND FTX.PURGE_DT IS NULL AND FTX.TXN_TYPE_CD = 'R' AND FTA.BILLING_GROUP_ID = BG.ID
		  AND FPC.MONTHLY_BILLING_IN = 'Y'
		) AS MONTHTERM
      OUTER APPLY (
		SELECT PAST_DUE_DAYS
		FROM dbo.GetPastDueDaysDaysAndDate(FPC.ID,RC.DelayedBilling,
											RC.ForcedPlcyOptReportNonPayDays)
		) BG_SD
      LEFT JOIN RELATED_DATA RD ON RD.DEF_ID = @DEF_ID and RD.RELATE_ID = LN.ID
		WHERE BG.ID = @billingGroupId 
   ORDER BY FT.FPC_ID
   OPTION (FAST 1)

   -- If the billing file has items for monthly billing, then add in the specific monthly 
   -- date information and the managed code will determine if it is useful to use for output
   DECLARE @useMonthlyBreakouts INT = 0
   SELECT @useMonthlyBreakouts = COUNT(*) FROM #t1 WHERE MONTHLY_BILLING_IN = 'Y'
   IF @useMonthlyBreakouts > 0
   BEGIN

      -- Create a temporary table
      -- Added a "Uses Custom Monthly Billing Flag" to determine 
      -- which FPCs are used for custom monthly billing
      select   t.*,
               CASE 
                  WHEN FPC.MONTHLY_BILLING_IN = 'Y' AND RD.VALUE_TX = 'true' AND FPC.EFFECTIVE_DT >= RD.START_DT THEN
                     ISNULL(MP.MONTHLY_BILLING_PRORATION_CD, 'DollarsToFirstMonth')
                  ELSE 
                     'DollarsToFirstMonth'
               END AS 'USES_CUSTOM_MONTHLY_BILLING_CD'
               INTO #t2
      from     #t1 t
               INNER JOIN FORCE_PLACED_CERTIFICATE FPC ON t.FPC_ID = FPC.ID
               INNER JOIN MASTER_POLICY MP on FPC.MASTER_POLICY_ID = MP.ID
               INNER JOIN LOAN L on FPC.LOAN_ID = L.ID
               INNER JOIN RELATED_DATA RD on RD.RELATE_ID = L.LENDER_ID
               INNER JOIN RELATED_DATA_DEF RDD ON RD.DEF_ID = RDD.ID AND RDD.NAME_TX = 'UsesCustomMonthlyBillingProration'
            
      -- Create a field holding the listing of FPC IDs to pass to the get the monthly period information 
      -- DECLARE @fpcIds AS VARCHAR(MAX) = (SELECT FPC_ID FROM #t1 t GROUP BY FPC_ID FOR XML PATH(''))
      DECLARE @fpcIds AS VARCHAR(MAX) = (
         SELECT   FPC_ID
         FROM     #t2 t 
         WHERE    USES_CUSTOM_MONTHLY_BILLING_CD != 'DollarsToFirstMonth' 
         GROUP BY FPC_ID FOR XML PATH(''))
      
      -- Create a temporary table to hold monthly period information
      DECLARE @monthlyPeriods AS TABLE  (FPC_ID BIGINT, MTHN_R_TOT_PRM DECIMAL(8,2), MTHN_C_TOT_PRM DECIMAL(8,2), 
            MTHN_PC_TOT_PRM DECIMAL(8,2), PRD_START_DT DATETIME, PRD_END_DT DATETIME, TERM_NO INT)
            
      -- Load the monthly period table (using the first of the month or cancel date 
      -- if there is one as period start to the end of month as period end)
      INSERT INTO @monthlyPeriods EXEC RetrieveMonthlyBillingPeriods @fpcIds, 1
         
      -- In a breakout scenario:
      --   All the dates will need to be updated for charges and refunds to handle period start and end dates
      --   (NOTE: the end dates DO take the cancellation date into consideration already)
      UPDATE   t
      SET      MNTH_EFFECTIVE_DT= mp.PRD_START_DT,
               MNTH_EXPIRATION_DT = mp.PRD_END_DT
      FROM     #t1 t
               inner join FINANCIAL_TXN FTX ON t.FT_ID = FTX.ID AND FTX.PURGE_DT IS NULL
               inner join @monthlyPeriods mp ON t.FPC_ID = mp.FPC_ID AND ftx.TERM_NO = mp.TERM_NO
      WHERE    t.TXN_TYPE_CD in ('R','C','CP')
      
      -- Clean up
      DROP TABLE #t2

   END
   
   -- Return the billing data
   SELECT * FROM #t1
   ORDER BY FPC_ID

   -- Clean up
   DROP TABLE #t1

END

GO


