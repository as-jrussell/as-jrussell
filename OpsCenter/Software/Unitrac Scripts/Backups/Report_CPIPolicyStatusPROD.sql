USE [UniTrac]
GO

/****** Object:  StoredProcedure [dbo].[Report_CPIPolicyStatus]    Script Date: 10/29/2015 3:57:26 PM ******/
DROP PROCEDURE [dbo].[Report_CPIPolicyStatus]
GO

/****** Object:  StoredProcedure [dbo].[Report_CPIPolicyStatus]    Script Date: 10/29/2015 3:57:26 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[Report_CPIPolicyStatus] 
(
--declare
	@LenderCode as nvarchar(10)=NULL,
	@Branch AS nvarchar(max)=NULL,
	@Division as nvarchar(10)=NULL,
	@Coverage as nvarchar(100)=NULL,
	@ReportType as nvarchar(50)=NULL,
	@ReportConfig as varchar(50)=NULL,
	@GroupByCode as nvarchar(50)=NULL,
	@SortByCode as nvarchar(50)=NULL,
	@FilterByCode as nvarchar(50)=NULL,
	@Report_History_ID as bigint=NULL
)
AS
BEGIN
/*
--set to 0 before checking-into TFS:
*/
	DECLARE @Debug int=0

	SET NOCOUNT ON

/*
--Debug:
*/
IF @Debug>0
BEGIN
	SET NOCOUNT OFF

	Select @ReportConfig='MULTICPI_6426',@ReportType='MULTICPI_6426'
	
	Select @LenderCode=Coalesce(@LenderCode,'1727') Where @Debug In (1727, 1, 2) /* Hapo */
	Select @LenderCode=Coalesce(@LenderCode,'1771') Where @Debug In (1771, 3, 4) /* PenFed */
	Select @LenderCode=Coalesce(@LenderCode,Cast(@Debug As NVarChar(10)))
END
IF @Debug>1
BEGIN
	select '@Debug'=@Debug,'@LenderCode'=@LenderCode,'@ReportConfig'=@ReportConfig,'@ReportType'=@ReportType
END

--Get rid of residual #temp tables
--IF OBJECT_ID(N'tempdb..#tmpfilter',N'U') IS NOT NULL
--  DROP TABLE #tmpfilter
IF OBJECT_ID(N'tempdb..#tmptable',N'U') IS NOT NULL
  DROP TABLE #tmptable
IF OBJECT_ID(N'tempdb..#t1',N'U') IS NOT NULL
  DROP TABLE #t1
IF OBJECT_ID(N'tempdb..#tmpMultiCPI',N'U') IS NOT NULL
  DROP TABLE #tmpMultiCPI

DECLARE @RealReportConfig varchar(50) = @ReportConfig
IF @ReportConfig = '0000'
BEGIN
	SET @RealReportConfig = @ReportType
END

DECLARE @DEBUGGING AS VARCHAR(1) = CASE WHEN @Debug>1 THEN 'T' ELSE 'F' END
Declare @LenderID as bigint


DECLARE @BranchTable AS TABLE(ID int, STRVALUE nvarchar(30))
			INSERT INTO @BranchTable SELECT * FROM SplitFunction(@Branch, ',')  


CREATE TABLE [dbo].[#tmptable](
	[LOAN_BRANCHCODE_TX] [nvarchar](20) NULL,
	[LOAN_DIVISIONCODE_TX] [nvarchar](20) NULL,
	[LOAN_TYPE_TX] [nvarchar](1000) NULL,
	[REQUIREDCOVERAGE_CODE_TX] [nvarchar](30) NULL,
	[REQUIREDCOVERAGE_TYPE_TX] [nvarchar](1000) NULL,
--LOAN
	[LOAN_NUMBER_TX] [nvarchar](18) NOT NULL,
	[LOAN_NUMBERSORT_TX] [nvarchar](18) NULL,
	[LOAN_EFFECTIVE_DT] [datetime] NULL,
	[LOAN_MATURITY_DT] [datetime] NULL,
	[LOAN_BALANCE_NO] [decimal](19, 2) NULL,
	[LOAN_OFFICERCODE_TX] [nvarchar](20) NULL,
	[LOAN_CREDITSCORECODE_TX] [nvarchar](20) NULL,
--LENDER
	[LOAN_LENDERCODE_TX] [nvarchar](10) NULL,	
	[LENDER_NAME_TX] [nvarchar](40) NULL,	
--COLLATERAL
	[COLLATERAL_NUMBER_NO] [int] NULL,
	[COLLATERAL_CODE_TX] [nvarchar](10) NULL,
	[LENDER_COLLATERAL_CODE_TX] [nvarchar](10) NULL,
	[PURPOSE_CODE_TX] [nvarchar](10) NULL,
--OWNER
	[OWNER_LASTNAME_TX] [nvarchar](30) NULL,
	[OWNER_FIRSTNAME_TX] [nvarchar](30) NULL,
	[OWNER_MIDDLEINITIAL_TX] [char](1) NULL,
	[OWNER_LINE1_TX] [nvarchar](100) NULL,
	[OWNER_LINE2_TX] [nvarchar](100) NULL,
	[OWNER_STATE_TX] [nvarchar](30) NULL,
	[OWNER_CITY_TX] [nvarchar](40) NULL,
	[OWNER_ZIP_TX] [nvarchar](30) NULL,
--PROPERTY
	[COLLATERAL_YEAR_TX] [nvarchar](4) NULL,
	[COLLATERAL_MAKE_TX] [nvarchar](30) NULL,
	[COLLATERAL_MODEL_TX] [nvarchar](30) NULL,
	[COLLATERAL_VIN_TX] [nvarchar](18) NULL,
	[COLLATERAL_EQUIP_TX] [nvarchar](100) NULL,
	[COLLATERAL_LINE1_TX] [nvarchar](100) NULL,
	[COLLATERAL_LINE2_TX] [nvarchar](100) NULL,
	[COLLATERAL_STATE_TX] [nvarchar](30) NULL,
	[COLLATERAL_CITY_TX] [nvarchar](40) NULL,
	[COLLATERAL_ZIP_TX] [nvarchar](30) NULL,
	[PROPERTY_TYPE_CD] [nvarchar](30) NULL,
--COVERAGE
	[COVERAGE_STATUS_TX] [nvarchar](1000) NULL,
--CPI
	[INSCOMPANY_NAME_TX] [nvarchar](50) NULL,
	[INSCOMPANY_POLICY_NO] [nvarchar](30) NULL,
	[INSCOMPANY_EFF_DT] [datetime2](7) NULL,
	[INSCOMPANY_EFFDTSORT_TX] [nvarchar](8) NULL,
	[INSCOMPANY_EXP_DT] [datetime2](7) NULL,
	[INSCOMPANY_CAN_DT] [datetime2](7) NULL,
	[INSCOMPANY_EXPCXL_DT] [datetime2](7) NULL,
	[INSCOMPANY_ISSUE_DT] [datetime2](7) NULL,
	[CPI_QUOTE_TERM_NO] [int] NULL,
	[CPI_ISSUEDPREMIUM_AMOUNT_NO] [decimal](18, 2) NULL,
	[CPI_CANCELLEDPREMIUM_AMOUNT_NO] [decimal](18, 2) NULL,
   [CPI_HOLD_IN] [nvarchar] (1) NULL,
--IDs, STATUS
	[LOAN_ID] [bigint] NULL,
	[COLLATERAL_ID] [bigint] NULL,
	[PROPERTY_ID] [bigint] NULL,
	[REQUIREDCOVERAGE_ID] [bigint] NULL,
	[LOAN_STATUSCODE] [nvarchar] (2) NULL,
	[LOAN_STATUSMEANING_TX] [nvarchar](1000) NULL,
	[COLLATERAL_STATUSCODE] [nvarchar] (2) NULL,
	[COLLATERAL_STATUSMEANING_TX] [nvarchar](1000) NULL,
	[REQUIREDCOVERAGE_STATUSCODE] [nvarchar] (2) NULL,
	[REQUIREDCOVERAGE_STATUSMEANING_TX] [nvarchar](1000) NULL,
	[REQUIREDCOVERAGE_SUBSTATUSCODE] [nvarchar] (2) NULL,
	[REQUIREDCOVERAGE_INSSTATUSCODE] [nvarchar] (2) NULL,
	[REQUIREDCOVERAGE_INSSTATUSMEANING_TX] [nvarchar](1000) NULL,
	[REQUIREDCOVERAGE_INSSUBSTATUSCODE] [nvarchar] (2) NULL,
	[REQUIREDCOVERAGE_INSSUBSTATUSMEANING_TX] [nvarchar](1000) NULL,
	[REPORT_GROUPBY_TX] [nvarchar](1000) NULL,
	[PROPERTY_DESCRIPTION] [nvarchar](100) NULL,
	[ISS_REASON_TX] [nvarchar](10) NOT NULL,
	[INS_CXL_DT] [datetime2](7) NULL,
	[I_TOT_PRM] [decimal](18, 2) NOT NULL,
	[PI_TOT_PRM] [decimal](18, 2) NOT NULL,
	[C_TOT_PRM] [decimal](18, 2) NOT NULL,
	[PC_TOT_PRM] [decimal](18, 2) NOT NULL,
	[CPI_ISSUEPAID_DT] [datetime2](7) NULL,
	[OWNER_NAME] [nvarchar](64) NULL,
	[LOAN_LENDERNAME_TX] [nvarchar](40) NOT NULL,
	[INS_EXP_DT_RANGE] [nvarchar](13) NULL,
	[INS_ISS_DT_RANGE] [nvarchar](13) NULL,
	[PRIOR_CPI_CNT_NO] [int] NULL,					
	[FPC_LOAN_ID] [bigint] NULL,					
	[INS_PRINT_DT] [datetime] NULL,
	[LOAN_CONTRACT_TYPE_TX]	[nvarchar](30) NULL,
	[LATEST_CPI] [int] NULL,
--STD
	[REPORT_SORTBY_TX] [nvarchar](1000) NULL,
	[REPORT_HEADER_TX] [nvarchar](1000) NULL,
	[REPORT_FOOTER_TX] [nvarchar](1000) NULL
) ON [PRIMARY]

--CREATE TABLE [dbo].[#tmpfilter](
DECLARE @tmpfilter AS TABLE(
	[ATTRIBUTE_CD] [nvarchar](50) NULL,
	[VALUE_TX] [nvarchar](50) NULL
) --ON [PRIMARY]

Select @LenderID=ID from dbo.LENDER WITH(NOLOCK) WHERE CODE_TX = @LenderCode and PURGE_DT is null

Declare @LoanStatus as varchar(5)
Declare @CollateralStatus as varchar(5)
Declare @RequiredCoverageStatus as varchar(5)
Declare @RequiredCoverageSubStatus as varchar(5)
Declare @SummaryStatus as varchar(5)
Declare @SummarySubStatus as varchar(5)
Declare @GroupBySQL as varchar(1000)
Declare @SortBySQL as varchar(1000)
Declare @FilterBySQL as varchar(1000)
Declare @HeaderTx as varchar(1000)
Declare @FooterTx as varchar(1000)
Declare @FillerZero as varchar(18)
Declare @RecordCount as bigint

Set @LoanStatus = NULL
Set @CollateralStatus = NULL
Set @RequiredCoverageStatus = NULL
Set @RequiredCoverageSubStatus = NULL
Set @SummaryStatus = NULL
Set @SummarySubStatus = NULL
Set @FillerZero = '000000000000000000'
Set @RecordCount = 0

Insert into @tmpfilter (
	ATTRIBUTE_CD,
	VALUE_TX)

Select 
RAD.ATTRIBUTE_CD,
Case 
  when Custom.VALUE_TX is not NULL then Custom.VALUE_TX
  when RA.VALUE_TX is not NULL then RA.VALUE_TX
  else RAD.VALUE_TX
End as VALUE_TX
from dbo.REF_CODE RC WITH(NOLOCK)
Join dbo.REF_CODE_ATTRIBUTE RAD WITH(NOLOCK) on RAD.DOMAIN_CD = RC.DOMAIN_CD and RAD.REF_CD = 'DEFAULT' and RAD.ATTRIBUTE_CD like 'FIL%'
left Join dbo.REF_CODE_ATTRIBUTE RA WITH(NOLOCK) on RA.DOMAIN_CD = RC.DOMAIN_CD and RA.REF_CD = RC.CODE_CD and RA.ATTRIBUTE_CD = RAD.ATTRIBUTE_CD
left Join 
  (
  Select CODE_TX,REPORT_CD,REPORT_DOMAIN_CD,REPORT_REF_ATTRIBUTE_CD,VALUE_TX from dbo.REPORT_CONFIG RC WITH(NOLOCK)
  Join dbo.REPORT_CONFIG_ATTRIBUTE RCA WITH(NOLOCK) on RCA.REPORT_CONFIG_ID = RC.ID
  ) Custom
   on Custom.CODE_TX = @ReportConfig and Custom.REPORT_DOMAIN_CD = RAD.DOMAIN_CD and Custom.REPORT_REF_ATTRIBUTE_CD = RAD.ATTRIBUTE_CD and Custom.REPORT_CD = @ReportType
where RC.DOMAIN_CD = 'Report_CPIPolicyStatus' and RC.CODE_CD = @ReportType

Select @LoanStatus =  Value_TX from @tmpfilter where ATTRIBUTE_CD = 'FIL_LNStatus'
Select @CollateralStatus = Value_TX from @tmpfilter where ATTRIBUTE_CD = 'FIL_CLStatus'
Select @RequiredCoverageStatus =  Value_TX from @tmpfilter where ATTRIBUTE_CD = 'FIL_RCStatus'
Select @RequiredCoverageSubStatus =  Value_TX from @tmpfilter where ATTRIBUTE_CD = 'FIL_RCSubStatus'
Select @SummaryStatus =  Value_TX from @tmpfilter where ATTRIBUTE_CD = 'FIL_INSStatus'
Select @SummarySubStatus =  Value_TX from @tmpfilter where ATTRIBUTE_CD = 'FIL_INSSubStatus'

if @Debug>1
begin
	select '@Debug'=@Debug,'@tmpfilter'='@tmpfilter',tf.* from @tmpfilter tf
end

if @ReportConfig is NULL or @ReportConfig = '' or @ReportConfig = '0000'
  Begin
	IF @GroupByCode IS NULL OR @GroupByCode = ''
		SELECT @GroupBySQL=GROUP_TX FROM dbo.REPORT_CONFIG RC WITH(NOLOCK) WHERE CODE_TX = @ReportType
	ELSE
		SELECT @GroupBySQL=DESCRIPTION_TX FROM dbo.REF_CODE RC WITH(NOLOCK) WHERE DOMAIN_CD = 'Report_GroupBy' AND CODE_CD = @GroupByCode
	IF @SortByCode IS NULL OR @SortByCode = ''
		SELECT @SortBySQL=SORT_TX FROM dbo.REPORT_CONFIG RC WITH(NOLOCK) WHERE CODE_TX = @ReportType
	ELSE
		SELECT @SortBySQL=DESCRIPTION_TX FROM dbo.REF_CODE RC WITH(NOLOCK) WHERE DOMAIN_CD = 'Report_SortBy' AND CODE_CD = @SortByCode
	IF @FilterByCode IS NULL OR @FilterByCode = ''
		SELECT @FilterBySQL=FILTER_TX FROM dbo.REPORT_CONFIG RC WITH(NOLOCK) WHERE CODE_TX = @ReportType
	Else
		SELECT @FilterBySQL=DESCRIPTION_TX FROM dbo.REF_CODE RC WITH(NOLOCK) WHERE DOMAIN_CD = 'Report_FilterBy' AND CODE_CD = @FilterByCode

	Select @HeaderTx=HEADER_TX from dbo.REPORT_CONFIG RC WITH(NOLOCK) where CODE_TX = @ReportType
	Select @FooterTx=FOOTER_TX from dbo.REPORT_CONFIG RC WITH(NOLOCK) where CODE_TX = @ReportType
  End
else
  Begin
	IF @GroupByCode IS NULL OR @GroupByCode = ''
		SELECT @GroupBySQL=GROUP_TX FROM dbo.REPORT_CONFIG RC WITH(NOLOCK) WHERE CODE_TX = @ReportConfig
	ELSE
		SELECT @GroupBySQL=DESCRIPTION_TX FROM dbo.REF_CODE RC WITH(NOLOCK) WHERE DOMAIN_CD = 'Report_GroupBy' AND CODE_CD = @GroupByCode
	IF @SortByCode IS NULL OR @SortByCode = ''
		SELECT @SortBySQL=SORT_TX FROM dbo.REPORT_CONFIG RC WITH(NOLOCK) WHERE CODE_TX = @ReportConfig
	ELSE
		SELECT @SortBySQL=DESCRIPTION_TX FROM dbo.REF_CODE RC WITH(NOLOCK) WHERE DOMAIN_CD = 'Report_SortBy' AND CODE_CD = @SortByCode
	IF @FilterByCode IS NULL OR @FilterByCode = ''
		SELECT @FilterBySQL=FILTER_TX FROM dbo.REPORT_CONFIG RC WITH(NOLOCK) WHERE CODE_TX = @ReportConfig
	Else
		SELECT @FilterBySQL=DESCRIPTION_TX FROM dbo.REF_CODE RC WITH(NOLOCK) WHERE DOMAIN_CD = 'Report_FilterBy' AND CODE_CD = @FilterByCode

	Select @HeaderTx=HEADER_TX from dbo.REPORT_CONFIG RC WITH(NOLOCK) where CODE_TX = @ReportConfig
	Select @FooterTx=FOOTER_TX from dbo.REPORT_CONFIG RC WITH(NOLOCK) where CODE_TX = @ReportConfig
  End  


IF @ReportConfig LIKE 'MULTICPI%'		
BEGIN
	SELECT  @FilterByCode = NULL, @FilterBySQL = NULL
END

/* REF_CODE DOMAIN constants: */
Declare @REF_DOM_SECOND_CLASS NVarChar(30) = N'SecondaryClassification'
Declare @REF_DOM_NOTICE_TYPE NVarChar(30) = N'NoticeType'
Declare @REF_DOM_LOAN_STAT NVarChar(30) = N'LoanStatus'
Declare @REF_DOM_COLLAT_STAT NVarChar(30) = N'CollateralStatus'
Declare @REF_DOM_RCOV_STAT NVarChar(30) = N'RequiredCoverageStatus'
Declare @REF_DOM_RCOV_INS_STAT NVarChar(30) = N'RequiredCoverageInsStatus'
Declare @REF_DOM_RCOV_INS_SUB_STAT NVarChar(30) = N'RequiredCoverageInsSubStatus'
Declare @REF_DOM_CONTRACT_TYPE NVarChar(30) = N'ContractType'
Declare @REF_DOM_COV NVarChar(30) = N'Coverage'

If @Debug>1
Begin
	Set Transaction Isolation Level Read Uncommitted
End

;WITH
 REF_CODE_CTE As
(
	 Select DOMAIN_CD, CODE_CD, MEANING_TX, DESCRIPTION_TX FROM dbo.REF_CODE AS RC WITH(NOLOCK) WHERE DOMAIN_CD = @REF_DOM_CONTRACT_TYPE
	 UNION ALL
	 Select DOMAIN_CD, CODE_CD, MEANING_TX, DESCRIPTION_TX FROM dbo.REF_CODE AS RC WITH(NOLOCK) WHERE DOMAIN_CD = @REF_DOM_NOTICE_TYPE
	 UNION ALL
	 Select DOMAIN_CD, CODE_CD, MEANING_TX, DESCRIPTION_TX FROM dbo.REF_CODE AS RC WITH(NOLOCK) WHERE DOMAIN_CD = @REF_DOM_COV
	 UNION ALL
	 Select DOMAIN_CD, CODE_CD, MEANING_TX, DESCRIPTION_TX FROM dbo.REF_CODE AS RC WITH(NOLOCK) WHERE DOMAIN_CD = @REF_DOM_LOAN_STAT
	 UNION ALL
	 Select DOMAIN_CD, CODE_CD, MEANING_TX, DESCRIPTION_TX FROM dbo.REF_CODE AS RC WITH(NOLOCK) WHERE DOMAIN_CD = @REF_DOM_COLLAT_STAT
	 UNION ALL
	 Select DOMAIN_CD, CODE_CD, MEANING_TX, DESCRIPTION_TX FROM dbo.REF_CODE AS RC WITH(NOLOCK) WHERE DOMAIN_CD = @REF_DOM_SECOND_CLASS
	 UNION ALL
	 Select DOMAIN_CD, CODE_CD, MEANING_TX, DESCRIPTION_TX FROM dbo.REF_CODE RC WITH(NOLOCK) WHERE DOMAIN_CD = @REF_DOM_RCOV_STAT
	 UNION ALL
	 Select DOMAIN_CD, CODE_CD, MEANING_TX, DESCRIPTION_TX FROM dbo.REF_CODE RC WITH(NOLOCK) WHERE DOMAIN_CD = @REF_DOM_RCOV_INS_STAT
	 UNION ALL
	 Select DOMAIN_CD, CODE_CD, MEANING_TX, DESCRIPTION_TX FROM dbo.REF_CODE RC WITH(NOLOCK) WHERE DOMAIN_CD = @REF_DOM_RCOV_INS_SUB_STAT
)

,FORCE_PLACED_CERT_REQUIRED_COVERAGE_RELATE_CTE AS(
	SELECT FPCRC_RELATE.* FROM dbo.FORCE_PLACED_CERT_REQUIRED_COVERAGE_RELATE AS FPCRC_RELATE
	WHERE FPCRC_RELATE.PURGE_DT IS NULL
)

,FINANCIAL_TXN_CTE AS(
	SELECT FT.* FROM dbo.FINANCIAL_TXN AS FT
	WHERE FT.PURGE_DT IS NULL
)

,FINANCIAL_TXN_DETAIL_CTE AS(
	SELECT FTD.* FROM FINANCIAL_TXN AS FT
	JOIN dbo.FINANCIAL_TXN_DETAIL AS FTD ON FTD.FINANCIAL_TXN_ID = FT.ID
	WHERE FT.PURGE_DT IS NULL
	AND FTD.PURGE_DT IS NULL
)

Insert into #tmptable (
LOAN_BRANCHCODE_TX, LOAN_DIVISIONCODE_TX, LOAN_TYPE_TX, REQUIREDCOVERAGE_CODE_TX, REQUIREDCOVERAGE_TYPE_TX, LOAN_NUMBER_TX, LOAN_NUMBERSORT_TX,
--LOAN
LOAN_EFFECTIVE_DT, LOAN_MATURITY_DT, LOAN_BALANCE_NO, LOAN_OFFICERCODE_TX, LOAN_CREDITSCORECODE_TX,
--LENDER
LOAN_LENDERCODE_TX, LENDER_NAME_TX,
--COLLATERAL
COLLATERAL_NUMBER_NO, 
COLLATERAL_CODE_TX, 
LENDER_COLLATERAL_CODE_TX,
PURPOSE_CODE_TX,
--OWNER
OWNER_LASTNAME_TX, OWNER_FIRSTNAME_TX, OWNER_MIDDLEINITIAL_TX,
OWNER_LINE1_TX, OWNER_LINE2_TX, OWNER_STATE_TX, OWNER_CITY_TX, OWNER_ZIP_TX,
--PROPERTY
COLLATERAL_YEAR_TX, COLLATERAL_MAKE_TX, COLLATERAL_MODEL_TX, COLLATERAL_VIN_TX, COLLATERAL_EQUIP_TX, 
COLLATERAL_LINE1_TX, COLLATERAL_LINE2_TX, COLLATERAL_STATE_TX, COLLATERAL_CITY_TX, COLLATERAL_ZIP_TX, PROPERTY_TYPE_CD,
--COVERAGE
COVERAGE_STATUS_TX,
--CPI
INSCOMPANY_NAME_TX, INSCOMPANY_POLICY_NO, INSCOMPANY_EFF_DT, INSCOMPANY_EFFDTSORT_TX, INSCOMPANY_EXP_DT, INSCOMPANY_CAN_DT, INSCOMPANY_EXPCXL_DT, 
INSCOMPANY_ISSUE_DT, CPI_QUOTE_TERM_NO, CPI_ISSUEDPREMIUM_AMOUNT_NO, CPI_CANCELLEDPREMIUM_AMOUNT_NO, CPI_HOLD_IN ,
--IDs, STATUS
LOAN_ID, COLLATERAL_ID, PROPERTY_ID, REQUIREDCOVERAGE_ID, 
LOAN_STATUSCODE, LOAN_STATUSMEANING_TX, COLLATERAL_STATUSCODE, COLLATERAL_STATUSMEANING_TX,
REQUIREDCOVERAGE_STATUSCODE, REQUIREDCOVERAGE_STATUSMEANING_TX, REQUIREDCOVERAGE_SUBSTATUSCODE,
REQUIREDCOVERAGE_INSSTATUSCODE, REQUIREDCOVERAGE_INSSTATUSMEANING_TX,
REQUIREDCOVERAGE_INSSUBSTATUSCODE, REQUIREDCOVERAGE_INSSUBSTATUSMEANING_TX,
[PROPERTY_DESCRIPTION], [ISS_REASON_TX], [INS_CXL_DT], [I_TOT_PRM], [PI_TOT_PRM], [C_TOT_PRM], [PC_TOT_PRM], CPI_ISSUEPAID_DT, [OWNER_NAME], 
[LOAN_LENDERNAME_TX], [INS_EXP_DT_RANGE], [INS_ISS_DT_RANGE], [PRIOR_CPI_CNT_NO], [FPC_LOAN_ID], [INS_PRINT_DT],
[LOAN_CONTRACT_TYPE_TX], [LATEST_CPI])

Select (CASE when L.BRANCH_CODE_TX is null or L.BRANCH_CODE_TX = '' then 'No Branch' else L.BRANCH_CODE_TX END) as LOAN_BRANCHCODE_TX,
	   CASE WHEN ISNULL(L.DIVISION_CODE_TX,'') = ''
			THEN '0'
			ELSE L.DIVISION_CODE_TX
	   END AS [LOAN_DIVISIONCODE_TX],
	   ISNULL(RC_DIVISION.DESCRIPTION_TX,RC_SC.DESCRIPTION_TX) AS [LOAN_TYPE_TX],
	   RC.TYPE_CD as REQUIREDCOVERAGE_CODE_TX,
	   RC_COVERAGETYPE.MEANING_TX as REQUIREDCOVERAGE_TYPE_TX,
--LOAN
	   L.NUMBER_TX AS LOAN_NUMBER_TX, 
	   SUBSTRING(@FillerZero, 1, 18 - len(L.NUMBER_TX)) + CAST(L.NUMBER_TX AS nvarchar(18)) AS LOAN_NUMBERSORT_TX,
       L.EFFECTIVE_DT AS LOAN_EFFECTIVE_DT, 
       L.MATURITY_DT AS LOAN_MATURITY_DT, 
       C.LOAN_BALANCE_NO AS LOAN_BALANCE_NO, 
       L.OFFICER_CODE_TX AS LOAN_OFFICERCODE_TX, 
	   L.CREDIT_SCORE_CD as [LOAN_CREDITSCORECODE_TX],
--LENDER
	   LND.CODE_TX AS LOAN_LENDERCODE_TX, 
	   LND.NAME_TX AS LENDER_NAME_TX,
--COLLATERAL
	   C.COLLATERAL_NUMBER_NO AS COLLATERAL_NUMBER_NO,
	   CC.CODE_TX as COLLATERAL_CODE_TX,
	   C.LENDER_COLLATERAL_CODE_TX AS LENDER_COLLATERAL_CODE_TX,
	   C.PURPOSE_CODE_TX AS PURPOSE_CODE_TX,
--OWNER
       O.LAST_NAME_TX AS OWNER_LASTNAME_TX, 
       O.FIRST_NAME_TX AS OWNER_FIRSTNAME_TX, 
       O.MIDDLE_INITIAL_TX AS OWNER_MIDDLEINITIAL_TX,
       AO.LINE_1_TX as OWNER_LINE1_TX,
       AO.LINE_2_TX as OWNER_LINE2_TX,
       AO.STATE_PROV_TX as OWNER_STATE_TX,
       AO.CITY_TX as OWNER_CITY_TX,
       AO.POSTAL_CODE_TX as OWNER_ZIP_TX,
--PROPERTY
       P.YEAR_TX AS COLLATERAL_YEAR_TX, 
       P.MAKE_TX AS COLLATERAL_MAKE_TX, 
       P.MODEL_TX AS COLLATERAL_MODEL_TX, 
       P.VIN_TX AS COLLATERAL_VIN_TX, 
       P.DESCRIPTION_TX AS COLLATERAL_EQUIP_TX, 
       AM.LINE_1_TX as COLLATERAL_LINE1_TX,
       AM.LINE_2_TX as COLLATERAL_LINE2_TX,
       AM.STATE_PROV_TX as COLLATERAL_STATE_TX,
       AM.CITY_TX as COLLATERAL_CITY_TX,
       AM.POSTAL_CODE_TX as COLLATERAL_ZIP_TX,
	   RCA_PROP.VALUE_TX AS [PROPERTY_TYPE_CD],
--COVERAGE
	   CASE 
		 WHEN RC.NOTICE_DT is not null and RC.NOTICE_SEQ_NO > 0 
				THEN cast(RC.NOTICE_SEQ_NO as char(1)) +  ' ' + NRef.MEANING_TX + ' ' + CONVERT(nvarchar(10), RC.NOTICE_DT, 101) 
	   ELSE CASE 
		WHEN L.STATUS_CD in ('N','O','P') THEN LSRef.MEANING_TX
		WHEN C.STATUS_CD in ('R','S','X') THEN CSRef.MEANING_TX
		WHEN L.STATUS_CD = 'B' and C.STATUS_CD = 'Z' and RC.STATUS_CD in ('A','D') and RC.SUMMARY_STATUS_CD in ('A','N') 
				THEN LSRef.MEANING_TX + ' ' + CSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
		WHEN L.STATUS_CD = 'B' and C.STATUS_CD = 'Z' and RC.STATUS_CD in ('A','D') and RC.SUMMARY_STATUS_CD not in ('A','N') 
				THEN LSRef.MEANING_TX + ' ' + CSRef.MEANING_TX + ' ' + RCISSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
		WHEN L.STATUS_CD = 'B' and C.STATUS_CD = 'Z' and RC.STATUS_CD = 'T' and RC.SUMMARY_STATUS_CD in ('A','N') 
				THEN LSRef.MEANING_TX + ' ' + CSRef.MEANING_TX + ' ' + RCSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
		WHEN L.STATUS_CD = 'B' and C.STATUS_CD = 'Z' and RC.STATUS_CD = 'T' and RC.SUMMARY_STATUS_CD not in ('A','N') 
				THEN LSRef.MEANING_TX + ' ' + CSRef.MEANING_TX + ' ' + RCSRef.MEANING_TX + ' ' + RCISSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
		WHEN L.STATUS_CD = 'B' and C.STATUS_CD = 'Z' and RC.STATUS_CD not in ('A','D','T')
				THEN LSRef.MEANING_TX + ' ' + CSRef.MEANING_TX + ' ' + RCSRef.MEANING_TX
		WHEN C.STATUS_CD = 'Z' and RC.STATUS_CD in ('A','D') and RC.SUMMARY_STATUS_CD in ('A','N') 
				THEN CSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
		WHEN C.STATUS_CD = 'Z' and RC.STATUS_CD in ('A','D') and RC.SUMMARY_STATUS_CD not in ('A','N') 
				THEN CSRef.MEANING_TX + ' ' + RCISSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
		WHEN C.STATUS_CD = 'Z' and RC.STATUS_CD = 'T' and RC.SUMMARY_STATUS_CD in ('A','N') 
				THEN CSRef.MEANING_TX + ' ' + RCSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
		WHEN C.STATUS_CD = 'Z' and RC.STATUS_CD = 'T' and RC.SUMMARY_STATUS_CD not in ('A','N') 
				THEN CSRef.MEANING_TX + ' ' + RCSRef.MEANING_TX + ' ' + RCISSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
		WHEN C.STATUS_CD = 'Z' and RC.STATUS_CD not in ('A','D','T')
				THEN CSRef.MEANING_TX + ' ' + RCSRef.MEANING_TX
		WHEN L.STATUS_CD = 'A' and RC.STATUS_CD in ('A','D') and RC.SUMMARY_STATUS_CD in ('A','N') 
				THEN RCISRef.MEANING_TX
		WHEN L.STATUS_CD = 'A' and RC.STATUS_CD in ('A','D') and RC.SUMMARY_STATUS_CD not in ('A','N') 
				THEN RCISSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
		WHEN L.STATUS_CD = 'A' and RC.STATUS_CD = 'T' and RC.SUMMARY_STATUS_CD in ('A','N') 
				THEN RCSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
		WHEN L.STATUS_CD = 'A' and RC.STATUS_CD = 'T' and RC.SUMMARY_STATUS_CD not in ('A','N') 
				THEN RCSRef.MEANING_TX + ' ' + RCISSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
		WHEN L.STATUS_CD = 'A' and RC.STATUS_CD not in ('A','D','T')
				THEN RCSRef.MEANING_TX
		WHEN L.STATUS_CD = 'B' and RC.STATUS_CD in ('A','D') and RC.SUMMARY_STATUS_CD in ('A','N') 
				THEN LSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
		WHEN L.STATUS_CD = 'B' and RC.STATUS_CD in ('A','D') and RC.SUMMARY_STATUS_CD not in ('A','N') 
				THEN LSRef.MEANING_TX + ' ' + RCISSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
		WHEN L.STATUS_CD = 'B' and RC.STATUS_CD = 'T' and RC.SUMMARY_STATUS_CD in ('A','N') 
				THEN LSRef.MEANING_TX + ' ' + RCSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
		WHEN L.STATUS_CD = 'B' and RC.STATUS_CD = 'T' and RC.SUMMARY_STATUS_CD not in ('A','N') 
				THEN LSRef.MEANING_TX + ' ' + RCSRef.MEANING_TX + ' ' + RCISSRef.MEANING_TX + ' ' + RCISRef.MEANING_TX
		WHEN L.STATUS_CD = 'B' and RC.STATUS_CD not in ('A','D','T')
				THEN LSRef.MEANING_TX + ' ' + RCSRef.MEANING_TX
	   END
	   END as COVERAGE_STATUS_TX,
--CPI
       CR.NAME_TX as INSCOMPANY_NAME_TX,
       FPC.NUMBER_TX as INSCOMPANY_POLICY_NO,
       FPC.EFFECTIVE_DT as INSCOMPANY_EFF_DT,
       CONVERT(nvarchar(8), FPC.EFFECTIVE_DT, 112) as INSCOMPANY_EFFDTSORT_TX,
       FPC.EXPIRATION_DT as INSCOMPANY_EXP_DT,
       FPC.CANCELLATION_DT as INSCOMPANY_CAN_DT,
       isnull(FPC.CANCELLATION_DT,FPC.EXPIRATION_DT) as INSCOMPANY_EXPCXL_DT,
       FPC.ISSUE_DT as INSCOMPANY_ISSUE_DT,
       CPQ.TERM_NO as CPI_QUOTE_TERM_NO,
       ISNULL(CD_I_PRM.AMOUNT_NO,0) as CPI_ISSUEDPREMIUM_AMOUNT_NO,
       ISNULL(CD_C_PRM.AMOUNT_NO,0) as CPI_CANCELLEDPREMIUM_AMOUNT_NO,
       FPC.HOLD_IN as CPI_HOLD_IN,
--IDs, STATUS
       L.ID as LOAN_ID,
       C.ID as COLLATERAL_ID,
       P.ID as PROPERTY_ID,
       RC.ID as REQUIREDCOVERAGE_ID,
       L.STATUS_CD as LOAN_STATUSCODE,
       LSRef.MEANING_TX as LOAN_STATUSMEANING_TX,
       C.STATUS_CD as COLLATERAL_STATUSCODE,
       CSRef.MEANING_TX as COLLATERAL_STATUSMEANING_TX,
       RC.STATUS_CD as REQUIREDCOVERAGE_STATUSCODE,
       RCSRef.MEANING_TX as REQUIREDCOVERAGE_STATUSMEANING_TX,
       RC.SUB_STATUS_CD as REQUIREDCOVERAGE_SUBSTATUSCODE,
       RC.SUMMARY_STATUS_CD as REQUIREDCOVERAGE_INSSTATUSCODE,
       RCISRef.MEANING_TX as REQUIREDCOVERAGE_INSSTATUSMEANING_TX,
       RC.SUMMARY_SUB_STATUS_CD as REQUIREDCOVERAGE_INSSUBSTATUSCODE,
       RCISSRef.MEANING_TX as REQUIREDCOVERAGE_INSSUBSTATUSMEANING_TX,

	   '' AS PROPERTY_DESCRIPTION,
	   ISNULL(CPA_I.REASON_CD,'') AS [ISS_REASON_TX],
	   CPA_C.CREATE_DT AS [INS_CXL_DT],
	   
	  ABS(ISNULL((SELECT SUM(ISNULL(FTXD.AMOUNT_NO,0)) FROM FINANCIAL_TXN_DETAIL_CTE FTXD JOIN FINANCIAL_TXN_CTE FTX ON FTXD.FINANCIAL_TXN_ID = FTX.ID WHERE FTX.FPC_ID = FPC.ID AND FTX.TXN_TYPE_CD = 'R' and FTXD.PURGE_DT IS NULL AND FTX.PURGE_DT IS NULL),0))  AS [I_TOT_PRM],
      ABS(ISNULL((SELECT SUM(ISNULL(FTXD.AMOUNT_NO,0)) FROM FINANCIAL_TXN_DETAIL_CTE FTXD JOIN FINANCIAL_TXN_CTE FTX ON FTXD.FINANCIAL_TXN_ID = FTX.ID WHERE FTX.FPC_ID = FPC.ID AND FTX.TXN_TYPE_CD = 'P' and FTXD.PURGE_DT IS NULL AND FTX.PURGE_DT IS NULL),0))  AS [PI_TOT_PRM],
      ABS(ISNULL((SELECT SUM(ISNULL(FTXD.AMOUNT_NO,0)) FROM FINANCIAL_TXN_DETAIL_CTE FTXD JOIN FINANCIAL_TXN_CTE FTX ON FTXD.FINANCIAL_TXN_ID = FTX.ID WHERE FTX.FPC_ID = FPC.ID AND FTX.TXN_TYPE_CD = 'C' and FTXD.PURGE_DT IS NULL AND FTX.PURGE_DT IS NULL),0))  AS [C_TOT_PRM],
	  ABS(ISNULL((SELECT SUM(ISNULL(FTXD.AMOUNT_NO,0)) FROM FINANCIAL_TXN_DETAIL_CTE FTXD JOIN FINANCIAL_TXN_CTE FTX ON FTXD.FINANCIAL_TXN_ID = FTX.ID WHERE FTX.FPC_ID = FPC.ID AND FTX.TXN_TYPE_CD = 'CP' and FTXD.PURGE_DT IS NULL AND FTX.PURGE_DT IS NULL),0))  AS [PC_TOT_PRM],

	  (SELECT MAX(TXN_DT) FROM FINANCIAL_TXN_CTE AS FT WHERE TXN_TYPE_CD = 'P' and PURGE_DT is null AND FT.FPC_ID = FPC.ID) AS CPI_ISSUEPAID_DT,
	  
      CASE  WHEN O.FIRST_NAME_TX IS NULL THEN O.LAST_NAME_TX ELSE RTRIM(O.LAST_NAME_TX + ', ' + ISNULL(O.FIRST_NAME_TX,'') + ' ' + ISNULL(O.MIDDLE_INITIAL_TX,'')) END AS [OWNER_NAME],
      LND.NAME_TX AS	[LOAN_LENDERNAME_TX],

CASE 
	WHEN DayDiff.NowToExp < 000 THEN '  Expired '
	WHEN DayDiff.NowToExp < 031 THEN ' 0-30 Days'
	WHEN DayDiff.NowToExp < 061 THEN '31-60 Days'
	WHEN DayDiff.NowToExp < 091 THEN '61-90 Days'
	WHEN DayDiff.NowToExp < 121 THEN '91-120 Days'
	ELSE 'Over 120 Days'
END AS [INS_EXP_DT_RANGE],
CASE
	WHEN DayDiff.EffToNow < 000 THEN ' Premature'
	WHEN DayDiff.EffToNow < 031 THEN ' 0-30 Days'
	WHEN DayDiff.EffToNow < 061 THEN '31-60 Days'
	WHEN DayDiff.EffToNow < 091 THEN '61-90 Days'
	WHEN DayDiff.EffToNow < 121 THEN '91-120 Days'
	ELSE 'Over 120 Days'
END AS [INS_ISS_DT_RANGE],
0 AS [PRIOR_CPI_CNT_NO],					
FPC.LOAN_ID AS [FPC_LOAN_ID],				 
RC.NOTICE_DT AS [INS_PRINT_DT],
L.CONTRACT_TYPE_CD AS [LOAN_CONTRACT_TYPE_TX],
0 AS [LATEST_CPI]          

from dbo.PROPERTY P 
Join dbo.COLLATERAL C on C.PROPERTY_ID = P.ID AND C.PURGE_DT IS NULL and C.PRIMARY_LOAN_IN = 'Y' 
Join dbo.LOAN L on L.ID = C.LOAN_ID and L.LENDER_ID = P.LENDER_ID AND L.PURGE_DT IS NULL
Join dbo.LENDER LND on LND.ID = L.LENDER_ID AND LND.PURGE_DT IS NULL

CROSS APPLY(
	SELECT
	 CpiCan = Cast(CASE WHEN @RealReportConfig = 'CPICAN' THEN 1 ELSE 0 END AS Bit)
	,CpiInfCall = Cast(CASE WHEN @ReportConfig = 'CPIINFCALL' THEN 1 ELSE 0 END AS Bit)
) AS Config

JOIN dbo.REQUIRED_COVERAGE RC on RC.PROPERTY_ID = P.ID AND RC.PURGE_DT IS NULL
LEFT JOIN dbo.COLLATERAL_CODE CC ON CC.ID = C.COLLATERAL_CODE_ID AND CC.PURGE_DT IS NULL
join FORCE_PLACED_CERT_REQUIRED_COVERAGE_RELATE_CTE FPCR on FPCR.REQUIRED_COVERAGE_ID = RC.ID AND FPCR.PURGE_DT IS NULL
Join dbo.FORCE_PLACED_CERTIFICATE FPC on FPC.ID = FPCR.FPC_ID and FPC.PURGE_DT IS NULL and ((FPC.ACTIVE_IN = 'Y' AND @RealReportConfig <> '') OR Config.CpiCan = 1)

CROSS APPLY(Select
 EffToNow = DateDiff(Day, FPC.EFFECTIVE_DT, GetDate())
,NowToExp = DateDiff(Day, GetDate(), FPC.EXPIRATION_DT)
) As DayDiff

Join dbo.OWNER_LOAN_RELATE OL on OL.LOAN_ID = L.ID AND OL.PRIMARY_IN = 'Y' AND OL.PURGE_DT IS NULL
Join [OWNER] O on O.ID = OL.OWNER_ID AND O.PURGE_DT IS NULL
left Join dbo.[OWNER_ADDRESS] AO on AO.ID = O.ADDRESS_ID AND AO.PURGE_DT IS NULL
left Join dbo.[OWNER_ADDRESS] AM on AM.ID = P.ADDRESS_ID AND AM.PURGE_DT IS NULL

left Join dbo.CARRIER CR on CR.ID = FPC.CARRIER_ID AND CR.PURGE_DT IS NULL
left Join dbo.CPI_QUOTE CPQ ON CPQ.ID = FPC.CPI_QUOTE_ID and RC.SUMMARY_SUB_STATUS_CD = 'C' AND CPQ.PURGE_DT IS NULL

LEFT JOIN dbo.CPI_ACTIVITY CPA_I ON CPA_I.CPI_QUOTE_ID = CPQ.ID AND CPA_I.TYPE_CD = 'I'	AND CPA_I.PURGE_DT IS NULL
LEFT JOIN dbo.CERTIFICATE_DETAIL CD_I_PRM ON CD_I_PRM.CPI_ACTIVITY_ID = CPA_I.ID AND CD_I_PRM.TYPE_CD = 'PRM' AND CD_I_PRM.PURGE_DT IS NULL

LEFT JOIN dbo.CPI_ACTIVITY CPA_C ON CPA_C.CPI_QUOTE_ID = CPQ.ID AND CPA_C.TYPE_CD = 'C'	AND CPA_C.PURGE_DT IS NULL
LEFT JOIN dbo.CERTIFICATE_DETAIL CD_C_PRM ON CD_C_PRM.CPI_ACTIVITY_ID = CPA_C.ID AND CD_C_PRM.TYPE_CD = 'PRM' AND CD_C_PRM.PURGE_DT IS NULL
 
left Join REF_CODE_CTE NRef on NRef.DOMAIN_CD = @REF_DOM_NOTICE_TYPE and NRef.CODE_CD = RC.NOTICE_TYPE_CD 
left Join REF_CODE_CTE LSRef on LSRef.DOMAIN_CD = @REF_DOM_LOAN_STAT and LSRef.CODE_CD = L.STATUS_CD 
left Join REF_CODE_CTE CSRef on CSRef.DOMAIN_CD = @REF_DOM_COLLAT_STAT and CSRef.CODE_CD = C.STATUS_CD 
left Join REF_CODE_CTE RCSRef on RCSRef.DOMAIN_CD = @REF_DOM_RCOV_STAT and RCSRef.CODE_CD = RC.STATUS_CD 
left Join REF_CODE RCISRef on RCISRef.DOMAIN_CD = @REF_DOM_RCOV_INS_STAT and RCISRef.CODE_CD = RC.SUMMARY_STATUS_CD 
left Join REF_CODE RCISSRef on RCISSRef.DOMAIN_CD = @REF_DOM_RCOV_INS_SUB_STAT and RCISSRef.CODE_CD = RC.SUMMARY_SUB_STATUS_CD 
left Join REF_CODE_CTE RC_DIVISION on RC_DIVISION.DOMAIN_CD = @REF_DOM_CONTRACT_TYPE and RC_DIVISION.CODE_CD = L.DIVISION_CODE_TX
left Join REF_CODE_CTE RC_COVERAGETYPE on RC_COVERAGETYPE.DOMAIN_CD = @REF_DOM_COV and RC_COVERAGETYPE.CODE_CD = RC.TYPE_CD 
left Join REF_CODE_CTE RC_SC on RC_SC.DOMAIN_CD = @REF_DOM_SECOND_CLASS AND CC.SECONDARY_CLASS_CD = RC_SC.CODE_CD
left Join REF_CODE_ATTRIBUTE RCA_PROP on RC_SC.DOMAIN_CD = RCA_PROP.DOMAIN_CD and RC_SC.CODE_CD = RCA_PROP.REF_CD and RCA_PROP.ATTRIBUTE_CD = 'PropertyType'

OUTER APPLY(
	SELECT [Count] = Count(*) FROM FORCE_PLACED_CERT_REQUIRED_COVERAGE_RELATE_CTE RL where REQUIRED_COVERAGE_ID = RC.ID AND RL.PURGE_DT IS NULL and RC.SUMMARY_SUB_STATUS_CD = 'C'
) AS RL

where 
(Config.CpiInfCall = 1 or (L.RECORD_TYPE_CD = 'G' and P.RECORD_TYPE_CD = 'G' and RC.RECORD_TYPE_CD = 'G' and
L.EXTRACT_UNMATCH_COUNT_NO = 0 and C.EXTRACT_UNMATCH_COUNT_NO = 0 and
L.STATUS_CD != 'U' and C.STATUS_CD != 'U')) and
P.PURGE_DT IS NULL AND

--((select count(*) from FORCE_PLACED_CERT_REQUIRED_COVERAGE_RELATE_CTE RL where REQUIRED_COVERAGE_ID = RC.ID AND RL.PURGE_DT IS NULL and RC.SUMMARY_SUB_STATUS_CD = 'C') < 2 or
--	(select count(*) from FORCE_PLACED_CERT_REQUIRED_COVERAGE_RELATE_CTE RL where REQUIRED_COVERAGE_ID = RC.ID AND RL.PURGE_DT IS NULL and RC.SUMMARY_SUB_STATUS_CD = 'C') >= 2 and FPC.ID is not null) and
1 = CASE
	WHEN RC.SUMMARY_SUB_STATUS_CD <> 'C' THEN 1
	
	WHEN FPC.ID IS NOT NULL AND RL.[Count] > 1 THEN 1
	
	WHEN FPC.ID IS NULL AND RL.[Count] < 2 THEN 1

	ELSE 0
END AND

P.LENDER_ID = @LenderID
and
(L.BRANCH_CODE_TX IN (SELECT STRVALUE FROM @BranchTable) or @Branch = '1' or @Branch = '' or @Branch is NULL OR @Branch = 'ALL')
and
(L.DIVISION_CODE_TX = @Division OR @Division = '1' OR @Division  = '' OR @Division is NULL 
OR ((@Division in ('3','8') and L.DIVISION_CODE_TX not in ('3','8') and RCA_PROP.VALUE_TX in ('VEH','BOAT'))
OR (@Division in ('7','9') and L.DIVISION_CODE_TX not in ('7','9') and RCA_PROP.VALUE_TX in ('EQ'))
OR (@Division in ('4','10') and L.DIVISION_CODE_TX not in ('4','10') and RCA_PROP.VALUE_TX not in ('VEH','BOAT','EQ'))))
and
(RC.TYPE_CD = @Coverage or @Coverage = '1' or @Coverage is NULL)
and 
(L.STATUS_CD = @LoanStatus or @LoanStatus is NULL or @LoanStatus = '')
and 
(C.STATUS_CD = @CollateralStatus or @CollateralStatus is NULL or @CollateralStatus = '')
and 
(RC.STATUS_CD = @RequiredCoverageStatus or @RequiredCoverageStatus is NULL or @RequiredCoverageStatus = '')
and 
(RC.SUMMARY_STATUS_CD = @SummaryStatus or @SummaryStatus is NULL or @SummaryStatus = '')
and 
(RC.SUMMARY_SUB_STATUS_CD = @SummarySubStatus or @SummarySubStatus is NULL or @SummarySubStatus = '')

OPTION(RECOMPILE)
;

IF @DEBUGGING = 'T'
BEGIN
	SELECT @FilterByCode AS FBC, @FilterBySQL As FBS
	SELECT COUNT(*) AS PRE_CNT FROM #tmptable
END

Declare @sqlstring as nvarchar(1000)
If isnull(@FilterBySQL,'') <> '' 
Begin
  Select * into #t1 from #tmptable 
  truncate table #tmptable

  Set @sqlstring = N'Insert into #tmpTable
                     Select * from dbo.#t1 where ' + @FilterBySQL
  --print @sqlstring
  EXECUTE sp_executesql @sqlstring
End

/*
--update [PRIOR_CPI_CNT_NO] using CURSOR:
	DECLARE @loan_id bigint, @number_tx nvarchar(18), @issue_dt datetime, @type_cd nvarchar(30), @prior_cpi_cnt_no int
	DECLARE prior_cpi_cursor CURSOR FOR

	SELECT [FPC_LOAN_ID], [INSCOMPANY_POLICY_NO], [INSCOMPANY_ISSUE_DT], [REQUIREDCOVERAGE_CODE_TX], [PRIOR_CPI_CNT_NO] 
	FROM #tmptable
	FOR UPDATE OF [PRIOR_CPI_CNT_NO];

	OPEN prior_cpi_cursor

	FETCH NEXT FROM prior_cpi_cursor INTO @loan_id, @number_tx, @issue_dt, @type_cd, @prior_cpi_cnt_no

	WHILE @@FETCH_STATUS = 0
	BEGIN
		UPDATE #tmptable SET [PRIOR_CPI_CNT_NO] = ISNULL((
		SELECT COUNT(*) 
		FROM dbo.FORCE_PLACED_CERTIFICATE FPC
		JOIN dbo.FORCE_PLACED_CERT_REQUIRED_COVERAGE_RELATE FPCR ON FPCR.FPC_ID = FPC.ID and FPCR.PURGE_DT IS NULL
		JOIN dbo.REQUIRED_COVERAGE RC ON RC.ID = FPCR.REQUIRED_COVERAGE_ID AND RC.SUMMARY_SUB_STATUS_CD = 'C' and RC.PURGE_DT IS NULL
		WHERE FPC.PURGE_DT IS NULL
		AND FPC.LOAN_ID = @loan_id
		AND FPC.NUMBER_TX <> @number_tx 
		AND FPC.ACTIVE_IN = 'N'
		AND FPC.ISSUE_DT < @issue_dt
		AND RC.TYPE_CD = @type_cd
		),0) WHERE current of prior_cpi_cursor

		FETCH NEXT FROM prior_cpi_cursor INTO @loan_id, @number_tx, @issue_dt, @type_cd, @prior_cpi_cnt_no

	END
	CLOSE prior_cpi_cursor
	DEALLOCATE prior_cpi_cursor
*/
/*
--update [PRIOR_CPI_CNT_NO] using UPDATE FROM:
*/
	update tt
	set PRIOR_CPI_CNT_NO = ISNULL(PRIOR_CPI.CNT_NO,0)
	from #tmptable tt
	cross apply
	(
		SELECT CNT_NO = COUNT(*) 
		FROM dbo.FORCE_PLACED_CERTIFICATE FPC
		JOIN dbo.FORCE_PLACED_CERT_REQUIRED_COVERAGE_RELATE FPCR ON FPCR.FPC_ID = FPC.ID and FPCR.PURGE_DT IS NULL
		JOIN dbo.REQUIRED_COVERAGE RC ON RC.ID = FPCR.REQUIRED_COVERAGE_ID AND RC.SUMMARY_SUB_STATUS_CD = 'C' and RC.PURGE_DT IS NULL
		WHERE FPC.PURGE_DT IS NULL
		AND FPC.LOAN_ID = tt.LOAN_ID
		AND FPC.NUMBER_TX <> tt.INSCOMPANY_POLICY_NO
		AND FPC.ACTIVE_IN = 'N'
		AND FPC.ISSUE_DT < tt.INSCOMPANY_ISSUE_DT
		AND RC.TYPE_CD = tt.REQUIREDCOVERAGE_CODE_TX
	) PRIOR_CPI
	where ISNULL(PRIOR_CPI_CNT_NO,0)=0

IF @DEBUGGING = 'T'
BEGIN
	SELECT COUNT(*) AS POST_CNT FROM #tmptable
END

IF ISNULL(@GroupBySQL,'') <> ''
BEGIN
	Set @sqlstring = N'Update #tmpTable Set [REPORT_GROUPBY_TX] = ' + @GroupBySQL
	EXECUTE sp_executesql @sqlstring
END

IF @DEBUGGING = 'T'
BEGIN
	SELECT @SortByCode AS SBC, @SortBySQL AS SBS
END

IF ISNULL(@SortBySQL,'') <> ''
BEGIN
	Set @sqlstring = N'Update #tmpTable Set [REPORT_SORTBY_TX] = ' + @SortBySQL
	EXECUTE sp_executesql @sqlstring
END

If isnull(@HeaderTx,'') <> '' 
Begin
	Set @sqlstring = N'Update #tmpTable Set [REPORT_HEADER_TX] = ' + @HeaderTx
	EXECUTE sp_executesql @sqlstring
End

If isnull(@FooterTx,'') <> '' 
Begin
	Set @sqlstring = N'Update #tmpTable Set [REPORT_FOOTER_TX] = ' + @FooterTx
	EXECUTE sp_executesql @sqlstring
End

SELECT @RecordCount = COUNT(*) from #tmptable
--print @RecordCount
IF @ReportConfig LIKE 'MULTICPI%'		--MULTICPI_6426
BEGIN
	IF @DEBUGGING = 'T'
	BEGIN
		SELECT COUNT(*) AS PREMCPI_CNT,'LATEST_CPI = 1' FROM #tmptable WHERE LATEST_CPI = 1
		SELECT COUNT(*) AS PREMCPI_CNT,'LATEST_CPI <> 1' FROM #tmptable WHERE NOT(LATEST_CPI = 1)
	END
	
/*
--update LATEST_CPI using tmpMultiCPI:
*/
	CREATE Table #tmpMultiCPI
	(
	[LOAN_NUMBER_TX] [nvarchar](18) NULL,
	[INSCOMPANY_POLICY_NO] [nvarchar](18) NULL,
	[LOAN_LENDERCODE_TX] [nvarchar](10) NULL,
	[LOAN_BRANCHCODE_TX] [nvarchar](10) NULL,
	[LOAN_CONTRACT_TYPE_TX]	[nvarchar](30) NULL,	
	[INSCOMPANY_ISSUE_DT] [datetime2](7) NULL,
	[INSCOMPANY_EFF_DT] [datetime2](7) NULL,
	[INSCOMPANY_CAN_DT] [datetime2](7) NULL
	)

	INSERT INTO #tmpMultiCPI
	(
	[LOAN_NUMBER_TX] , [INSCOMPANY_POLICY_NO] , [LOAN_LENDERCODE_TX] , [LOAN_BRANCHCODE_TX] , [LOAN_CONTRACT_TYPE_TX] , 
	[INSCOMPANY_ISSUE_DT] , [INSCOMPANY_EFF_DT] , [INSCOMPANY_CAN_DT] 
	)
	SELECT [LOAN_NUMBER_TX] , [INSCOMPANY_POLICY_NO] , [LOAN_LENDERCODE_TX] , [LOAN_BRANCHCODE_TX] , [LOAN_CONTRACT_TYPE_TX] ,
	[INSCOMPANY_ISSUE_DT] , [INSCOMPANY_EFF_DT] , [INSCOMPANY_CAN_DT] 
	FROM #tmptable WHERE [LOAN_NUMBER_TX] IN 
	(
	SELECT [LOAN_NUMBER_TX] FROM #tmptable
	GROUP BY [LOAN_LENDERCODE_TX] , [LOAN_BRANCHCODE_TX] , [LOAN_CONTRACT_TYPE_TX] , [LOAN_NUMBER_TX] 
	HAVING COUNT(*) > 2
	)

	UPDATE #tmptable SET [LATEST_CPI] = 1 
	FROM #tmptable JOIN 
	(
	select [LOAN_LENDERCODE_TX] , [LOAN_BRANCHCODE_TX] , [LOAN_CONTRACT_TYPE_TX] , [INSCOMPANY_POLICY_NO] ,
	MAX([INSCOMPANY_ISSUE_DT]) AS [INSCOMPANY_ISSUE_DT] FROM #tmpMultiCPI
	group by [LOAN_LENDERCODE_TX] , [LOAN_BRANCHCODE_TX] , [LOAN_CONTRACT_TYPE_TX] , [INSCOMPANY_POLICY_NO]
	) MULTI ON MULTI.[LOAN_LENDERCODE_TX] = #tmptable.[LOAN_LENDERCODE_TX]
	AND MULTI.[LOAN_BRANCHCODE_TX] = #tmptable.[LOAN_BRANCHCODE_TX]
	AND MULTI.[LOAN_CONTRACT_TYPE_TX] = #tmptable.[LOAN_CONTRACT_TYPE_TX]
	AND MULTI.[INSCOMPANY_POLICY_NO] = #tmptable.[INSCOMPANY_POLICY_NO]
	AND DATEDIFF(DAY , MULTI.[INSCOMPANY_ISSUE_DT] , #tmptable.[INSCOMPANY_ISSUE_DT] ) = 0
	
	if @Debug>1
	begin
		select 'latest_cpi=1'='between UPDATEs',tt.* from #tmptable tt where latest_cpi=1
	end

	UPDATE #tmptable SET LATEST_CPI = 0 WHERE LATEST_CPI = 1 AND
	NOT ((INSCOMPANY_CAN_DT IS NULL) OR (INSCOMPANY_CAN_DT IS NOT NULL AND (C_TOT_PRM <> PC_TOT_PRM)))
	
	SELECT @RecordCount = COUNT(*) from #tmptable WHERE LATEST_CPI = 1

	IF @DEBUGGING = 'T'
	BEGIN
		SELECT COUNT(*) AS POSTCPI_CNT FROM #tmptable WHERE LATEST_CPI = 1 
	END
END

IF @Report_History_ID IS NOT NULL
BEGIN

  Update [UNITRAC-REPORTS].[UNITRAC].DBO.REPORT_HISTORY_NOXML
  Set RECORD_COUNT_NO = @RecordCount
  ,UPDATE_DT = GetDate()
  where ID = @Report_History_ID
    
END

IF @Debug>1
BEGIN
	Select '@Debug'=@Debug
	,REPORT_SORTBY_TX
	,tt.LATEST_CPI
	,tt.PRIOR_CPI_CNT_NO
	,tt.INSCOMPANY_ISSUE_DT
	,tt.INSCOMPANY_CAN_DT
	,tt.LOAN_ID
	,tt.LOAN_NUMBER_TX
	,tt.LOAN_BRANCHCODE_TX
	,tt.REQUIREDCOVERAGE_CODE_TX
	,tt.INSCOMPANY_POLICY_NO
	,tt.C_TOT_PRM
	,tt.PC_TOT_PRM
	,*
	from #tmptable tt
	Order By
	 tt.LOAN_NUMBER_TX
	,tt.LOAN_BRANCHCODE_TX
	,tt.INSCOMPANY_POLICY_NO
	,Case
		When @ReportConfig LIKE 'MULTICPI%' AND (LATEST_CPI = 1 OR [PRIOR_CPI_CNT_NO] < 1)
		Then 1

		Else 2
	 End
END

IF @ReportConfig NOT LIKE 'MULTICPI%'		
BEGIN
	Select * from #tmptable 
END
ELSE
BEGIN
	SELECT * FROM #tmptable WHERE LATEST_CPI = 1 OR [PRIOR_CPI_CNT_NO] < 1
END
END


GO

