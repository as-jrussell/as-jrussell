USE UniTrac

/*
select * from WORK_ITEM where ID IN (35916577) AND WORKFLOW_DEFINITION_ID = 9

SELECT *
FROM PROCESS_LOG
WHERE ID IN (40345316)

*/


	   

--- GET THE EVENTS CREATED DURING THAT CYCLE
---- DROP TABLE #TMPPLI
select pli.RELATE_ID , pli.RELATE_TYPE_CD, 
	ee.TYPE_CD , ee.ID as EVALUATION_EVENT_ID ,
	CONVERT(VARCHAR(10), pl.START_DT , 101 ) AS CYCLE_START_DT , ee.REQUIRED_COVERAGE_ID	
	INTO #TMPPLI
	from process_log_item pli
	  inner join process_log pl on pl.id = pli.process_log_id 
	  inner join evaluation_event ee on ee.id = pli.evaluation_event_id
	  inner join work_item wi on wi.relate_id = pl.id and wi.relate_type_cd = 'Osprey.ProcessMgr.ProcessLog'
	where wi.id = ''
	  and ((((pli.relate_type_cd = 'allied.unitrac.Forceplacedcertificate' and ee.TYPE_CD = 'ISCT') or
			   (pli.relate_type_cd = 'Allied.UniTrac.Notice') or		   
			   (pli.relate_type_cd = 'allied.unitrac.Forceplacedcertificate' and ee.TYPE_CD = 'PRNT') or
			   (pli.relate_type_cd = 'Allied.UniTrac.NoticeInteraction') or
			   (pli.relate_type_cd = 'Allied.UniTrac.RequiredCoverage' and ee.TYPE_CD = 'DFLT')  
		      )
		   and pli.STATUS_CD = 'COMP'
		   and ee.STATUS_CD = 'COMP') OR
		    ( pli.relate_type_cd = 'Allied.UniTrac.Workflow.OutboundCallWorkItem' AND
		      pli.STATUS_CD = 'COMP' and ee.STATUS_CD = 'PEND'  
		    )OR
                ( (pli.relate_type_cd = 'Allied.UniTrac.Notice') AND 
                    pli.STATUS_CD = 'COMP' AND  ee.STATUS_CD = 'PEND' AND
                    ee.EVENT_SEQUENCE_ID IS NULL)
		   )
		   ORDER BY pli.RELATE_TYPE_CD
---- 148

SELECT *
FROM #TMPPLI


--- GET COUNT
SELECT RELATE_TYPE_CD , COUNT(*) AS CNT
FROM #TMPPLI
GROUP BY RELATE_TYPE_CD
/*
RELATE_TYPE_CD	CNT
Allied.UniTrac.ForcePlacedCertificate	2
Allied.UniTrac.Notice	905
*/


--- GET NOTICE SEQUENCE COUNT
select ES.NOTICE_SEQ_NO ,  COUNT(*) AS CNT 
from #tmpPLI join EVALUATION_EVENT ee
on ee.ID = #tmpPLI.EVALUATION_EVENT_ID
join EVENT_SEQUENCE es on es.ID = ee.EVENT_SEQUENCE_ID
where #tmpPLI.RELATE_TYPE_CD = 'Allied.UniTrac.Notice'
group by ES.NOTICE_SEQ_NO
/*
NOTICE_SEQ_NO	CNT
1	885
2	14
*/
--148


---- VERIFY NOTICE
---- 1ST NOTICE - NOTICE CYCLE WILL BE CLEARED (FROM NOTICE_DT ---->)- EXCLUDE CCU/CCF/BI
select ee.REQUIRED_COVERAGE_ID , evtseq.NOTICE_SEQ_NO , evtseq.NOTICE_TYPE_CD , 
  NOTICE_DT , rc.NOTICE_SEQ_NO , rc.NOTICE_TYPE_CD , rc.LAST_SEQ_CONTAINER_ID , 
  rc.LAST_EVENT_SEQ_ID , rc.LAST_EVENT_DT , rc.CPI_QUOTE_ID  
  from EVALUATION_EVENT ee join #tmpPLI
on #TMPPLI.EVALUATION_EVENT_ID = ee.ID
and #TMPPLI.Relate_Type_cd = 'Allied.UniTrac.Notice'
join REQUIRED_COVERAGE rc on rc.ID = ee.REQUIRED_COVERAGE_ID
join EVENT_SEQUENCE evtseq on evtseq.id = ee.EVENT_SEQUENCE_ID
where EVENT_SEQUENCE_ID is not null
and  evtseq.NOTICE_SEQ_NO = 1 



---- VERIFY NOTICE
---- NTC SEQ > 1ST NOTICE - SHOULD BE SET TO PREVIOUS NOTICE
select ee.REQUIRED_COVERAGE_ID , evtseq.NOTICE_SEQ_NO , evtseq.NOTICE_TYPE_CD , rc.SUMMARY_STATUS_CD, rc.SUMMARY_SUB_STATUS_CD, evtseq.QUOTE_PREMIUM_IN,
  NOTICE_DT , rc.NOTICE_SEQ_NO , rc.NOTICE_TYPE_CD , rc.LAST_SEQ_CONTAINER_ID , 
  rc.LAST_EVENT_SEQ_ID , rc.LAST_EVENT_DT , rc.CPI_QUOTE_ID  
  from EVALUATION_EVENT ee join #tmpPLI
on #TMPPLI.EVALUATION_EVENT_ID = ee.ID
and #TMPPLI.Relate_Type_cd = 'Allied.UniTrac.Notice'
join REQUIRED_COVERAGE rc on rc.ID = ee.REQUIRED_COVERAGE_ID
join EVENT_SEQUENCE evtseq on evtseq.id = ee.EVENT_SEQUENCE_ID
where EVENT_SEQUENCE_ID is not null
and  evtseq.NOTICE_SEQ_NO > 1  

---IF NOTICE NOT ROLLED BACK TO PREV AND IN FORCE, VERIFY INS ADDED AFTER CYCLE DATE IN UI
SELECT L.NUMBER_TX,RC.ID,RC.SUMMARY_STATUS_CD,RC.SUMMARY_SUB_STATUS_CD,*
FROM LOAN L
INNER JOIN COLLATERAL CL ON CL.LOAN_ID = L.ID
INNER JOIN REQUIRED_COVERAGE RC ON RC.PROPERTY_ID = CL.PROPERTY_ID
AND RC.ID IN (SELECT REQUIRED_COVERAGE_ID
FROM #TMPPLI)
--5

--427632-4	24836959



---- CHECK FOR CCU/CCF/BI - SHOULD BE SET TO PEND IN EVALUATION EVENT
select ntc.TYPE_CD ,   ee.* ,   * 
from #tmpPLI join EVALUATION_EVENT ee
on ee.ID = #tmpPLI.EVALUATION_EVENT_ID
join NOTICE ntc on ntc.ID = ee.RELATE_ID
where #tmpPLI.RELATE_TYPE_CD = 'Allied.UniTrac.Notice'
and EVENT_SEQUENCE_ID is null
--0


---- CHECK THE NOTICES & RELATES ARE PURGED
select NTC.PURGE_DT , NTC.UPDATE_USER_TX ,  NTC.CPI_QUOTE_ID, REL.PURGE_DT , REL.UPDATE_USER_TX , #tmpPLI.*
from EVALUATION_EVENT ee join #tmpPLI
on #tmpPLI.EVALUATION_EVENT_ID = ee.ID
and #tmpPLI.Relate_Type_cd = 'Allied.UniTrac.Notice'
join NOTICE ntc on ntc.ID = #tmpPLI.RELATE_ID
JOIN NOTICE_REQUIRED_COVERAGE_RELATE REL ON REL.NOTICE_ID = ntc.ID
--760

--- CHECK IH BEING PURGED FOR CPI QUOTE - ***GENERALLY 1ST NOTICES QUOTE*** (VERIFY 2ND NOTICES WITH evtseq.QUOTE_PREMIUM_IN)
select IH.PURGE_DT , IH.UPDATE_USER_TX , NTC.ID AS NOTICE_ID , NTC.SEQUENCE_NO  , NTC.TYPE_CD , ih.*
from EVALUATION_EVENT ee join #tmpPLI
on #tmpPLI.EVALUATION_EVENT_ID = ee.ID
and #tmpPLI.Relate_Type_cd = 'Allied.UniTrac.Notice'
join NOTICE ntc on ntc.ID = #tmpPLI.RELATE_ID
join INTERACTION_HISTORY ih on ih.TYPE_CD = 'CPI'
and ih.RELATE_CLASS_TX = 'Allied.UniTrac.CPIQuote'
and ih.RELATE_ID = ntc.CPI_QUOTE_ID
ORDER BY NTC.SEQUENCE_NO
--646

--- CHECK THE NOTICES IN DC PURGED
select   distinct dc.ID , dc.PURGE_DT , dc.UPDATE_USER_TX , dc.RELATE_ID AS NOTICE_ID
from DOCUMENT_CONTAINER dc join #tmpPLI on #tmpPLI.RELATE_ID = dc.RELATE_ID
and dc.RELATE_CLASS_NAME_TX = 'Allied.UniTrac.Notice'
AND DATEDIFF (day , dc.CREATE_DT , CYCLE_START_DT ) = 0
AND #tmpPLI.RELATE_TYPE_CD = 'Allied.UniTrac.Notice'
--522


------ FPC ISSUED - CHECK THAT THE SUMMARY STATUS IS NOT CPI BINDER (CB) AND IS SET BACK TO PREVIOUS CYCLE
---- GENERALLY CPI EXPIRED NOTICE - CE WILL HAVE ONLY ONE NTC SEQUENCE
select ee.REQUIRED_COVERAGE_ID , evtseq.NOTICE_SEQ_NO , evtseq.NOTICE_TYPE_CD , 
  NOTICE_DT , rc.NOTICE_SEQ_NO , rc.NOTICE_TYPE_CD , rc.LAST_SEQ_CONTAINER_ID , 
  rc.LAST_EVENT_SEQ_ID , rc.LAST_EVENT_DT , rc.CPI_QUOTE_ID , rc.SUMMARY_STATUS_CD , rc.SUMMARY_SUB_STATUS_CD
  from EVALUATION_EVENT ee join #tmpPLI
on #TMPPLI.EVALUATION_EVENT_ID = ee.ID
and #TMPPLI.Relate_Type_cd = 'Allied.UniTrac.Forceplacedcertificate'
AND #TMPPLI.TYPE_CD = 'ISCT'
join REQUIRED_COVERAGE rc on rc.ID = ee.REQUIRED_COVERAGE_ID
join EVENT_SEQUENCE evtseq on evtseq.id = ee.EVENT_SEQUENCE_ID
where EVENT_SEQUENCE_ID is not null AND CPI_QUOTE_ID IS NULL
--AND SUMMARY_SUB_STATUS_CD = 'C'
--1

--- CHECK FPC & RELATE ARE PURGED 
SELECT FPC.PURGE_DT , FPC.UPDATE_USER_TX , REL.PURGE_DT , REL.UPDATE_USER_TX ,   * 
FROM FORCE_PLACED_CERTIFICATE FPC JOIN #tmpPLI PLI
ON PLI.RELATE_ID = FPC.ID
JOIN FORCE_PLACED_CERT_REQUIRED_COVERAGE_RELATE REL ON REL.FPC_ID = FPC.ID
WHERE PLI.Relate_Type_cd = 'Allied.UniTrac.Forceplacedcertificate'
AND PLI.TYPE_CD = 'ISCT'
--1

----- CHECK FPC IH BEING PURGED
SELECT IH.PURGE_DT , IH.UPDATE_USER_TX , * FROM #tmpPLI PLI
JOIN INTERACTION_HISTORY IH ON IH.RELATE_ID = PLI.RELATE_ID
WHERE IH.TYPE_CD = 'CPI'
AND PLI.Relate_Type_cd = 'Allied.UniTrac.Forceplacedcertificate'
AND PLI.TYPE_CD = 'ISCT'
--1

--- THIS IS NOT PURGED. BUT IT IS OK AS FPC IS PURGED
SELECT DC.PURGE_DT , DC.UPDATE_USER_TX , DC.ID , PLI.RELATE_ID AS FPC_ID 
FROM DOCUMENT_CONTAINER DC
JOIN #tmpPLI PLI ON PLI.RELATE_ID = DC.RELATE_ID
WHERE PLI.Relate_Type_cd = 'Allied.UniTrac.Forceplacedcertificate'
AND PLI.TYPE_CD = 'ISCT'
AND  DC.RELATE_CLASS_NAME_TX = 'Allied.UniTrac.Forceplacedcertificate'
--0

----- CHECK IF PAYMENTS ARE REST IN LOAN, IF PMT INCR LENDER
SELECT LOAN.NUMBER_TX , LOAN.ID , FPC.NUMBER_TX , LOAN.ORIGINAL_PAYMENT_AMOUNT_NO , LOAN.PAYMENT_AMOUNT_NO , 
LOAN.CURRENT_PAYMENT_INCREASE_AMOUNT_NO , FPC.PREVIOUS_PAYMENT_AMOUNT_NO , FPC.CURRENT_PAYMENT_AMOUNT_NO , 
QT.NEW_PAYMENT_AMOUNT_NO  FROM #tmpPLI PLI
JOIN FORCE_PLACED_CERTIFICATE FPC ON FPC.ID = PLI.RELATE_ID
JOIN CPI_QUOTE QT ON QT.ID = FPC.CPI_QUOTE_ID
JOIN LOAN ON LOAN.ID = FPC.LOAN_ID
WHERE PLI.Relate_Type_cd = 'Allied.UniTrac.Forceplacedcertificate'
AND PLI.TYPE_CD = 'ISCT'
AND QT.PAYMENT_INCREASE_METHOD_CD <> ''
ORDER BY LOAN.ID
--0

------ CERTS PRINTED - RESET TO PEND
select  dc.ID as DC_ID ,DC.PURGE_DT , DC.UPDATE_DT , DC.UPDATE_USER_TX , DC.RECIPIENT_TYPE_CD ,
  ee.ID as EE_ID , ee.EVENT_DT , EE.STATUS_CD 
from PROCESS_LOG_ITEM pli
join EVALUATION_EVENT ee on ee.ID = pli.EVALUATION_EVENT_ID
join DOCUMENT_CONTAINER dc on dc.RELATE_CLASS_NAME_TX = ee.RELATE_TYPE_CD
and dc.RELATE_ID = ee.RELATE_ID
JOIN WORK_ITEM WI ON WI.RELATE_ID = pli.PROCESS_LOG_ID
inner join process_log pl on pl.id = pli.process_log_id 
where WI.ID = 35916577
and pli.STATUS_CD = 'COMP'
and pli.RELATE_TYPE_CD = 'Allied.UniTrac.ForcePlacedCertificate'
and ee.TYPE_CD = 'PRNT'
--and dc.PURGE_DT is null
AND DATEDIFF (day , dc.CREATE_DT , pl.START_DT ) = 0
--0

---- CHECK OBCALL - SET TO PEND
select ee.* ,   * from #tmpPLI join EVALUATION_EVENT ee
on ee.ID = #tmpPLI.Evaluation_Event_Id
where #tmpPLI.RELATE_TYPE_CD = 'Allied.UniTrac.Workflow.OutboundCallWorkItem'
order by ee.TYPE_CD
--19

--- CHECK OBCALL WI IS PURGED
SELECT WI.PURGE_DT , WI.UPDATE_DT , WI.UPDATE_USER_TX , * 
FROM WORK_ITEM WI
JOIN #tmpPLI PLI ON PLI.RELATE_ID = WI.ID
WHERE PLI.RELATE_TYPE_CD = 'Allied.UniTrac.Workflow.OutboundCallWorkItem'
--19

---CHECK OB CALL IH IS PURGED
SELECT IH.TYPE_CD , IH.PURGE_DT , IH.UPDATE_USER_TX , * 
FROM #tmpPLI PLI JOIN WORK_ITEM WI ON 
WI.ID = PLI.RELATE_ID AND
PLI.RELATE_TYPE_CD = 'Allied.UniTrac.Workflow.OutboundCallWorkItem'
JOIN INTERACTION_HISTORY IH ON IH.ID = WI.RELATE_ID
--19

---- CHECK AUTO OBCALL - CHECK NOTICE IH IS PURGED
SELECT IH.TYPE_CD , IH.PURGE_DT , IH.UPDATE_USER_TX , * 
FROM #tmpPLI PLI JOIN INTERACTION_HISTORY IH ON 
IH.ID = PLI.RELATE_ID
WHERE IH.TYPE_CD = 'NOTICE'
AND PLI.RELATE_TYPE_CD = 'Allied.UniTrac.NoticeInteraction'
--0

---- AUTO OBCALL - CHECK IF RC LASTEVENTSEQUENCE ETC ARE CLEARED
SELECT RC.LAST_EVENT_DT , RC.LAST_EVENT_SEQ_ID , RC.LAST_SEQ_CONTAINER_ID , * 
FROM #tmpPLI PLI JOIN REQUIRED_COVERAGE RC ON RC.ID = PLI.REQUIRED_COVERAGE_ID
WHERE PLI.RELATE_TYPE_CD = 'Allied.UniTrac.NoticeInteraction'
--0

----- CHECK IF RC SUBSTATUS IS CLEARED FOR DFLT
SELECT RC.SUB_STATUS_CD ,  * FROM #tmpPLI PLI
JOIN REQUIRED_COVERAGE RC ON RC.ID = PLI.REQUIRED_COVERAGE_ID
WHERE PLI.RELATE_TYPE_CD = 'Allied.UniTrac.RequiredCoverage' and 
PLI.TYPE_CD = 'DFLT'
--0



 2015-05-29 02:22:57.467 , PDID = 50443
 
----- PAYMENT INCREASE
---- DROP TABLE #TMPLCGCT 
select Cycle.Col.value('.','bigint') as LCGCTId 
INTO #TMPLCGCT
	FROM PROCESS_DEFINITION PD
	CROSS APPLY PD.SETTINGS_XML_IM.nodes('/ProcessDefinitionSettings/LCGCTList/LCGCTId') as Cycle(Col)	
	where PD.ID IN (SELECT PROCESS_DEFINITION_ID FROM dbo.PROCESS_LOG WHERE ID IN (44091650))
	

---- CHECK PIR DATE IS CLEARED, REPLACE '2014-10-02' WITH PROCESS START DATE
SELECT FPC.PIR_DT , FPC.*
from FORCE_PLACED_CERTIFICATE fpc
    join FORCE_PLACED_CERT_REQUIRED_COVERAGE_RELATE rel on rel.FPC_ID = fpc.ID
    and fpc.PURGE_DT is null and rel.PURGE_DT is null
    join REQUIRED_COVERAGE rc on rc.ID = rel.REQUIRED_COVERAGE_ID
    and rc.PURGE_DT is null 
    join #tmpLCGCT lcgct on lcgct.LCGCTId = rc.LCGCT_ID
    where fpc.PIR_DT >= ''
---- NO RECORDS


----- CHECK NO RECORDS HAVE REPORT DATE & REPORT CODE SET
SELECT fpc.PAYMENT_REPORT_DT , FPC.PAYMENT_REPORT_CD , *
from FORCE_PLACED_CERTIFICATE fpc
    join FORCE_PLACED_CERT_REQUIRED_COVERAGE_RELATE rel on rel.FPC_ID = fpc.ID
    and fpc.PURGE_DT is null and rel.PURGE_DT is null
    join REQUIRED_COVERAGE rc on rc.ID = rel.REQUIRED_COVERAGE_ID
    and rc.PURGE_DT is null 
    join #tmpLCGCT lcgct on lcgct.LCGCTId = rc.LCGCT_ID
    where fpc.PAYMENT_REPORT_DT >= ''
    
    
--- CHECK EVALUATION EVENT IS CLEARED, ***EXCEPT FOR CCU/CCF/BI, OBCL & PRNT EVENTS***
SELECT TYPE_CD , STATUS_CD , UPDATE_DT , UPDATE_USER_TX  ,*
FROM EVALUATION_EVENT WHERE REQUIRED_COVERAGE_ID IN 
(
SELECT REQUIRED_COVERAGE_ID FROM #TMPPLI
)
AND STATUS_CD = 'PEND'
AND TYPE_CD <> 'RLBI'
